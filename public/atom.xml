<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[MutsuGhost1's Blog]]></title>
  <subtitle><![CDATA[Pursue excellence, and success will follow, pants down]]></subtitle>
  <link href="http://mutsughost1.github.io//atom.xml" rel="self"/>
  <link href="http://mutsughost1.github.io/"/>
  <updated>2014-06-01T02:53:31.485Z</updated>
  <id>http://mutsughost1.github.io//</id>
  <author>
    <name><![CDATA[MutsuGhost1]]></name>
    <email><![CDATA[MutsuGhost1@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Mockito Basic]]></title>
    <link href="http://mutsughost1.github.io/2014/05/18/learning-mockito/"/>
    <id>http://mutsughost1.github.io/2014/05/18/learning-mockito/</id>
    <published>2014-05-18T00:48:44.000Z</published>
    <updated>2014-05-28T19:26:13.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><h2>Learning Mockito with examples</h2>
<ol>
<li><strong><a href="#1">Verify some behavior (ignore any return value)</a></strong></li>
<li><strong><a href="#2">Verify some behavior with stubbing the return value</a></strong></li>
<li><strong><a href="#3">Verify unstubbing behavior</a></strong></li>
<li><strong><a href="#4">Argument matcher</a></strong></li>
<li><strong><a href="#5">Verify exact number of invocations</a></strong></li>
<li><strong><a href="#6">Verification in order</a></strong></li>
<li><strong><a href="#7">Finding redundant invocations</a></strong></li>
<li><strong><a href="#8">Stubbing consecutive calls</a></strong></li>
<li><strong><a href="#9">Stubbing with callbacks</a></strong></li>
<li><strong><a href="#10">doReturn()|doThrow()|doAnswer()|doNoting()|doCallRealMethod() family of methods</a></strong></li>
<li><strong><a href="#11">reset mock</a></strong></li>
<li><strong><a href="#12">Capturing Argument</a></strong></li>
<li><strong><a href="#13">Changing default return values of unstubbed invocations</a></strong></li>
<li><strong><a href="#14">Inject mock/spy object into tested target</a></strong></li>
<li><strong><a href="#15">Verify with timeout</a></strong></li>
</ol>
</li>
</ul>
<h2><a id="more"></a></h2>
<ul>
<li><h2>Basic Concepts</h2>
<ul>
<li>撰寫 Unit Test 的 3A 原則:<ol>
<li>Arrange: <ul>
<li>Set up th object to be tested.</li>
<li>We may need to surround the object with collaborators. <br> For testing purposes, those collaborators minght be test objects (mocks, fakes, etc…) or the real ting.</li>
</ul>
</li>
<li>Act:<ul>
<li>Act on the object. (invoke the tested method with parameters.)</li>
</ul>
</li>
<li>Assert:<ul>
<li>Make claims about the object, its collaborators, its parameters and possibly global state.</li>
<li>In other words, verify the test result.</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<hr>
<p><a name=1></a></p>
<h3>verify somw behavior (ignore any return value)</h3>
<pre><code>@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test01(){

    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;)mock(List<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    <span class="comment">// Action on the object</span>
    mockedList<span class="variable">.add</span>(<span class="string">"one"</span>);
    mockedList<span class="variable">.clear</span>();

    <span class="comment">// Assert</span>
    <span class="comment">// Verify the result</span>
    verify(mockedList)<span class="variable">.add</span>(<span class="string">"one"</span>);
    verify(mockedList)<span class="variable">.clear</span>();

    <span class="comment">// Act</span>
    <span class="comment">// Action on the object</span>
    mockedList<span class="variable">.add</span>(<span class="string">"one"</span>);
    mockedList<span class="variable">.clear</span>();

    <span class="comment">// Assert</span>
    <span class="comment">// Verify the result.</span>
    <span class="comment">// The interactions should be accumulated unless the mock object is reset</span>
    verify(mockedList, times(<span class="number">2</span>))<span class="variable">.add</span>(<span class="string">"one"</span>);
    verify(mockedList, times(<span class="number">2</span>))<span class="variable">.clear</span>();
}</code></pre>
<hr>
<p><a name=2></a></p>
<h3>verify some behavior with stubbing the return value</h3>
<pre><code><span class="property">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)
public <span class="reserved">void</span> test02(){
    <span class="regexp">//</span> Arrange
    <span class="regexp">//</span> Create the mock object, it can be a concrete <span class="class"><span class="keyword">class</span>
    <span class="title">LinkedList</span>&lt;<span class="title">String</span>&gt; <span class="title">mockedList</span> = (<span class="title">LinkedList</span>&lt;<span class="title">String</span>&gt;) <span class="title">mock</span>(<span class="title">LinkedList</span>.<span class="title">class</span>);</span>

    <span class="regexp">//</span> Act
    <span class="regexp">//</span> Stubbing it.
    <span class="regexp">//</span> Make it <span class="keyword">return</span> what you want
    <span class="keyword">when</span>(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">"first"</span>);
    <span class="regexp">//</span> The latter stubbing will override the former one
    <span class="keyword">when</span>(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">"firstfirst"</span>);
    System.out.println(<span class="string">"test02:"</span> + mockedList.get(<span class="number">0</span>));
    System.out.println(<span class="string">"test02:"</span> + mockedList.get(<span class="number">0</span>));

    <span class="regexp">//</span> Assert
    verify(mockedList, times(<span class="number">2</span>)).get(<span class="number">0</span>);
}</code></pre>
<p><strong>Output:</strong></p>
<pre><code><span class="tag">test02</span><span class="pseudo">:firstfirst</span>
<span class="tag">test02</span><span class="pseudo">:firstfirst</span></code></pre>
<hr>
<p><a name=3></a></p>
<h3>verify unstubbing behavior</h3>
<pre><code>@SuppressWarnings(<span class="string">"unchecked"</span>)
public void test03(){
    // Arrange
    // Create <span class="keyword">the</span> mock object, <span class="keyword">it</span> can be a concrete <span class="type">class</span>
    LinkedList&lt;String&gt; mockedList = (LinkedList&lt;String&gt;) mock(LinkedList.<span class="type">class</span>);

    // Act
    // The default <span class="constant">return</span> value <span class="keyword">for</span> object <span class="keyword">is</span> null.
    // For primitive type, <span class="keyword">the</span> default value <span class="keyword">for</span> int <span class="keyword">is</span> <span class="number">0.</span>
    //                   , <span class="keyword">the</span> default value <span class="keyword">for</span> <span class="type">boolean</span> <span class="keyword">is</span> <span class="constant">false</span>.
    System.out.println(<span class="string">"test03:"</span> + mockedList.<span class="keyword">get</span>(<span class="number">0</span>));

    // Assert
    // <span class="keyword">times</span>(<span class="number">1</span>) <span class="keyword">is</span> <span class="keyword">the</span> default value, <span class="keyword">if</span> you don't specify <span class="keyword">it</span>
    verify(mockedList, <span class="keyword">times</span>(<span class="number">1</span>)).<span class="keyword">get</span>(<span class="number">0</span>);
}</code></pre>
<p><strong>Output:</strong></p>
<pre><code>test03:<span class="keyword">null</span></code></pre>
<hr>
<p><a name=4></a></p>
<h3>argument matching using default matcher</h3>
<pre><code><span class="comment">// Argument Matching Using Default Matcher</span>
@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test04(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);
    when(mockedList<span class="variable">.get</span>(anyInt()))<span class="variable">.thenReturn</span>(<span class="string">"stubbing string"</span>);

    <span class="comment">// Act</span>
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10</span>; i++){
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"["</span>+ i + <span class="string">"]:"</span> + mockedList<span class="variable">.get</span>(i));
    }

    <span class="comment">// Assert</span>
    verify(mockedList, times(<span class="number">10</span>))<span class="variable">.get</span>(anyInt());
}</code></pre>
<p><strong>Output:</strong></p>
<pre><code><span class="attr_selector">[0]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[1]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[2]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[3]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[4]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[5]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[6]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[7]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[8]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[9]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span></code></pre>
<hr>
<h3>argument matching using customized matcher</h3>
<pre><code><span class="annotation">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)
<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IsListOfTwoElements</span> <span class="keyword">extends</span> <span class="title">ArgumentMatcher</span>&lt;<span class="title">List</span>&gt;{</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">boolean</span> matches(Object argument) {
        <span class="keyword">return</span> <span class="number">2</span> == ((List)argument).size();
    }

}

<span class="annotation">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)
<span class="keyword">private</span> List listOfTwoElements(){
    <span class="keyword">return</span> argThat(<span class="keyword">new</span> IsListOfTwoElements());
}

<span class="comment">// Argument Matching Using Custom Matcher</span>
<span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test05(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List.class);
    when(mockedList.addAll(listOfTwoElements())).thenReturn(<span class="keyword">true</span>);

    <span class="comment">// Act</span>
    mockedList.addAll(Arrays.asList(<span class="string">"one"</span>, <span class="string">"two"</span>));

    <span class="comment">// Assert</span>
    verify(mockedList).addAll(listOfTwoElements());
}</code></pre>
<hr>
<p><a name=5></a></p>
<h3>verify exact number of invocation</h3>
<pre><code>@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test06(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    mockedList<span class="variable">.add</span>(<span class="string">"one"</span>);
    mockedList<span class="variable">.add</span>(<span class="string">"two"</span>);
    mockedList<span class="variable">.add</span>(<span class="string">"two"</span>);
    mockedList<span class="variable">.add</span>(<span class="string">"three"</span>);
    mockedList<span class="variable">.add</span>(<span class="string">"three"</span>);
    mockedList<span class="variable">.add</span>(<span class="string">"three"</span>);

    <span class="comment">// Assert</span>
    verify(mockedList)<span class="variable">.add</span>(<span class="string">"one"</span>);
    verify(mockedList, times(<span class="number">1</span>))<span class="variable">.add</span>(<span class="string">"one"</span>);
    verify(mockedList, times(<span class="number">2</span>))<span class="variable">.add</span>(<span class="string">"two"</span>);
    verify(mockedList, times(<span class="number">3</span>))<span class="variable">.add</span>(<span class="string">"three"</span>);

    verify(mockedList, never())<span class="variable">.add</span>(<span class="string">"none"</span>);
    verify(mockedList, atLeastOnce())<span class="variable">.add</span>(<span class="string">"one"</span>);
    verify(mockedList, atLeast(<span class="number">2</span>))<span class="variable">.add</span>(<span class="string">"two"</span>);
    verify(mockedList, atMost(<span class="number">5</span>))<span class="variable">.add</span>(<span class="string">"three"</span>);
}</code></pre>
<hr>
<p><a name=6></a></p>
<h3>verification in order, using single mock</h3>
<pre><code><span class="keyword">public</span> <span class="keyword">void</span> test07(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; singleMock = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    singleMock<span class="variable">.add</span>(<span class="string">"one"</span>);
    singleMock<span class="variable">.add</span>(<span class="string">"two"</span>);

    <span class="comment">// Assert</span>
    InOrder inOrder = inOrder(singleMock);
    inOrder<span class="variable">.verify</span>(singleMock)<span class="variable">.add</span>(<span class="string">"one"</span>);
    inOrder<span class="variable">.verify</span>(singleMock)<span class="variable">.add</span>(<span class="string">"two"</span>);
}</code></pre>
<hr>
<h3>verification in order, using multiple mock</h3>
<pre><code>@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test08(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; firstMock = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);
    List&lt;String&gt; secondMock = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    firstMock<span class="variable">.add</span>(<span class="string">"one"</span>);
    secondMock<span class="variable">.add</span>(<span class="string">"two"</span>);
    firstMock<span class="variable">.add</span>(<span class="string">"three"</span>);
    secondMock<span class="variable">.add</span>(<span class="string">"four"</span>);

    <span class="comment">// Assert</span>
    <span class="comment">// Verification in order is flexible - you don't have to</span>
    <span class="comment">//   verify all interactions one-by-one but only those you're</span>
    <span class="comment">//   interested in testing in order</span>
    InOrder inOrder = inOrder(firstMock, secondMock);
    inOrder<span class="variable">.verify</span>(firstMock)<span class="variable">.add</span>(<span class="string">"one"</span>);
    inOrder<span class="variable">.verify</span>(secondMock)<span class="variable">.add</span>(<span class="string">"two"</span>);
    <span class="comment">// it still passes, even marks it as comment</span>
    inOrder<span class="variable">.verify</span>(firstMock)<span class="variable">.add</span>(<span class="string">"three"</span>);
    inOrder<span class="variable">.verify</span>(secondMock)<span class="variable">.add</span>(<span class="string">"four"</span>);
}</code></pre>
<hr>
<p><a name=7></a></p>
<h3>finding redundant invocations</h3>
<pre><code><span class="keyword">public</span> <span class="keyword">void</span> test09(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    mockedList<span class="variable">.add</span>(<span class="string">"one"</span>);
    mockedList<span class="variable">.add</span>(<span class="string">"two"</span>);

    <span class="comment">// Assert</span>
    verify(mockedList)<span class="variable">.add</span>(<span class="string">"one"</span>);
    verify(mockedList)<span class="variable">.add</span>(<span class="string">"two"</span>); <span class="comment">// mark it to fail</span>

    verifyNoMoreInteractions(mockedList);
}</code></pre>
<hr>
<p><a name=8></a></p>
<h3>stubbing consecutive calls (iterator-style stubbing)</h3>
<pre><code>@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test10(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    when(mockedList<span class="variable">.get</span>(<span class="number">0</span>))<span class="variable">.thenReturn</span>(<span class="string">"0"</span>)<span class="variable">.thenReturn</span>(<span class="string">"1"</span>);
    <span class="comment">// the usage above is equal to the below</span>
    <span class="comment">// when(mockedList.get(0)).thenReturn("0","1");</span>

    <span class="comment">// Assert</span>
    assertTrue(<span class="string">"0"</span><span class="variable">.equals</span>(mockedList<span class="variable">.get</span>(<span class="number">0</span>)));
    assertTrue(<span class="string">"1"</span><span class="variable">.equals</span>(mockedList<span class="variable">.get</span>(<span class="number">0</span>)));
}</code></pre>
<hr>
<p><a name=9></a></p>
<h3>stubbing with callbacks</h3>
<pre><code><span class="comment">// stubbing with callback</span>
<span class="comment">//   it can be used to simulate the response callback</span>
<span class="keyword">public</span> <span class="keyword">void</span> test11(){
    <span class="comment">// Arrange</span>
    Util mock = mock(Util<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    when(mock<span class="variable">.asyncCall</span>())<span class="variable">.thenAnswer</span>(new Answer(){
        @Override
        <span class="keyword">public</span> Object answer(InvocationOnMock invocation) throws Throwable {
            <span class="comment">// do the response call</span>
            System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test11: answer callback"</span>);
            <span class="keyword">return</span> Boolean<span class="variable">.valueOf</span>(<span class="literal">true</span>);
        }
    });

    <span class="comment">// Assert</span>
    assertTrue(mock<span class="variable">.asyncCall</span>());
    verify(mock)<span class="variable">.asyncCall</span>();
}</code></pre>
<hr>
<p><a name=10></a></p>
<h3>doReturn using mock</h3>
<pre><code><span class="comment">// doReturn using mock</span>
<span class="keyword">public</span> <span class="keyword">void</span> test12(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    <span class="comment">// When you use mock, it's equal to when(mockedList.get(0)).thenReturn("0")</span>
    doReturn(<span class="string">"one"</span>)<span class="variable">.when</span>(mockedList)<span class="variable">.get</span>(<span class="number">0</span>);
    <span class="comment">// when(mockedList.get(0)).thenReturn("0");</span>

    <span class="comment">// Assert</span>
    assertTrue(<span class="string">"one"</span><span class="variable">.equals</span>(mockedList<span class="variable">.get</span>(<span class="number">0</span>)));
    verify(mockedList)<span class="variable">.get</span>(<span class="number">0</span>);
}</code></pre>
<hr>
<h3>doReturn using spy</h3>
<pre><code><span class="comment">// doReturn using spy</span>
<span class="keyword">public</span> <span class="keyword">void</span> test13(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; spyList = (List&lt;String&gt;) spy(new LinkedList&lt;String&gt;());

    <span class="comment">// Act</span>
    <span class="comment">// When you use spy, it's not equal to when(spyList.get(0)).thenReturn("0")</span>
    doReturn(<span class="string">"one"</span>)<span class="variable">.when</span>(spyList)<span class="variable">.get</span>(<span class="number">0</span>);
    <span class="comment">// when(spyList.get(0)).thenReturn("0");</span>

    <span class="comment">// Assert</span>
    assertTrue(<span class="string">"one"</span><span class="variable">.equals</span>(spyList<span class="variable">.get</span>(<span class="number">0</span>)));
    verify(spyList)<span class="variable">.get</span>(<span class="number">0</span>);
}</code></pre>
<hr>
<h3>doThrow</h3>
<pre><code><span class="comment">// doThrow</span>
@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test14(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);

    <span class="comment">// it's equal to</span>
    <span class="comment">// doThrow(new RuntimeException()).when(mockedList).toString();</span>
    doThrow(RuntimeException<span class="variable">.class</span>)<span class="variable">.when</span>(mockedList)<span class="variable">.toString</span>();

    <span class="keyword">try</span>{
        System<span class="variable">.out</span><span class="variable">.println</span>(mockedList);
    }<span class="keyword">catch</span>(RuntimeException e){
        <span class="comment">/// pass</span>
    }
}</code></pre>
<hr>
<h3>doAnswer</h3>
<pre><code><span class="comment">// rewrite case 10 using doAnswer</span>
@SuppressWarnings(<span class="string">"rawtypes"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test15(){
    <span class="comment">// Arrange</span>
    Util mock = mock(Util<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    doAnswer(new Answer(){
        @Override
        <span class="keyword">public</span> Object answer(InvocationOnMock invocation) throws Throwable {
            <span class="comment">// do the response call</span>
            System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test15: answer callback"</span>);
            <span class="keyword">return</span> Boolean<span class="variable">.valueOf</span>(<span class="literal">true</span>);
        }
    })<span class="variable">.when</span>(mock)<span class="variable">.asyncCall</span>();

    <span class="comment">// Assert</span>
    assertTrue(mock<span class="variable">.asyncCall</span>());
    verify(mock)<span class="variable">.asyncCall</span>();
}</code></pre>
<p><strong>Output:</strong></p>
<pre><code><span class="attribute">test15</span>: <span class="string">answer callback</span>
<span class="attribute">test15</span>: <span class="string">answer callback</span></code></pre>
<hr>
<h3>doNothing</h3>
<pre><code><span class="comment">// doNothing</span>
<span class="comment">// it's rarely to use doNothing, the following is an example</span>
@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test16(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);
    doNothing()<span class="variable">.doThrow</span>(new RuntimeException())<span class="variable">.when</span>(mockedList)<span class="variable">.clear</span>();

    <span class="comment">// Act</span>
    <span class="comment">// does nothing the first time:</span>
    mockedList<span class="variable">.clear</span>();

    <span class="keyword">try</span>{
        <span class="comment">// throws RuntimeException the next time:</span>
        mockedList<span class="variable">.clear</span>();
    }<span class="keyword">catch</span>(RuntimeException e){

    }
}</code></pre>
<hr>
<h3>doRealCall</h3>
<pre><code><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="id">Util2</span>{</span>
    <span class="keyword">public</span> String A(){
        <span class="keyword">return</span> <span class="string">"A"</span>;
    }

    <span class="keyword">private</span> String B(){
        <span class="keyword">return</span> <span class="string">"B"</span>;
    }

    <span class="keyword">public</span> String AB(){
        <span class="keyword">return</span> A() + B();
    }
}

<span class="comment">// doRealCall</span>
<span class="comment">// mock object can also be used to do partial mock</span>
<span class="keyword">public</span> <span class="keyword">void</span> test17(){
    Util2 mockUtil2 = mock(Util2<span class="variable">.class</span>);
    assertTrue(null == mockUtil2<span class="variable">.A</span>());

    when(mockUtil2<span class="variable">.A</span>())<span class="variable">.thenCallRealMethod</span>();
    assertTrue(<span class="string">"A"</span><span class="variable">.equals</span>(mockUtil2<span class="variable">.A</span>()));

    <span class="comment">// mark any one to fail</span>
    when(mockUtil2<span class="variable">.B</span>())<span class="variable">.thenCallRealMethod</span>();
    when(mockUtil2<span class="variable">.AB</span>())<span class="variable">.thenCallRealMethod</span>();
    assertTrue(<span class="string">"AB"</span><span class="variable">.equals</span>(mockUtil2<span class="variable">.AB</span>()));
}</code></pre>
<hr>
<p><a name=11></a></p>
<h3>reset mock</h3>
<pre><code><span class="comment">// reset mock</span>
@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test18(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List.<span class="keyword">class</span>);

    <span class="comment">// Act</span>
    mockedList.<span class="keyword">get</span>(<span class="number">0</span>);
    reset(mockedList);

    <span class="comment">// Assert</span>
    verify(mockedList, never()).<span class="keyword">get</span>(<span class="number">0</span>);
}</code></pre>
<hr>
<p><a name=12></a></p>
<h3>capturing arguments</h3>
<pre><code><span class="comment">// capturing arguments for further assertions</span>
@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test19(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);
    ArgumentCaptor&lt;String&gt; argument = ArgumentCaptor<span class="variable">.forClass</span>(String<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    mockedList<span class="variable">.add</span>(<span class="string">"Hello World"</span>);
    mockedList<span class="variable">.add</span>(<span class="string">"two"</span>);
    mockedList<span class="variable">.add</span>(<span class="string">"three"</span>);

    <span class="comment">// Assert</span>
    verify(mockedList, times(<span class="number">3</span>))<span class="variable">.add</span>(argument<span class="variable">.capture</span>());

    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test19:"</span> + argument<span class="variable">.getAllValues</span>());
    <span class="comment">// print the argument of last call</span>
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test19:"</span> + argument<span class="variable">.getValue</span>());
}</code></pre>
<p><strong>Output:</strong></p>
<pre><code><span class="tag">test19</span>:<span class="attr_selector">[Hello World, two, three]</span>
<span class="tag">test19</span><span class="pseudo">:three</span></code></pre>
<hr>
<p><a name=13></a></p>
<h3>change the default value of unstubbed invocations (using RETURNS_SMART_NULLS)</h3>
<pre><code><span class="comment">// change the default value of unstubbed invocations</span>
<span class="comment">//   use RETURNS_SMART_NULLS to know which null pointer exception</span>
<span class="comment">//   is caused by unstubing</span>
@SuppressWarnings(<span class="string">"rawtypes"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test20(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    List mockedList =  mock(List<span class="variable">.class</span>, RETURNS_SMART_NULLS);
    ListIterator iterator = mockedList<span class="variable">.listIterator</span>();

    <span class="keyword">try</span>{
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test20:"</span> + iterator<span class="variable">.nextIndex</span>());
    }<span class="keyword">catch</span>(SmartNullPointerException e){

    }
}</code></pre>
<hr>
<h3>change the default value of unstubbed invocations (using CALLS_REAL_METHODS)</h3>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="id">PartialMockObject</span> {</span>
    <span class="keyword">public</span> String m1(){
        <span class="keyword">return</span> <span class="string">"PartialMockObject:"</span> + <span class="string">"m1"</span>;
    }

    <span class="keyword">public</span> String m2(){
        <span class="keyword">return</span> p() + <span class="string">"m3"</span>;
    }

    <span class="keyword">public</span> String m3(){
        <span class="keyword">return</span> pp() + <span class="string">"m3"</span>;
    }

    <span class="keyword">public</span> String p(){
        <span class="keyword">return</span> <span class="string">"PartialMockObject:"</span>;
    }

    <span class="keyword">private</span> String pp(){
        <span class="keyword">return</span> p();
    }
}

<span class="comment">// change the default value of unstubbed invocations</span>
<span class="comment">//   use CALLS_REAL_METHODS to simulate partial mock</span>
<span class="keyword">public</span> <span class="keyword">void</span> test24(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    PartialMockObject mock =  mock(PartialMockObject<span class="variable">.class</span>, CALLS_REAL_METHODS);
    PartialMockObject spy = spy(new PartialMockObject());

    when(mock<span class="variable">.m3</span>())<span class="variable">.thenReturn</span>(<span class="string">"m3 is stubbed"</span>);
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test24: mock.m1()="</span> + mock<span class="variable">.m1</span>());
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test24: mock.m2()="</span> + mock<span class="variable">.m2</span>());
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test24: mock.m3()="</span> + mock<span class="variable">.m3</span>());

    when(spy<span class="variable">.m3</span>())<span class="variable">.thenReturn</span>(<span class="string">"m3 is stubbed"</span>);
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test24: spy.m1()="</span> + spy<span class="variable">.m1</span>());
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test24: spy.m2()="</span> + spy<span class="variable">.m2</span>());
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test24: spy.m3()="</span> + spy<span class="variable">.m3</span>());
}</code></pre>
<p><strong>Output:</strong></p>
<pre><code><span class="attribute">test24</span>: <span class="string">mock.m1()=PartialMockObject:m1</span>
<span class="attribute">test24</span>: <span class="string">mock.m2()=PartialMockObject:m3</span>
<span class="attribute">test24</span>: <span class="string">mock.m3()=m3 is stubbed</span>
<span class="attribute">test24</span>: <span class="string">spy.m1()=PartialMockObject:m1</span>
<span class="attribute">test24</span>: <span class="string">spy.m2()=PartialMockObject:m3</span>
<span class="attribute">test24</span>: <span class="string">spy.m3()=m3 is stubbed</span></code></pre>
<hr>
<p><a name=14></a></p>
<h3>inject mock/spy into tested target (using constructor)</h3>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="id">SUT</span> {</span>
    List&lt;String&gt; mList;

    <span class="keyword">public</span> SUT(List&lt;String&gt; list){
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT's constructor"</span>);
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT's mList:"</span> + mList);
        mList = list;
    }

    <span class="keyword">public</span> String get(<span class="keyword">int</span> index){
        <span class="keyword">return</span> mList<span class="variable">.get</span>(index);
    }

    <span class="keyword">public</span> boolean put(String obj){
        <span class="keyword">return</span> mList<span class="variable">.add</span>(obj);
    }

    @Override
    <span class="keyword">public</span> boolean equals(Object obj) {
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT'equals: (SUT)obj).mList ="</span> + ((SUT)obj)<span class="variable">.mList</span>);
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT'equals: mList ="</span> + mList);
        <span class="keyword">return</span> ((SUT)obj)<span class="variable">.mList</span> == mList;
    }
}</code></pre>
<p><strong>Output:</strong></p>
<pre><code>test21: start
SUT<span class="string">'s constructor
SUT'</span>s mList:null
SUT2<span class="string">'s constructor
SUT3'</span>s <span class="function"><span class="keyword">constructor</span>
<span class="title">SUT</span>'<span class="title">s</span> <span class="title">constructor</span>
<span class="title">SUT</span>'<span class="title">s</span> <span class="title">mList</span>:</span>null
SUT<span class="string">'equals: (SUT)obj).mList =mList
SUT'</span>equals: mList =mList
test21: <span class="keyword">end</span></code></pre>
<hr>
<h3>inject mock/spy into tested target (using setter)</h3>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="id">SUT2</span> {</span>
    List&lt;String&gt; mList2;

    <span class="keyword">public</span> SUT2(){
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT2's constructor"</span>);
    }

    <span class="keyword">public</span> String get(<span class="keyword">int</span> index){
        <span class="keyword">return</span> mList2<span class="variable">.get</span>(index);
    }

    <span class="keyword">public</span> boolean put(String obj){
        <span class="keyword">return</span> mList2<span class="variable">.add</span>(obj);
    }

    <span class="keyword">public</span> <span class="keyword">void</span> setList(List&lt;String&gt; list){
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT2's setList"</span>);
        mList2 = list;
    }
    @Override
    <span class="keyword">public</span> boolean equals(Object obj) {
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT2's equals: (SUT2)obj).mList2 ="</span> + ((SUT2)obj)<span class="variable">.mList2</span>);
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT2's equals: mList2 ="</span> + mList2);
        <span class="keyword">return</span> ((SUT2)obj)<span class="variable">.mList2</span> == mList2;
    }
}

<span class="comment">// dependency injection using the setter</span>
@Mock <span class="keyword">private</span> List&lt;String&gt; mList2;
@InjectMocks <span class="keyword">private</span> SUT2 mSUT2;
<span class="keyword">public</span> <span class="keyword">void</span> test22(){
    <span class="comment">// Arrange</span>
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test22: start"</span>);
    MockitoAnnotations<span class="variable">.initMocks</span>(<span class="keyword">this</span>);
    <span class="comment">// Act</span>
    <span class="comment">// Assert</span>
    assertNotNull(mList2);
    assertNotNull(mSUT2);

    SUT2 sut2 = new SUT2();
    sut2<span class="variable">.setList</span>(mList2);
    assertTrue(mSUT2<span class="variable">.equals</span>(sut2));
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test22: end"</span>);
}</code></pre>
<p><strong>Output:</strong></p>
<pre><code>test22: start
SUT<span class="string">'s constructor
SUT'</span>s mList:null
SUT2<span class="string">'s constructor
SUT3'</span>s <span class="function"><span class="keyword">constructor</span>
<span class="title">SUT2</span>'<span class="title">s</span> <span class="title">constructor</span>
<span class="title">SUT2</span>'<span class="title">s</span> <span class="title">setList</span>
<span class="title">SUT2</span>'<span class="title">s</span> <span class="title">equals</span>:</span> (SUT2)obj).mList2 =mList2
SUT2<span class="string">'s equals: mList2 =mList2
test22: end</code></pre>
<hr>
<h3>inject mock/spy into tested target (using field)</h3>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="id">SUT3</span> {</span>
    List&lt;String&gt; mList3;

    <span class="keyword">public</span> SUT3(){
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT3's constructor"</span>);
    }

    <span class="keyword">public</span> String get(<span class="keyword">int</span> index){
        <span class="keyword">return</span> mList3<span class="variable">.get</span>(index);
    }

    <span class="keyword">public</span> boolean put(String obj){
        <span class="keyword">return</span> mList3<span class="variable">.add</span>(obj);
    }
    @Override
    <span class="keyword">public</span> boolean equals(Object obj) {
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT3's equals: (SUT3)obj).mList3 ="</span> + ((SUT3)obj)<span class="variable">.mList3</span>);
        System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"SUT3's equals: mList3 ="</span> + mList3);
        <span class="keyword">return</span> ((SUT3)obj)<span class="variable">.mList3</span> == mList3;
    }
}

<span class="comment">// dependency injection using field</span>
@Mock(name=<span class="string">"mList3"</span>) <span class="keyword">private</span> List&lt;String&gt; mLIST3;
@InjectMocks <span class="keyword">private</span> SUT3 mSUT3;
<span class="keyword">public</span> <span class="keyword">void</span> test23(){
    <span class="comment">// Arrange</span>
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test23: start"</span>);
    MockitoAnnotations<span class="variable">.initMocks</span>(<span class="keyword">this</span>);
    <span class="comment">// Act</span>
    <span class="comment">// Assert</span>
    assertNotNull(mLIST3);
    assertNotNull(mSUT3);

    SUT3 sut3 = new SUT3();
    sut3<span class="variable">.mList3</span> = mLIST3;
    assertTrue(mSUT3<span class="variable">.equals</span>(sut3));
    System<span class="variable">.out</span><span class="variable">.println</span>(<span class="string">"test23: end"</span>);
}</code></pre>
<p><strong>Output:</strong></p>
<pre><code>test23: start
SUT<span class="string">'s constructor
SUT'</span>s mList:null
SUT2<span class="string">'s constructor
SUT3'</span>s <span class="function"><span class="keyword">constructor</span>
<span class="title">SUT3</span>'<span class="title">s</span> <span class="title">constructor</span>
<span class="title">SUT3</span>'<span class="title">s</span> <span class="title">equals</span>:</span> (SUT3)obj).mList3 =mList3
SUT3<span class="string">'s equals: mList3 =mList3
test23: end</code></pre>
<hr>
<p><a name=15></a></p>
<h3>verify with timeout</h3>
<pre><code>@SuppressWarnings(<span class="string">"unchecked"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> test25(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it's an interface</span>
    final List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List<span class="variable">.class</span>);

    <span class="comment">// Act</span>
    <span class="comment">// When you use mock, it's equal to when(mockedList.get(0)).thenReturn("0")</span>
    Thread t1 = new Thread(new Runnable() {
        @Override
        <span class="keyword">public</span> <span class="keyword">void</span> run() {
            <span class="keyword">try</span>{
                Thread<span class="variable">.sleep</span>(<span class="number">2500</span>);
                <span class="comment">// when(mockedList.get(0)).thenReturn("0");</span>
                doReturn(<span class="string">"one"</span>)<span class="variable">.when</span>(mockedList)<span class="variable">.get</span>(<span class="number">0</span>);
                assertTrue(<span class="string">"one"</span><span class="variable">.equals</span>(mockedList<span class="variable">.get</span>(<span class="number">0</span>)));
            } <span class="keyword">catch</span>(InterruptedException e){

            }
        }
    });
    t1<span class="variable">.start</span>();

    <span class="comment">// Assert</span>
    <span class="keyword">long</span> start, <span class="keyword">end</span>, elapsed;
    start = System<span class="variable">.currentTimeMillis</span>();
    <span class="comment">// if the condition is satisfied, it won't be blocked</span>
    verify(mockedList, timeout(<span class="number">3000</span>))<span class="variable">.get</span>(<span class="number">0</span>);
    <span class="keyword">end</span> = System<span class="variable">.currentTimeMillis</span>();
    elapsed = <span class="keyword">end</span> - start;
    assertTrue(elapsed &gt; <span class="number">2000</span>);
}</code></pre>
<hr>
<ul>
<li>[Reference]<ul>
<li>[1] <a href="http://code.google.com/p/mockito/" target="_blank">Mockito Official Website</a></li>
<li>[2] <a href="http://msdn.microsoft.com/zh-tw/library/dn167673.aspx" target="_blank">30天快速上手TDD</a></li>
</ul>
</li>
</ul>
]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Software Testing/" term="Software Testing"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Python Basic]]></title>
    <link href="http://mutsughost1.github.io/2013/09/29/python-basic/"/>
    <id>http://mutsughost1.github.io/2013/09/29/python-basic/</id>
    <published>2013-09-29T12:45:42.000Z</published>
    <updated>2013-10-08T22:51:46.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="#python_folder_structure" title="Python&#39;s Folder Structure">Python&#39;s Folder Structure</a></li>
<li><a href="#yield_about" title="關於 yield">關於 <em>yield</em></a><ul>
<li><a href="#yield_history" title="yield 是為何而生 ?">yield 是為何而生 ?</a></li>
<li><a href="#yield_usage" title="yield 的各種用法">yield 的各種用法</a><ul>
<li><a href="#yield_fundamental" title="的基本運作原理">yield 的基本運作原理</a></li>
<li><a href="#yield_send" title="send(expression)">send(expression) - pass a value to generator</a></li>
<li><a href="#yield_throw" title="throw">throw(type[,value[,traceback]]) - raise exception inside generator</a></li>
<li><a href="#yield_close" title="close()">close() - terminate the generator</a></li>
<li><a href="#yield_generator_exp" title="generator expression">generator expression - 快速產生一個 generator object</a></li>
</ul>
</li>
<li><a href="#yield_reference">Reference</a></li>
</ul>
</li>
<li>Python Scope 概念</li>
<li><a href="#others" title="其他">其他</a><ul>
<li><a href="http://www.python.org/dev/peps/pep-0202/" title="PEP202" target="_blank">List Comprehesion</a> </li>
<li><a href="#lambda_exp" title="Lambda expression">Lambda expression</a></li>
<li><a href="#built_in_map" title="Built-in Funtion map">Built-in Funtion map</a></li>
<li><a href="#built_in_reduce" title="Built-in Funtion reduce">Built-in Funtion reduce</a></li>
<li><a href="#built_in_filter" title="Built-in Funtion filter">Built-in Funtion filter</a></li>
<li><a href="#built_in_zip" title="Built-in Funtion zip">Built-in Funtion zip</a><a id="more"></a>
</li>
</ul>
</li>
</ul>
<hr>
<p><a name=python_folder_structure></a></p>
<h1><em>Python&#39;s Folder Structure</em></h1>
<p>在開始使用 Python 之前, 必須先在系統裝<a href="http://www.python.org/getit/" target="_blank">安裝 Python 的執行環境</a>, 安裝完後會發現, 預設的資料夾結構如下:</p>
<p><img src="http://MutsuGhost1.github.io/image/python_install1.PNG" alt=""></p>
<ul>
<li>在 PythonXX —&gt; Lib 目錄中, 可以看到 Python Built-in Module 的 Source Code  </li>
<li>在 PythonXX —&gt; Lib —&gt; site-packages 目錄中, 可以看到安裝的 3rd Party Package</li>
</ul>
<p><img src="http://MutsuGhost1.github.io/image/python_install2.PNG" alt=""></p>
<hr>
<p><a name=yield_about></a></p>
<h1>關於 <em>yield</em> 用法</h1>
<p><a name=yield_history></a></p>
<h2>yield 是為何而生 ?</h2>
<p>在 <a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank">PEP255</a> 中,有一段話是這麼描述的  </p>
<blockquote>
<p><em>When a producer function has a hard enough job that it requires<br>maintaining state between values produced, most programming languages<br>offer no pleasant and efficient solution beyond adding a callback<br>function to the producer&#39;s argument list, to be called with each value produced</em>  </p>
</blockquote>
<p>當一個複雜的 producer function, 為了在每次被呼叫時, 正確的 produce 出資料, 必須在 producer function<br>內實作一些複雜的 states 使得資料可以被正確產生.  </p>
<p><a href="http://en.wikipedia.org/wiki/Fibonacci_number" title="Fibonacci Series in Wiki" target="_blank">以 Fibonacci Series 為例</a></p>
<pre><code><span class="comment"># fib0.py produce 出 n 個 number 的 fibonacci series</span>
<span class="function"><span class="keyword">def</span> <span class="title">fib0</span><span class="params">(end)</span>:</span>
    a, b = <span class="number">0</span>, <span class="number">1</span>
    <span class="keyword">for</span> i <span class="keyword">in</span> range(end):
        a, b = b, a + b
        <span class="keyword">print</span> <span class="string">"i="</span>, i, <span class="string">" a="</span>, a

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    fib0(<span class="number">10</span>)

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main()</code></pre>
<p>Output:  </p>
<pre><code><span class="setting">i= <span class="value"><span class="number">0</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">1</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">2</span> a= <span class="number">2</span></span></span>
<span class="setting">i= <span class="value"><span class="number">3</span> a= <span class="number">3</span></span></span>
<span class="setting">i= <span class="value"><span class="number">4</span> a= <span class="number">5</span></span></span>
<span class="setting">i= <span class="value"><span class="number">5</span> a= <span class="number">8</span></span></span>
<span class="setting">i= <span class="value"><span class="number">6</span> a= <span class="number">13</span></span></span>
<span class="setting">i= <span class="value"><span class="number">7</span> a= <span class="number">21</span></span></span>
<span class="setting">i= <span class="value"><span class="number">8</span> a= <span class="number">34</span></span></span>
<span class="setting">i= <span class="value"><span class="number">9</span> a= <span class="number">55</span></span></span></code></pre>
<p>上述 <strong>fib0.py</strong> 的做法, 只能一次 produce 出所有的 numbers, 若要做成每次呼叫才 produce 出 number,<br>必須由 programmer 定義額外的 states 來做處理, 類似的做法如下:</p>
<pre><code><span class="comment"># fib1.py produce 出 n 個 number 的 fibonacci series</span>
<span class="comment"># global variable to keep state</span>
fib_state_cur = <span class="number">0</span>
fib_state_end = <span class="number">0</span>
fib_state_a = <span class="number">0</span>
fib_state_b = <span class="number">1</span>
<span class="function"><span class="keyword">def</span> <span class="title">fib1</span><span class="params">(end=-<span class="number">1</span>)</span>:</span>
    <span class="comment"># use global variable to keep state</span>
    <span class="keyword">global</span> fib_state_cur, fib_state_end, fib_state_a, fib_state_b

    <span class="comment"># reset state for each new call</span>
    <span class="keyword">if</span> <span class="number">0</span> &lt; end:
        fib_state_cur = <span class="number">0</span>
        fib_state_end = end
        fib_state_a = <span class="number">0</span>
        fib_state_b = <span class="number">1</span>

    <span class="comment"># restore the state for each call</span>
    start = fib_state_cur
    end = fib_state_end
    a, b = fib_state_a, fib_state_b

    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):
        a, b = b, a + b
        <span class="comment"># keep the state</span>
        fib_state_cur = i+<span class="number">1</span>
        fib_state_a, fib_state_b = a, b
        <span class="keyword">return</span> a

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):
        <span class="keyword">if</span> <span class="number">0</span> == i:
            <span class="comment"># first time to initialize the number of items</span>
            <span class="keyword">print</span> <span class="string">"i="</span>, i, <span class="string">"a="</span>, fib1(<span class="number">10</span>)
        <span class="keyword">else</span>:
            <span class="comment"># get the next number</span>
            <span class="keyword">print</span> <span class="string">"i="</span>, i, <span class="string">"a="</span>, fib1()

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main()</code></pre>
<p>Output:  </p>
<pre><code><span class="setting">i= <span class="value"><span class="number">0</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">1</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">2</span> a= <span class="number">2</span></span></span>
<span class="setting">i= <span class="value"><span class="number">3</span> a= <span class="number">3</span></span></span>
<span class="setting">i= <span class="value"><span class="number">4</span> a= <span class="number">5</span></span></span>
<span class="setting">i= <span class="value"><span class="number">5</span> a= <span class="number">8</span></span></span>
<span class="setting">i= <span class="value"><span class="number">6</span> a= <span class="number">13</span></span></span>
<span class="setting">i= <span class="value"><span class="number">7</span> a= <span class="number">21</span></span></span>
<span class="setting">i= <span class="value"><span class="number">8</span> a= <span class="number">34</span></span></span>
<span class="setting">i= <span class="value"><span class="number">9</span> a= <span class="number">55</span></span></span></code></pre>
<p>大多數的程式語言, 針對這樣的問題在語法上並沒有直接的支援, 因此除了上述的做法外, 大多數折衷的做法都是提供<br>callback function 給producer function 當作參數, 當每次資料被 produce 出來時, 透過 callback function 來通知 consumer.  </p>
<p>為了對類似的需求, 有更好的支援, <a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank">PEP255</a> 被提出且實現於 Python 2.3 中, 在初版 <a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank">PEP255</a> 的定義中, yield 是一個 statement.</p>
<p>透過 yield 的支援, 可將 <strong>fib1.py</strong> 簡化為 <strong>fib2.py</strong>, 如下:</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(end)</span>:</span>
    a, b = <span class="number">0</span>, <span class="number">1</span>
    <span class="keyword">for</span> i <span class="keyword">in</span> range(end):
        a, b = b, a + b
        <span class="keyword">yield</span> a

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    i = <span class="number">0</span>
    <span class="keyword">for</span> a <span class="keyword">in</span> fib2(<span class="number">10</span>):
        <span class="keyword">print</span> <span class="string">"i="</span>, i, <span class="string">"a="</span>, a
        i+=<span class="number">1</span>  </code></pre>
<p>Output:  </p>
<pre><code><span class="setting">i= <span class="value"><span class="number">0</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">1</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">2</span> a= <span class="number">2</span></span></span>
<span class="setting">i= <span class="value"><span class="number">3</span> a= <span class="number">3</span></span></span>
<span class="setting">i= <span class="value"><span class="number">4</span> a= <span class="number">5</span></span></span>
<span class="setting">i= <span class="value"><span class="number">5</span> a= <span class="number">8</span></span></span>
<span class="setting">i= <span class="value"><span class="number">6</span> a= <span class="number">13</span></span></span>
<span class="setting">i= <span class="value"><span class="number">7</span> a= <span class="number">21</span></span></span>
<span class="setting">i= <span class="value"><span class="number">8</span> a= <span class="number">34</span></span></span>
<span class="setting">i= <span class="value"><span class="number">9</span> a= <span class="number">55</span></span></span></code></pre>
<p>到了 Python 2.5, 針對 yield 有更進一步的 enhancement <a href="http://www.python.org/dev/peps/pep-0342/" title="PEP342" target="_blank">PEP342</a>, 使其能夠較完善的處理 <a href="http://en.wikipedia.org/wiki/Coroutine#Implementations_for_Python" title="Coroutine in Wiki" target="_blank">Coroutine</a> 這類的問題.  </p>
<hr>
<p><a name=yield_usage></a></p>
<h2>yield 的各種用法</h2>
<p>由於 <a href="http://www.python.org/dev/peps/pep-0342/" title="PEP342" target="_blank">PEP342</a> 是針對 <a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank">PEP255</a> 的 enhancement, 因此以下直接針對 <a href="http://www.python.org/dev/peps/pep-0342/" title="PEP342" target="_blank">PEP342</a> 的各項用法, 一一做個說明.<br><a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank">PEP255</a> 中, yield 是一個 statement.<br><a href="http://www.python.org/dev/peps/pep-0342/" title="PEP342" target="_blank">PEP342</a> 中, yield 是一個 expression, 因此將 yield expression 的回傳值忽略掉當成 yield statement 來討論既可.  </p>
<p><a name=yield_fundamental></a></p>
<h3>yield 的基本運作原理</h3>
<p>首先, 先看看 Python 如何看待一個包含有 yield 語法的 function [1]:</p>
<blockquote>
<p>A function which returns an iterator. It looks like a normal function except that it contains yield statements<br>for producing a series a values usable in a for-loop or that can be retrieved one at a time with the next() function.<br>Each yield temporarily suspends processing, remembering the location execution state<br>(including local variables and pending try-statements).<br>When the generator resumes, it picks-up where it left-off  (in contrast to functions which start fresh on every invocation).  </p>
</blockquote>
<p>上面這句話, 我們可以拆成幾個部份來理解:  </p>
<ol>
<li>當一個 function 內包含了 yield 語法, 這個 function 就稱為 generator.  </li>
<li>這個 function (generator) 被呼叫時, 回傳一個 iterator (generator object).  </li>
<li>iterator 內執行的代碼, 既為 function 內定義的代碼.<br>唯一的差異是, 每次呼叫 next() 都會在 yield expression 處 suspend (儲存整個 context 的變數狀態)<br>並且 return 其 yield 的 value 給 next() 的 caller</li>
<li>每次呼叫 next(), 都會從上一次結束的地方 resume (恢復整個 context 的變數狀態), 並繼續執行到下個 yield 處</li>
<li>若呼叫 next() 時, 代碼中已無 yield expression 可 suspend, 則產生 StopIterator Exception  </li>
</ol>
<p>下面的代碼, 驗證了上述的說法:</p>
<pre><code><span class="comment"># generator_demo.py  </span>

<span class="comment"># 1. define a function (generator)</span>
<span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>              <span class="comment"># 第一次呼叫 next() 將於此開始執行</span>
    <span class="keyword">yield</span> x              <span class="comment"># 第一次 next() 呼叫後, 將 suspend 於此, 並回傳 x</span>
    x += <span class="number">20</span>              <span class="comment"># 第二次呼叫 next() 將於此開始執行, 保有上次執行個變數內容的 context</span>
    <span class="keyword">yield</span> x              <span class="comment"># 第二次 next() 呼叫後, 將 suspend 於此, 並回傳 x</span>
                         <span class="comment"># 第三次呼叫 next() 將觸發 StopIterator Exception</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    <span class="keyword">print</span> type(gen)      <span class="comment"># 1. gen   型別為 &lt;type 'function'&gt;, 提供產生 generator(iterator) object</span>
    <span class="keyword">print</span> type(gen())    <span class="comment"># 2. gen() 型別為 &lt;type 'generator'&gt;</span>
    gen_var = gen()      
    <span class="keyword">print</span> gen_var        <span class="comment"># gen_var 為一個 &lt;generator object gen at 0x00DE8288&gt;</span>
    <span class="keyword">print</span> type(gen_var)  <span class="comment"># gen_var 型別為 &lt;type 'generator'&gt;</span>
    <span class="keyword">print</span> gen_var.next() <span class="comment"># 3. 100</span>
    <span class="keyword">print</span> gen_var.next() <span class="comment"># 4. 120</span>
    <span class="keyword">print</span> gen_var.next() <span class="comment"># 5. raise StopIteratorException</span>

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main() </code></pre>
<p>Output:  </p>
<pre><code><span class="tag">&lt;<span class="title">type</span> '<span class="attribute">function</span>'&gt;</span>
<span class="tag">&lt;<span class="title">type</span> '<span class="attribute">generator</span>'&gt;</span>
<span class="tag">&lt;<span class="title">type</span> '<span class="attribute">generator</span>'&gt;</span>
<span class="tag">&lt;<span class="title">generator</span> <span class="attribute">object</span> <span class="attribute">gen</span> <span class="attribute">at</span> <span class="attribute">0x00DE82B0</span>&gt;</span>
100
120
Traceback (most recent call last):
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 29, in <span class="tag">&lt;<span class="title">module</span>&gt;</span>
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 26, in main
StopIteration</code></pre>
<p>歸納上述幾項重點:  </p>
<ul>
<li><strong>yield 基本上是搭配在 function 內部使用的</strong></li>
<li>使用 yield 語法的 function, 又稱之為 generator</li>
<li>generator 所產生的 generator object 是一個 iterator.</li>
<li>generator 每次執行的 next() 代碼, 即為 function 內部的代碼, 差別在於<ul>
<li>next() 執行到 yield 處即 suspend, 並回傳 yield 的 value 給 next() caller  </li>
<li>每次執行 next() 將會從上次 suspend 處, 繼續 resume, 且保有上次 context 內的變數狀態</li>
</ul>
</li>
<li>若呼叫 next() 時, 代碼中已無 yield expression 可 suspend, 則產生 StopIterator Exception</li>
</ul>
<p><a name=yield_send></a></p>
<h2>send(expression) - pass a value to generator</h2>
<p>理解完 <a href="#yield_fundamental" title="的基本運作原理">yield 的基本運作原理</a>, 就很好理解 send 這個 method 的行為.<br>send(expression) 和 next() 一樣, 是 trigger iterator 的執行, 直到遇到下一個 yield expression.<br>差異在於:  </p>
<ul>
<li>send(expression) 是 <a href="http://www.python.org/dev/peps/pep-0342/" title="Coroutines via Enhanced Generators" target="_blank">PEP342</a> 提出, 在 Python 2.5 實現, 用來指定 yield expression 所 evaluate 的結果  </li>
<li>這也是為何在 Python 2.5 中, yield 從 statement 變更為 expression 的原因之一</li>
<li>在 Python 2.3, yield 還是一個 statement  </li>
</ul>
<p>下列代碼說明了, send(expression) 如何指令 yield expression 的結果.</p>
<pre><code><span class="comment"># generator_send_demo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">gen2</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>                     <span class="comment"># 呼叫 next() 將於此開始執行</span>
    y = <span class="keyword">yield</span> x                 <span class="comment"># next() 呼叫後, 將 suspend 於此, 並回傳 x</span>
                                <span class="comment"># 呼叫 send(10) 將於此開始執行, 保有上次執行個變數內容的 context,  </span>
                                <span class="comment"># 將 send 指定的值 assign 給 y</span>
    x += y                      <span class="comment"># send(10) 呼叫後, 執行此 statement, </span>
    y = <span class="keyword">yield</span> x                 <span class="comment"># send(10) 呼叫後, 將 suspend 於此, 並回傳 x</span>
                                <span class="comment"># 呼叫 send(20) 將於此開始執行, 保有上次執行個變數內容的 context,   </span>
                                <span class="comment"># 將 send 指定的值 assign 給 y</span>
    x += y                      <span class="comment"># send(20) 呼叫後, 執行 statement,</span>
    <span class="keyword">yield</span> x                     <span class="comment"># send(20) 呼叫後, 將 suspend 於此, 並回傳 x</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_var2 = gen2()           <span class="comment"># 產生一個 generator object 儲存於 gen_var2</span>
    <span class="keyword">print</span> gen_var2.next()       <span class="comment"># the same result with calling gen_var2.send(None)</span>
    <span class="keyword">print</span> gen_var2.send(<span class="number">10</span>)     <span class="comment"># 執行 gen_var2.send()</span>
    <span class="keyword">print</span> gen_var2.send(<span class="number">20</span>)     <span class="comment"># 執行 gen_var2.send()</span>
    <span class="keyword">print</span> gen_var2.send(<span class="number">30</span>)     <span class="comment"># the same reslut with calling gen_var2.next(), </span>
                                <span class="comment"># raise StopIterator Exception</span>

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main() </code></pre>
<p>Output:  </p>
<pre><code>100
110
130
Traceback (most recent call last):
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 49, in <span class="tag">&lt;<span class="title">module</span>&gt;</span>
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 35, in main
StopIteration</code></pre>
<p>這邊補充幾個重點:  </p>
<ul>
<li>可將 y = yield x 看成右半部跟左半部兩個動作, suspend 的時候執行右半部, resume 的時候才執行左半部的 assign.  </li>
<li>透過 generator object, 第一次呼 iterate iterator 時, 只能使用 next() or send(None), 兩者等價 </li>
</ul>
<p><a name=yield_throw></a></p>
<h2>throw(type[,value[,traceback]]) - raise exception inside generator</h2>
<p><a href="http://www.python.org/dev/peps/pep-0342/" title="Coroutines via Enhanced Generators" target="_blank">PEP342</a> 提到, 想在 generator 中, suspend 在 iterator 的點, 產生 exception, 可以透過 throw 來達成.  </p>
<p>參考下列代碼:  </p>
<pre><code><span class="comment"># generator_throw_demo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">gen3</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>                              <span class="comment"># 呼叫 gen_var3.send(None) 將由此開始執行</span>
    <span class="keyword">try</span>:
        y = <span class="keyword">yield</span> x                      <span class="comment"># gen_var3.send(None) 呼叫後, 將 suspend 於此, 並回傳 x</span>
                                         <span class="comment"># throw GeneratorExit 發生於此</span>
        x += y
        y = <span class="keyword">yield</span> x
        x += y
        <span class="keyword">yield</span> x
<span class="keyword">except</span>:                                  <span class="comment"># 處理所有型態的 exception, 包含 GeneratorExit Exception</span>
    <span class="keyword">pass</span>                                 <span class="comment"># pass GeneratorExit Exception 的處理</span>
                                         <span class="comment"># 由於沒有 yield expression 了, </span>
                                         <span class="comment"># 因此 raise StopIterator Exception</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_var3 = gen3()                    <span class="comment"># 產生一個 generator object 儲存於 gen_var3</span>
    <span class="keyword">print</span> gen_var3.send(<span class="built_in">None</span>)            <span class="comment"># the same result with calling gen_var2.next()</span>
    <span class="keyword">print</span> gen_var3.throw(GeneratorExit)  <span class="comment"># 在 generator 內部產生一個 GeneratorExit Exception</span>

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main()</code></pre>
<p>Output:  </p>
<pre><code>100
Traceback (most recent call last):
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 47, in <span class="tag">&lt;<span class="title">module</span>&gt;</span>
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 33, in main
StopIteration</code></pre>
<p>此外, 由外部 trigger generator 內的 exception 後, 仍然可在內部的 exception handler 搭配 yield 繼續做處理.  </p>
<p>參考下列代碼:  </p>
<pre><code><span class="comment"># generator_throw_demo2.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">gen3</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>                               <span class="comment"># 第一次 gen_var3.send(None) 將由此開始執行</span>
    <span class="keyword">try</span>:
        y = <span class="keyword">yield</span> x                       <span class="comment"># 第一次 gen_var3.send(None) 呼叫後, 將 suspend 於此,  </span>
                                          <span class="comment"># 並回傳 x</span>
                                          <span class="comment"># throw GeneratorExit 發生於此</span>
        x += y
        y = <span class="keyword">yield</span> x
        x += y
        <span class="keyword">yield</span> x
<span class="keyword">except</span>:                                   <span class="comment"># 處理所有型態的 exception, 包含 GeneratorExit Exception</span>
    x +=<span class="number">10</span>                                <span class="comment"># throw GeneratorExit 發生後, 執行此 statement </span>
    <span class="keyword">yield</span> x                               <span class="comment"># throw GeneratorExit 發生後, 將 suspend 於此, 並回傳 x</span>
                                          <span class="comment"># 第二次 gen_var3.send(None) 由此開始執行</span>
    x +=<span class="number">20</span>                                <span class="comment"># 第二次 gen_var3.send(None) 發生後, 執行此 statement</span>
    <span class="keyword">yield</span> x                               <span class="comment"># 第二次 gen_var3.send(None) 發生後, 將 suspend 於此, </span>
                                          <span class="comment"># 並回傳 x</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_var3 = gen3()                     <span class="comment"># 產生一個 generator object 儲存於 gen_var3</span>
    <span class="keyword">print</span> gen_var3.send(<span class="built_in">None</span>)             <span class="comment"># the same result with calling gen_var2.next()</span>
    <span class="keyword">print</span> gen_var3.throw(GeneratorExit)   <span class="comment"># 在 generator 內部產生一個 GeneratorExit Exception</span>
    <span class="keyword">print</span> gen_var3.send(<span class="built_in">None</span>)             <span class="comment"># the same result with calling gen_var2.next()</span>
    <span class="keyword">print</span> gen_var3.send(<span class="built_in">None</span>)             <span class="comment"># the same result with calling gen_var2.next()</span></code></pre>
<p>Output:  </p>
<pre><code>100
110
130
Traceback (most recent call last):
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 51, in <span class="tag">&lt;<span class="title">module</span>&gt;</span>
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 37, in main
StopIteration</code></pre>
<p><a name=yield_close></a></p>
<h2>close() - terminate the generator</h2>
<p><a href="http://www.python.org/dev/peps/pep-0342/" title="Coroutines via Enhanced Generators" target="_blank">PEP342</a> 提到, 當 generator object 不再使用時, 可以呼叫 close() method, 之後如果再呼叫 next() method 則會 raise StopIterator Exception.  </p>
<p>參考下面代碼:  </p>
<pre><code><span class="comment"># generator_close_demo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">gen2</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>
    y = <span class="keyword">yield</span> x
    x += y
    y = <span class="keyword">yield</span> x
    x += y
    <span class="keyword">yield</span> x

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_var2 = gen2()
    <span class="keyword">print</span> gen_var2.send(<span class="built_in">None</span>)
    gen_var2.close()
    <span class="keyword">print</span> gen_var2.send(<span class="number">10</span>)     <span class="comment"># raise StopIterator Exception, if next() is called after close()</span>
    <span class="keyword">print</span> gen_var2.send(<span class="number">20</span>)

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main()</code></pre>
<p>Output:</p>
<pre><code>100
Traceback (most recent call last):
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 46, in <span class="tag">&lt;<span class="title">module</span>&gt;</span>
  File "<span class="tag">&lt;<span class="title">module1</span>&gt;</span>", line 31, in main
StopIteration</code></pre>
<p><a name=yield_generator_exp></a></p>
<h2>generator expression - 快速產生一個 generator object</h2>
<p>除了透過定義包含 yield expression 的 function 外, 可以透過 Python 語法快速的產生 generator object.<br>引述 <a href="http://docs.python.org/2.7/glossary.html#term-generator" title="generator expression" target="_blank">Python Glossary</a> 的定義:</p>
<blockquote>
<p>An expression that returns an iterator. It looks like a normal expression followed by a for expression defining a loop variable, range, and an optional if expression</p>
</blockquote>
<p>範例如下:</p>
<pre><code><span class="comment"># generator_expression_demo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_exp = ((i+<span class="number">1</span>)*(i+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))  <span class="comment"># 產生一個 generator object</span>

    <span class="keyword">print</span> type(gen_exp)
    <span class="keyword">print</span> gen_exp                               <span class="comment"># 和 generator 產生出來的 object 印出來的資訊不太一樣</span>

    <span class="keyword">for</span> x <span class="keyword">in</span> gen_exp:
        <span class="keyword">print</span> x

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main()</code></pre>
<p>Output:</p>
<pre><code><span class="tag">&lt;<span class="title">type</span> '<span class="attribute">generator</span>'&gt;</span>
<span class="tag">&lt;<span class="title">generator</span> <span class="attribute">object</span> &lt;<span class="attribute">genexpr</span>&gt;</span> at 0x00DE82B0&gt;
1
4
9
16
25
36
49
64
81
100</code></pre>
<p>這裡有一點要注意, generator expression 產生出來的 object 與 generator 產生出來的 object print 出來的結果有些不同.  </p>
<ul>
<li>print generator expression 產生的 object 會印出 &lt;generator object <strong>&lt;genexpr&gt;</strong> at 0x00DE82B0&gt;</li>
<li>print generator 產生的 object 會印出 &lt;generator object <strong>gen</strong> at 0x00DE82B0&gt;</li>
</ul>
<p><a name=yield_reference></a></p>
<h2>Reference:</h2>
<ul>
<li>[1] <a href="http://docs.python.org/2.7/glossary.html#term-generator" target="_blank">Definition for generator in python</a></li>
<li>[2] <a href="http://blog.donews.com/limodou/archive/2006/09/04/1028747.aspx" target="_blank">limodou的学习记录</a></li>
<li>[3] <a href="http://dhcmrlchtdj.github.io/sia/post/2012-11-20/python_yield.html" target="_blank">python yield 研究</a></li>
<li>[4] <a href="http://www.python.org/dev/peps/pep-0255/" title="Simple Generators" target="_blank">PEP255</a></li>
<li>[5] <a href="http://www.python.org/dev/peps/pep-0289/" title="Generator Expressions" target="_blank">PEP289</a></li>
<li>[6] <a href="http://www.python.org/dev/peps/pep-0342/" title="Coroutines via Enhanced Generators" target="_blank">PEP342</a></li>
<li>[7] <a href="http://www.jb51.net/article/15717.htm" target="_blank">Python 深入理解yield</a></li>
</ul>
<hr>
<p><a name=others></a></p>
<h1><em>其它</em></h1>
<p><a name=lambda_exp></a></p>
<h2>Lambda Expression</h2>
<p>Python 中使用 Lambda Expression 的語法可以一個建立 Annonymous Function </p>
<p>Ex:</p>
<pre><code><span class="title">f</span> = lambda x: x ** x
<span class="title">print</span>(f(<span class="number">1</span>))
<span class="title">print</span>(f(<span class="number">2</span>))
<span class="title">print</span>(f(<span class="number">3</span>))
<span class="title">print</span>(f(<span class="number">4</span>))
<span class="title">print</span>(f(<span class="number">5</span>))

<span class="title">g</span> = lambda x, y: x * y
<span class="title">print</span>(g(<span class="number">1</span>, <span class="number">6</span>))
<span class="title">print</span>(g(<span class="number">2</span>, <span class="number">7</span>))
<span class="title">print</span>(g(<span class="number">3</span>, <span class="number">8</span>))
<span class="title">print</span>(g(<span class="number">4</span>, <span class="number">9</span>))
<span class="title">print</span>(g(<span class="number">5</span>, <span class="number">10</span>))</code></pre>
<p>Output:</p>
<pre><code><span class="number">1</span>
<span class="number">4</span>
<span class="number">27</span>
<span class="number">256</span>
<span class="number">3125</span>
<span class="number">6</span>
<span class="number">14</span>
<span class="number">24</span>
<span class="number">36</span>
<span class="number">50</span></code></pre>
<p><a name=built_in_map></a></p>
<h2>Built-in Function map</h2>
<p>在探討 map function 之前, 讓我們先回憶一下國中時候學過的數學函數,<br>假設函數 f(x,y,..,z) 輸入一組 x1, y1, …, z1 參數後, 可得到一個結果 r1,<br>現在我們準備 n 組資料 [(x1, y1, …, z1), (x2, y2, …, z2), …, (xn, yn, …, zn)]<br>依序輸入給函數 f(x,y,…,z) 後,<br>可得到 n 個結果 [r1,r2, …, rn], 如下圖所示:</p>
<p><img src="http://MutsuGhost1.github.io/image/python_map_function.PNG" alt=""></p>
<p>事實上 map function 就是執行類似這樣的概念. map function 有兩組 input 參數:<br>1. function (對應到上述的函數 f)<br>2. 輸入 function 的參數, 參數個數必須與 function 參數匹配</p>
<p>下列代碼展示 map function 的使用方法:</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,b,c)</span>:</span>
    <span class="keyword">return</span> a*b*c

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    lista = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]
    listb = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]
    listc = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]
    <span class="keyword">print</span> map(f, lista, listb, listc)</code></pre>
<p>Output:  </p>
<pre><code>[<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>]</code></pre>
<p>有一點要注意的事情, 當參數是一個 sequence 時, <strong>各個 sequence 的參數不一致, 將取最長的為主, 不足補 None</strong>.<br>最後, 附上 <a href="http://docs.python.org/2/library/functions.html#map" target="_blank">Python 文件</a>上的說明:  </p>
<p><em>map(function, iterable, …)</em>  </p>
<blockquote>
<p>Apply function to every item of iterable and return a list of the results.<br>If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. <strong>If one iterable is shorter than another it is assumed to be extended with None items</strong>. <strong>If function is None, the identity function is assumed</strong>; if there are multiple arguments, map() returns a list consisting of tuples containing the corresponding items from all iterables (a kind of transpose operation). The iterable arguments may be a sequence or any iterable object; <strong>the result is always a list</strong>.</p>
</blockquote>
<p><a name=built_in_reduce></a></p>
<h2>Built-in Function reduce</h2>
<blockquote>
<p>Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value</p>
</blockquote>
<p>Reduce 的 Pseudo Code, 類似下面這個範例:</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">reduce</span><span class="params">(function, iterable, initializer=None)</span>:</span>
    it = iter(iterable)

    <span class="keyword">if</span> initializer <span class="keyword">is</span> <span class="built_in">None</span>:
    <span class="keyword">try</span>:
        initializer = next(it)
    <span class="keyword">except</span> StopIteration:
        <span class="keyword">raise</span> TypeError(<span class="string">'reduce() of empty sequence with no initial value'</span>)

    accum_value = initializer
    <span class="keyword">for</span> x <span class="keyword">in</span> it:
        accum_value = function(accum_value, x)
    <span class="keyword">return</span> accum_value</code></pre>
<p>Ex:  </p>
<ul>
<li>reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5)</li>
</ul>
<p><a name=built_in_filter></a></p>
<h2>Built-in Function filter</h2>
<blockquote>
<p>Construct a list from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list. I<strong>f function is None, the identity function is assumed</strong>, that is, all elements of iterable that are false are removed.</p>
</blockquote>
<p>Ex:  </p>
<ul>
<li><strong>filter(function, iterable)</strong> is equivalent to <strong>[item for item in iterable if function(item)]</strong></li>
</ul>
<p><a name=built_in_zip></a></p>
<h2>Built-in Function zip</h2>
<p>zip function 做的事情, 如下圖:</p>
<p><img src="http://MutsuGhost1.github.io/image/python_zip_function.PNG" alt=""></p>
<p>Ex:</p>
<pre><code>&gt;&gt;&gt; a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]
&gt;&gt;&gt; b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]
&gt;&gt;&gt; c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]      # 以短的為主
&gt;&gt;&gt; zipped = zip(a,b)
[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]
&gt;&gt;&gt; zip(a,c)
[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]
&gt;&gt;&gt; zip<span class="comment">(*zipped)         # unzip 回原來模樣
[(1, 2, 3), (4, 5, 6)]</code></pre>
]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Python/" term="Python"/>
    <category scheme="http://mutsughost1.github.io/tags/Study Group/" term="Study Group"/>
    <category scheme="http://mutsughost1.github.io/categories/Software/" term="Software"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[About This Blog]]></title>
    <link href="http://mutsughost1.github.io/2013/09/29/about-this-blog/"/>
    <id>http://mutsughost1.github.io/2013/09/29/about-this-blog/</id>
    <published>2013-09-29T11:23:42.000Z</published>
    <updated>2013-09-29T13:46:09.000Z</updated>
    <content type="html"><![CDATA[<p>這個 blog 是使用 <a href="http://zespia.tw/hexo/" title="hexo" target="_blank">hexo</a> 這套軟體產生的.<br>主要參考了以下連結:<br><a id="more"></a><br>1. <a href="http://zipperary.com/categories/hexo/" target="_blank">hexo 系列教程</a><br>2. <a href="http://code.kpman.cc/2013/04/28/%E5%AE%A2%E8%A3%BD%E5%8C%96hexo-light-theme/" target="_blank">自訂 RSS 與新增 Disqus 留言板</a><br> * <a href="http://www.digitalhubinc.com/2013/06/Disqus-Various-Widget-Code-for-Blogger-and-Wordpress-Blog.html#.UkgNLtKBlTo" title="Combination Widget 已經不支援了喔!" target="_blank">Disqus Widget 語法參考</a><br>3. <a href="http://www.authormedia.com/how-to-add-a-twitter-widget-to-your-sidebar/" target="_blank">新增 Twitter Widget</a><br>4. <a href="http://zipperary.com/2013/06/02/hexo-guide-5/" target="_blank">產生 SiteMap</a></p>
<p>此外, 為了讓 Website 能夠利用 Google 做站內搜尋  </p>
<ol>
<li><a href="https://www.google.com/webmasters/tools/home?hl=zh-TW" target="_blank">到 Google 註冊網站</a>  </li>
<li><a href="http://tosian.blogspot.tw/2008/04/google-google-sitemap.html" target="_blank">將 SiteMap 上傳到 Google </a>  </li>
</ol>
<p>製作自己的 Avatar  </p>
<ul>
<li><a href="https://en.gravatar.com/" target="_blank">Gravatar</a>  </li>
</ul>
<p>撰寫 Markdown 文件使用的 Editor</p>
<ul>
<li><a href="http://markdownpad.com/" target="_blank">MarkdownPad</a></li>
</ul>
]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Blog/" term="Blog"/>
    <category scheme="http://mutsughost1.github.io/categories/Software/" term="Software"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Python OOP Exception]]></title>
    <link href="http://mutsughost1.github.io/2013/09/27/python-oop-exception/"/>
    <id>http://mutsughost1.github.io/2013/09/27/python-oop-exception/</id>
    <published>2013-09-27T06:55:04.000Z</published>
    <updated>2013-10-14T22:06:06.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Python OOP</li>
<li>Constructor/Destructor</li>
<li>Class/Instance Members</li>
<li>Access Control in Python OOP</li>
<li>Inheritance</li>
<li>Polymorphism</li>
<li>Operator Overloading</li>
<li>Function Overloading</li>
<li>Object Types in Python</li>
<li>Check relationship between class and instance</li>
</ul>
<h2><a id="more"></a></h2>
<h1>Python OOP</h1>
<p>Python 語言, 本身也支援 <strong>O</strong>bject <strong>O</strong>riented <strong>P</strong>rogramming 這樣的 Programming Pradigm.<br>語法上, 是採取類似 C++ 與 Modula-3 的語法.  </p>
<p>一個最簡單的 class definition 如下：</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">oldStyle</span>:</span>
    <span class="keyword">pass</span></code></pre>
<p>語法上, class definition 可以寫成:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(BaseClass1[,BaseClass2[,…]])</span>:</span>
    statement1
    …
    statementN</code></pre>
<p>其中的 statement1 … statementN 可以是:</p>
<ul>
<li>Data memeber definition</li>
<li>Member function definition</li>
<li>Memeber class definition</li>
</ul>
<p>當 import module 時, python interpret 到一個 class definition 時,<br>它會將 class 內相關的 definition 都定義在此 class 所建立的 namespace 內.  </p>
<p><strong>New Style Class v.s. Old Style Class</strong>  </p>
<ul>
<li>Python 2.2 之前, type 和 class 是不同的<ul>
<li>type (list, tuple, dict … etc)</li>
<li>class</li>
</ul>
</li>
<li>Python 2.2 Unifying type and class<ul>
<li>The obvious change is built-in types can be used to as base class</li>
<li>沒有明確繼承其他 class 的 class definition, 稱為 Old Style Class</li>
<li>Python 3 後, 沒有明確繼承 class 將會視為 default 繼承 object</li>
</ul>
</li>
<li>Reference: <a href="http://www.python.org/download/releases/2.2.3/descrintro/" title="說明 Python 2.2 後, 整合 type and class 的文章" target="_blank"><a href="http://www.python.org/download/releases/2.2.3/descrintro/">http://www.python.org/download/releases/2.2.3/descrintro/</a></a>  </li>
</ul>
<p>Ex:  </p>
<pre><code><span class="comment"># define a old style class in python 2.x</span>
<span class="class"><span class="keyword">class</span> <span class="title">oldStyleClass</span>:</span>
<span class="keyword">pass</span>
<span class="comment"># define a new style class in python 2.x</span>
<span class="class"><span class="keyword">class</span> <span class="title">newStyleClass</span> <span class="params">(object)</span>:</span>
<span class="keyword">pass</span></code></pre>
<hr>
<h1>Constructor/Destructor</h1>
<p>先前提到, 定一個最簡單的 new style class, 如下:</p>
<pre><code><span class="comment">#define a simplest class named "Employee"</span>
<span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
    <span class="keyword">pass</span></code></pre>
<p>假設我們要新增一個功能, 來替 Employee 來紀錄, 目前 instance of Employee 的有效個數.<br>可以透過新增 Constructor &amp; Destructor 加上一個 class variable 來實現, 具體如下:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
    empCount = <span class="number">0</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>
        Employee.empCount += <span class="number">1</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        Employee.empCount -= <span class="number">1</span></code></pre>
<p>也許有人會問, 在有 GC 機制的語言中, Destructor 存在的目的是?<br>通常 Destructor 的存在, 就是讓 Object 能提早釋放占用的資源.   </p>
<hr>
<h1>Class/Instance Memebers</h1>
<p>接下來, 我們想替 Class 加上額外的 Memebers, 包含了:</p>
<ul>
<li>Instance Variable<ul>
<li>用來表示 instance of Employee 的姓名, 命名為 name, 預設為 “anonymous” </li>
<li>用來記錄各個 instance of Employee 的基本薪資, 命名為 base_salary, 預設為 1000</li>
</ul>
</li>
<li>Static Method<ul>
<li>定義一個 static method 能夠印出目前 # of instance of Employee, 命名為 EmployeeCount </li>
</ul>
</li>
<li>Instance Method<ul>
<li>定義一個 instance method, 能夠取得目前 instance of Employee 的總薪資, 命名為 getSalary </li>
</ul>
</li>
</ul>
<p>具體代碼如下:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
    empCount = <span class="number">0</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">"anonymous"</span>, base_salary=<span class="number">1000</span>)</span>:</span>
        Employee.empCount = <span class="number">0</span>
        self.name = name
        self.base_salary = base_salary

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        Employee.empCount = <span class="number">0</span>

    <span class="decorator">@staticmethod</span>
    <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
        <span class="keyword">print</span> <span class="string">"Employee Count:"</span> + str(Employee.empCount)

    <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.base_salary</code></pre>
<p>從上列代碼, 可以歸納出以下幾件事:</p>
<ul>
<li>定義在 class 內部, 非 method 內部的變數, 視為 class variable</li>
<li>定義在 class 內部的 method, 預設都是 instance method, 第一個參數都是 reference to the instance, 習慣上命名為 self</li>
<li>通常 instance variable 都直接定義在 class 定義裡, instance method body 中, 習慣上都是以 self. 當作 prefix  </li>
<li>在 class 內部定義 static method, 請在 method 的宣告前面使用 @staticmethod, 來告訴 python interpreter 這個 method 是一個 static method, 不帶 self 參數</li>
</ul>
<p>接下來將展示此 class 將如何被使用:  </p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
    empCount = <span class="number">0</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">"anonymous"</span>, base_salary=<span class="number">1000</span>)</span>:</span>
        Employee.empCount = <span class="number">0</span>
        self.name = name
        self.base_salary = base_salary

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        Employee.empCount = <span class="number">0</span>

    <span class="decorator">@staticmethod</span>
    <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
        <span class="keyword">print</span> <span class="string">"Employee Count:"</span> + str(Employee.empCount)

    <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.base_salary

    <span class="comment"># the method will be called when call str(new Employee())</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> <span class="string">"Employee name:"</span> + self.name + <span class="string">" base_salary:"</span> + self.base_salary

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   employee1 = Employee(<span class="string">"Peter"</span>)
   <span class="keyword">print</span> employee1
   <span class="keyword">print</span> “Salary=” + str(employee1.getSalary())
   Employee.EmployeeCount()
   <span class="keyword">del</span> employee1
   Employee.EmployeeCount()

<span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:
    main()</code></pre>
<p>Output:</p>
<pre><code><span class="label">Employee:</span> name=Peter base_salary=<span class="number">1000</span>
Salary=<span class="number">1000</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">1</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">0</span></code></pre>
<hr>
<h1>Access Control in Python OOP</h1>
<p>在 Pyhon 中, 並沒有提供 Modifier 來明確的來控制 Attribute 的存取權限.<br>相反的, Python 是透過一種 Naming Convention 來告訴 User, 這個 Attribute 是 Private 的.<br>雖然如此, User 想要強制存取此 Private Attribute, 還是可以達成的.</p>
<p>Ex:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
   __empCount = <span class="number">0</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    <span class="comment"># the name of attribute is changed as "_Employee" + "__empCount"</span>
    <span class="keyword">print</span> Employee._Employee__empCount

<span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:
    main()</code></pre>
<p>Output:</p>
<pre><code><span class="number">0</span></code></pre>
<ul>
<li>Python 中, 每個 Attribute 都是 Public 的</li>
<li>以 &quot;<em>_“ 開頭的 Attribute, 會被做 Name Mangling, 改名為 ”</em>&quot; + ClassName + AttributeName</li>
<li>以 &quot;__&quot; 開頭的 Attribute, 只是在習慣上被視為 Private 的, 但是仍然可強制存取 </li>
</ul>
<hr>
<h1>Inheritance</h1>
<p>如果我們想要加入一個特別的 Employee, 稱為 Manager, 可以考慮用繼承的方式達成.<br>Manager 除了本身是一個 (is a) Emplyoee 外, 還必須滿足:</p>
<ul>
<li>Manager 繼承了 Employee 的所有 attributes</li>
<li>Manager 多了 bonus 的 attribute</li>
<li>Manager 的 getSalary 結果, 必須是 base_salary + bonus 的結果</li>
</ul>
<p>Ex: <strong>invoke the method in the super class</strong></p>
<pre><code><span class="comment"># demo how to invoke the method in the super class</span>

<span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="params">(Employee)</span>:</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">"anonymous"</span>, base_salary=<span class="number">1200</span>, bonus = <span class="number">200</span>)</span>:</span>
        super(Manager, self).__init__(name, base_salary)
        self.bonus = bonus

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        super(Manager, self).__del__()</code></pre>
<p>Ex: <strong>Override the method in the super class</strong></p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="params">(Employee)</span>:</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">"anonymous"</span>, base_salary=<span class="number">1200</span>, bonus = <span class="number">200</span>)</span>:</span>
        super(Manager, self).__init__(name, base_salary)
        self.bonus = bonus

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        super(Manager, self).__del__()

    <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> super(Manager, self).getSalary() + self.bonus

    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> <span class="string">"Manager name:"</span> + self.name + <span class="string">" base_salary:"</span> + str(self.base_salary) + \
               <span class="string">" bonus:"</span> + str(self.bonus)

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   manager1 = Manager(<span class="string">"Peter"</span>)
   <span class="keyword">print</span> manager1
   <span class="keyword">print</span> “Salary=” + str(manager1.getSalary())
   <span class="keyword">del</span> manager1

<span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:
    main()</code></pre>
<p>Output:</p>
<pre><code><span class="label">Manager:</span> name=John base_salary=<span class="number">1200</span> bonus=<span class="number">200</span>
Salary=<span class="number">1400</span></code></pre>
<hr>
<h1>Polymorphism</h1>
<p>由於 Python 是一個 Weakly Type 的語言, 因此在變數的宣告時, 並不會明確指出特定的型別.<br>因此, 只要此變數所指向的 Object, 符合操作所需要的各項 Attribute, 則 Program 即可正常運作.  </p>
<p>Ex:</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    list_employees = [Manager(“John”), Employee(<span class="string">"Peter"</span>)]
    <span class="keyword">for</span> employee <span class="keyword">in</span> list_employees:
        <span class="keyword">print</span> employee.__str__()

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main()</code></pre>
<p>Output:</p>
<pre><code><span class="attribute">Manager</span>: <span class="string">name=John base_salary=1200 bonus=200</span>
<span class="attribute">Employee</span>: <span class="string">name=Peter base_salary=1000</span></code></pre>
<p><strong>事實上, Python 這樣的做法提供了更彈性的使用方式. 在撰寫特定演算法的時候,<br>只需要考慮 Object 本身能提供哪些 Attributes, 不需要考慮 Object 的繼承體系.</strong></p>
<hr>
<h1>Operator Overloading</h1>
<p>Python 本身定義了一組 Built-in Operators, 讓使用者可以 Overloading 其行為.</p>
<p>Ex:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Vector</span> <span class="params">(object)</span>:</span>
   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span>
       self.x = x
       self.y = y
   <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, rhs)</span>:</span>
       <span class="keyword">return</span> Vector(self.x + rhs.x, self.y + rhs.y)
   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">"Vector: ("</span> + str(self.x) + <span class="string">", "</span> + str(self.y) + <span class="string">")"</span>

   <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="params">(object)</span>:</span>
   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span>
       self.x = x
       self.y = y
   <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, rhs)</span>:</span>
       <span class="keyword">return</span> Point(self.x + rhs.x, self.y + rhs.y)
   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">"Point: ("</span> + str(self.x) + <span class="string">", "</span> + str(self.y) + <span class="string">")"</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   vec1 = Vector(<span class="number">10</span>, <span class="number">20</span>)
   vec2 = Vector(<span class="number">90</span>, <span class="number">80</span>)
   <span class="keyword">print</span> vec1 + vec2

   p1 = Point(<span class="number">3</span>,   <span class="number">10</span>)
   p2 = Point(-<span class="number">3</span>, -<span class="number">10</span>)
   <span class="keyword">print</span> p1 + p2

   <span class="comment"># the evaluation order is ((vec1 + p1) + p2)</span>
   <span class="keyword">print</span> vec1 + p1 + p2
   <span class="comment"># the evaluation order is ((p2 + vec1) + vec2)</span>
   <span class="keyword">print</span> p2 + vec1 + vec2</code></pre>
<p>Output:</p>
<pre><code><span class="attribute">Vector</span>: <span class="string">(100, 100)</span>
<span class="attribute">Point</span>: <span class="string">(0, 0)</span>
<span class="attribute">Vector</span>: <span class="string">(10, 20)</span>
<span class="attribute">Point</span>: <span class="string">(97, 90)</span></code></pre>
<p>如同之前提到的, Python 中, 只要 Object 有能力 (有 Attributes) 就可以正常執行.<br>上面這個例子顯示, 既使是 vec1 + p1 或 p2 + vec1, 這樣的操作都是合法的.<br>因為 Python 只知道, 把 vec1 + p1 換成 vec1.<strong>add</strong>(p1), 只要 p1 提供足夠的能力, 能完成 <strong>add</strong> 既可.<br>此外, Python 中 Operator 的 Evaluation Order 都是從左到右, 不能被改變.</p>
<p>Reference:</p>
<ul>
<li><a href="http://docs.python.org/2/library/operator.html" title="Operator Overloading" target="_blank"><a href="http://docs.python.org/2/library/operator.html">http://docs.python.org/2/library/operator.html</a></a></li>
<li><a href="http://docs.python.org/2/reference/expressions.html#evaluation-order" title="Operator Evaluation Order" target="_blank"><a href="http://docs.python.org/2/reference/expressions.html#evaluation-order">http://docs.python.org/2/reference/expressions.html#evaluation-order</a></a></li>
</ul>
<hr>
<h1>Function Overloading</h1>
<p>Python 中, 並沒有提供 Function Overloading 的機制. 一般而言, 會透過下列方式來達成:  </p>
<ul>
<li>Default Arguments</li>
<li>Variable Length Arguments With List</li>
<li>Variable Length Arguments With Dict </li>
</ul>
<p>Ex: <strong>Default Arguments</strong></p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
   empCount = <span class="number">0</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">""</span>, base_salary=<span class="number">1000</span>)</span>:</span>
       self.base_salary = base_salary
       self.name = name
       Employee.empCount += <span class="number">1</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
       Employee.empCount -= <span class="number">1</span>

   <span class="decorator">@staticmethod</span>
   <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
       <span class="keyword">print</span> <span class="string">"Employee.empCount = "</span> + str(Employee.empCount)

   <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> self.base_salary

   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">"Employee: name="</span> + self.name + \
              <span class="string">" base_salary="</span> + str(self.base_salary)

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   employee1 = Employee(<span class="string">"Peter"</span>)
   <span class="keyword">print</span> employee1
   <span class="keyword">print</span> “Salary=” + str(employee1.getSalary())
   Employee.EmployeeCount()
   <span class="keyword">del</span> employee1
   Employee.EmployeeCount()

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main()</code></pre>
<p>Output:</p>
<pre><code><span class="label">Employee:</span> name=Peter base_salary=<span class="number">1000</span>
Salary=<span class="number">1000</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">1</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">0</span></code></pre>
<p>Ex: <strong>Variable Length Arguments With Tuple</strong></p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
   empCount = <span class="number">0</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span>
       self.name  = “”
       self.salary = <span class="number">1000</span>
       <span class="keyword">if</span> <span class="number">1</span> &lt;= len(args): self.name  = args[<span class="number">0</span>]
       <span class="keyword">if</span> <span class="number">2</span> &lt;= len(args): self.salary = args[<span class="number">1</span>]
       Employee.__empCount += <span class="number">1</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
       Employee.empCount -= <span class="number">1</span>

   <span class="decorator">@staticmethod</span>
   <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
       <span class="keyword">print</span> <span class="string">"Employee.empCount = "</span> + str(Employee.empCount)

   <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> self.base_salary

   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">"Employee: name="</span> + self.name + \
              <span class="string">" base_salary="</span> + str(self.base_salary)

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   employee1 = Employee(<span class="string">"Peter"</span>)
   <span class="keyword">print</span> employee1
   <span class="keyword">print</span> “Salary=” + str(employee1.getSalary())
   Employee.EmployeeCount()
   <span class="keyword">del</span> employee1
   Employee.EmployeeCount()

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
   main()</code></pre>
<p>Output:</p>
<pre><code><span class="label">Employee:</span> name=Peter base_salary=<span class="number">1000</span>
Salary=<span class="number">1000</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">1</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">0</span></code></pre>
<p>Ex: <strong>Variable Length Arguments With Dict</strong></p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
   empCount = <span class="number">0</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **args)</span>:</span>
       self.name  = args.get(“name”, “”)
       self.salary = args.get(“salary”, <span class="number">1000</span>)
       Employee.__empCount += <span class="number">1</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
       Employee.empCount -= <span class="number">1</span>

   <span class="decorator">@staticmethod</span>
   <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
       <span class="keyword">print</span> <span class="string">"Employee.empCount = "</span> + str(Employee.empCount)

   <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> self.base_salary

   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">"Employee: name="</span> + self.name + \
              <span class="string">" base_salary="</span> + str(self.base_salary)

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   employee1 = Employee(<span class="string">"Peter"</span>)
   <span class="keyword">print</span> employee1
   <span class="keyword">print</span> “Salary=” + str(employee1.getSalary())
   Employee.EmployeeCount()
   <span class="keyword">del</span> employee1
   Employee.EmployeeCount()

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
   main()</code></pre>
<p>Output:</p>
<pre><code><span class="label">Employee:</span> name=Peter base_salary=<span class="number">1000</span>
Salary=<span class="number">1000</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">1</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">0</span></code></pre>
<p>此外, 要注意的一點是, 如果你強制寫了兩個相同 Signature 的 Method, 後者會覆蓋前者.  </p>
<p>Ex:</p>
<p>Output:</p>
<hr>
<h1>Object Types in Python</h1>
<p>在 Python 中, 所有物件的型別可以分為下列 3 種:</p>
<ol>
<li>Class Object  <ul>
<li>Instantiation</li>
<li>Attribute Reference</li>
</ul>
</li>
<li>Instance Object<ul>
<li>Attribute Reference</li>
</ul>
</li>
<li>Method Object<ul>
<li></li>
</ul>
</li>
</ol>
<hr>
<h1>Check relationship between class and instance</h1>
]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Python/" term="Python"/>
    <category scheme="http://mutsughost1.github.io/tags/Study Group/" term="Study Group"/>
    <category scheme="http://mutsughost1.github.io/categories/Software/" term="Software"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Python Module Package]]></title>
    <link href="http://mutsughost1.github.io/2013/09/27/python-module-package/"/>
    <id>http://mutsughost1.github.io/2013/09/27/python-module-package/</id>
    <published>2013-09-27T06:54:50.000Z</published>
    <updated>2013-10-13T06:42:31.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="#what_module" title="What&#39;s a python module ?">What&#39;s a python module ?</a></li>
<li><a href="#why_module" title="Why use modules ?">Why use modules ?</a></li>
<li><a href="#how_module" title="How to use/write modules ?">How to use/write modules ?</a></li>
<li><a href="#module_search_path" title="Module search Path">Module search Path ?</a></li>
<li><a href="#reload_module" title="Reload your module after applying any change">Reload your module after applying any change ?</a> </li>
<li><a href="#what_package" title="What&#39;s package ?">What&#39;s package ?</a></li>
<li><a href="#why_package" title="Why use packaes ?">Why use packaes ?</a></li>
<li><a href="#how_package" title="How to use packages ?">How to use packages ?</a></li>
<li><a href="#package_example" title="An example to refactor a module as a package">An example to refactor a module as a package</a></li>
</ul>
<h2><a id="more"></a></h2>
<p><a name=what_module></a></p>
<h1>What&#39;s a python module ?</h1>
<p>在 Python 中, 每一個檔案都是一個 Python Module, 通常以 py 做為其副檔名</p>
<blockquote>
<p>定義上, python module 個包含了 python definitions 以及 python executable statements.<br>python definitions 通常是指 variable definitions, function definitions and class definitions.  </p>
</blockquote>
<p>Python module 只會在第一次被 import 的時候被執行. 被 import module 會在目前執行的 global namespace 中,<br>建立一個屬於此 module 的 namespace. 在預設下, 這個 module 的 namespace 會是 module name.<br>任何人可以透過這個 module name 來存取 module 內的各項 attributes.  </p>
<p>下面的例子即為一個 Module:</p>
<pre><code><span class="comment"># A python module fibo.py</span>

__VERSION = <span class="string">"Version 1"</span>  <span class="comment"># variable definition</span>

<span class="function"><span class="keyword">def</span> <span class="title">fibo</span><span class="params">(n)</span>:</span>             <span class="comment"># function definition</span>
    <span class="keyword">pass</span>

<span class="comment"># you can define your class here</span>

<span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:
    <span class="keyword">pass</span>                 <span class="comment"># write executable statements</span></code></pre>
<hr>
<p><a name=why_module></a></p>
<h1>Why use python modules ?</h1>
<p>將常用的 code 整理成 module 的好處如下:</p>
<ul>
<li>將相關的 code 組織在同一個 module 中, 讓 code 更容易維護, 更容易讀, 更容易 re-use</li>
<li>避免 naming conflict, 所有定義在 module 內的變數, 都屬於此 module namespace 下</li>
</ul>
<hr>
<p><a name=how_module></a></p>
<h1>How to use/write python modules ?</h1>
<p><strong>Syntax for using a module</strong></p>
<blockquote>
<p><strong>import</strong> module1 [,module2[,…moduleN]]<br><strong>import</strong> module [as alias]<br><strong>from</strong> module <strong>import</strong> item1[,item2[,…itemN]]<br><strong>from</strong> module <strong>import</strong> item [as alias]  </p>
</blockquote>
<p><strong>一個計算 fibonacci sequence 的 python module 如下:</strong></p>
<pre><code><span class="comment"># module fibo.py</span>
<span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>
    <span class="string">""" show fibonacci sequence up to n """</span>
    a, b = <span class="number">0</span>, <span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        <span class="keyword">print</span> b,
        a,b = b, a+b

<span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>
    <span class="string">""" return fibonacci sequence up to n """</span>
    listFibo = []
    <span class="keyword">while</span> b &lt; n:
        listFibo.append(b)
        a,b = b, a+b
    <span class="keyword">return</span> listFibo</code></pre>
<p><strong>啟動 Python Interactive Console, 並切換到 module fibo.py 所在目錄下, 並執行下列指令使用 fibo module:</strong>  </p>
<pre><code>&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>']
&gt;&gt;&gt; import fibo
&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>', 'fibo']
&gt;&gt;&gt; fibo.fib(1000)
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
&gt;&gt;&gt; fibo.fib2(100)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</code></pre>
<p><strong>執行 import statement 時, 實際上執行了 3 件事情:</strong></p>
<ol>
<li><p>Find the file of imported module (從 sys.path 去找)  </p>
</li>
<li><p>Compile it as byte code (if needed)  </p>
</li>
<li><p>Run the module&#39;s code to build the objects it defines.  </p>
<ul>
<li>A variable will be created in global namespace to reference the object of the module  </li>
</ul>
</li>
</ol>
<p><strong>利用 from … import … 來簡化使用 module 內的 atrribute name</strong></p>
<p>透過 from module import item 來簡化使用 module 內的 attribute name</p>
<pre><code>&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>']
&gt;&gt;&gt; from fibo import fib, fib2
&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>', 'fib', 'fib2']
&gt;&gt;&gt; fib(1000)
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
&gt;&gt;&gt; fib2(100)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</code></pre>
<p><strong>事實上, from module import item 是基於 import statement 來實現的</strong></p>
<p><strong>from fibo import fib, fib2</strong> 可以看拆解成下列幾個動作:  </p>
<ol>
<li>import fibo  </li>
<li>fib = fibo.fib  </li>
<li>fib2 = fibo.fib2  </li>
<li>del fibo</li>
</ol>
<p><strong>每個 module 都會有一個 __name__ attribute, 代表這個 module 的名稱</strong></p>
<pre><code>&gt;&gt;&gt; import fibo
&gt;&gt;&gt; dir(fibo)
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__file__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>', 'fib', 'fib2', 'main']
&gt;&gt;&gt; fibo.<span class="strong">__name__</span>
'fibo'</code></pre>
<p>當這個 python module 被當作 script 執行時, __name__ 的內容將被改為 &quot;__main__&quot;<br>這樣的做法可以讓每個 module 將特定的代碼只有在 module 被當作 script 執行時, 才會執行</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        <span class="keyword">print</span> b,
        a,b = b, a+b

<span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>
    result = []
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        result.append(b)
        a, b = b, a+b
    <span class="keyword">return</span> result


<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    fib(<span class="number">1000</span>)
    <span class="keyword">print</span> <span class="string">"\n"</span>, fib2(<span class="number">100</span>)

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    main()</code></pre>
<p>在 Python Interactive Console 下執行:</p>
<pre><code>E:<span class="command">\Temp</span><span class="command">\Python</span><span class="command">\hw</span>3<span class="command">\example</span>&gt;python.exe fibo.py
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
<span class="special">[</span>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89<span class="special">]</span></code></pre>
<p>此時 <strong> name </strong> 將等於 &quot;<strong> main </strong>&quot;, 會跑到 main() function 去執行</p>
<p><strong>from module import *</strong> statement</p>
<p>如果 module 中無定義 __all__ 變數, 則將會 copy 此 module 中所有 attributes (不含__開頭之 attributes)<br>否則, 只會 copy __all__ 變數中所指定之 attributes</p>
<p>Exampe: (imported module 中無定義 __all__ 變數)</p>
<pre><code><span class="comment"># module fibo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        <span class="keyword">print</span> b,
        a,b = b, a+b

<span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>
    result = []
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        result.append(b)
        a, b = b, a+b
    <span class="keyword">return</span> result</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>']
&gt;&gt;&gt; import fibo
&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>', 'fibo']
&gt;&gt;&gt; dir(fibo)
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__file__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>', 'fib', 'fib2']
&gt;&gt;&gt; del fibo
&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>']    
&gt;&gt;&gt; from fibo import *
&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>', 'fib', 'fib2']</code></pre>
<p>Exampe: (imported module 中有定義 __all__ 變數)</p>
<pre><code><span class="comment"># module fibo.py</span>

__all__ = [<span class="string">"fib2"</span>]

<span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        <span class="keyword">print</span> b,
        a,b = b, a+b

<span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>
    result = []
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        result.append(b)
        a, b = b, a+b
    <span class="keyword">return</span> result</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>']
&gt;&gt;&gt; from fibo import *
&gt;&gt;&gt; dir()
['<span class="strong">__builtins__</span>', '<span class="strong">__doc__</span>', '<span class="strong">__name__</span>', '<span class="strong">__package__</span>', 'fib2']</code></pre>
<hr>
<p><a name=module_search_path></a></p>
<h1>Module Search Path</h1>
<p>當你寫好自己的 Module 後, 想當成 Library 可以提供其他 Python Module 來使用時,<br>必須將 Module 放到其 Search Path 中, 才能讓 Module 被正常 import 且使用.<br>一般來說, Module Search Path 是以 sys.path 來表示, 由下列成員所組成:</p>
<ol>
<li>Directory containing the script (目前執行之 Script 所在的目錄)</li>
<li>PYTHONPATH (系統中的環境變數, User 可將自訂的 Module Location 填入此環境變數中)</li>
<li>Installation Default Dependent (與平台系統相關的路徑, 安裝 Python 時, 將會自動決定)</li>
</ol>
<p>當被 import 的 module 無法在 sys.path 中被搜尋到, 將會產生 ImportError Exception.<br>當前執行的 script 目錄中, 若有與 Standard Library 中的 module 有相同名稱, 則會遮蔽 Standard Library 的 Module.</p>
<hr>
<p><a name=reload_module></a></p>
<h1>Reload Your Module To Apply Any Modification</h1>
<p>請記得, 每個 python interpreter session 中, 只會 import 一次 module, 因此當 module 變動時, 請執行  </p>
<ul>
<li>reload(module)</li>
</ul>
<p><img src="http://MutsuGhost1.github.io/image/python_reload_function.PNG" alt=""></p>
<p>所有 reference 到此 module 的變數, 都將受影響</p>
<hr>
<p><a name=what_package></a></p>
<h1>What&#39;s package ?</h1>
<p>Package 由一個 Directory 所構成, 裡面包含了 Python Module 檔案, 以及一個名稱為 <strong>__ini__.py</strong> 的檔案.<br>透過 <strong>__ini__.py</strong> 檔案, Python Interpreter 才會將此 Directory 視為一個 Package.  </p>
<p><img src="http://MutsuGhost1.github.io/image/python_package.PNG" alt=""></p>
<p>上圖既為一個簡單的 Package, 透過 import A.B 則可 import package A 中的 module B.</p>
<hr>
<p><a name=why_package></a></p>
<h1>Why use package ?</h1>
<p>使用 Package 來組織 Python Module 的好處在於: </p>
<ul>
<li>可以降低 Module 間的 Coupling, 增加 Module 內的 Cohesion  </li>
<li>使得 Module 更易於 Maintain</li>
<li>讓 Module 更 readable  </li>
</ul>
<hr>
<p><a name=how_package></a></p>
<h1>How to use packages</h1>
<p>透過下列幾種方法, 可以 import package 或 package 內的 module:</p>
<ul>
<li>import package.module [as alias]<ul>
<li>將執行 package 內的 __init__.py 檔案, 做為 package 的初始化  </li>
<li>建立一個新的 namespace for this module of package</li>
<li>透過 package.module.item (or alias.item) 來存取此 module 中的各項 attributes </li>
</ul>
</li>
<li>import package<ul>
<li>僅執行 package 內的 __init__.py 檔案, 做為 package 的初始化</li>
</ul>
</li>
<li>from package import module [as alias] <ul>
<li>將執行 package 內的 __init__.py 檔案, 做為 package 的初始化</li>
<li>從 package 中, copy 出此 module</li>
<li>透過 module.item (or alias.item) 來存取此 module 中的各項 attributes  </li>
</ul>
</li>
</ul>
<p>假設目前有一個 sound package 其結構如下:</p>
<pre><code>+ sound/                    # top level <span class="package"><span class="keyword">package</span>
    <span class="title">__init__</span>.<span class="title">py</span>             # <span class="title">initialize</span> <span class="title">the</span> <span class="title">sound</span> <span class="title">package</span>
  + <span class="title">formats</span>/                # <span class="title">sub</span>-<span class="title">package</span> <span class="title">for</span> <span class="title">file</span> <span class="title">format</span> <span class="title">converstions</span>
      <span class="title">__init__</span>.<span class="title">py</span>
      <span class="title">wavread</span>.<span class="title">py</span>
      <span class="title">wavwrite</span>.<span class="title">py</span>
      <span class="title">aifread</span>.<span class="title">py</span>
      <span class="title">aifwrite</span>.<span class="title">py</span>
      <span class="title">auread</span>.<span class="title">py</span>
      <span class="title">auwrite</span>.<span class="title">py</span>
      ...
  + <span class="title">effects</span>/                # <span class="title">sub</span>-<span class="title">package</span> <span class="title">for</span> <span class="title">sound</span> <span class="title">effects</span>
      <span class="title">__init__</span>.<span class="title">py</span>
      <span class="title">echo</span>.<span class="title">py</span>
      <span class="title">surround</span>.<span class="title">py</span>
      <span class="title">reverse</span>.<span class="title">py</span>
      ...
  + <span class="title">filters</span>/                # <span class="title">sub</span>-<span class="title">package</span> <span class="title">for</span> <span class="title">filters</span>
      <span class="title">__init__</span>.<span class="title">py</span>
      <span class="title">equalizer</span>.<span class="title">py</span>
      <span class="title">vocoder</span>.<span class="title">py</span>
      <span class="title">karaoke</span>.<span class="title">py</span>
      ...</code></pre>
<p>使用者透過 import package.module, 可以 import package 中的某個 module,<br>Ex:</p>
<pre><code>import sound<span class="variable">.effects</span><span class="variable">.echo</span> 
sound<span class="variable">.effects</span><span class="variable">.echo</span><span class="variable">.echofilter</span>(input, output, delay = <span class="number">0.7</span>, atten = <span class="number">4</span>)</code></pre>
<p>透過 from package import module, 使用者可以從特定 package 中, copy 出某個 module,<br>Ex:</p>
<pre><code><span class="title">from</span> sound.effects
<span class="import"><span class="keyword">import</span> echo echo.echofilter<span class="container">(<span class="title">input</span>, <span class="title">output</span>, <span class="title">delay</span> = 0.7, <span class="title">atten</span> = 4)</span></span></code></pre>
<p>透過 from package.module import item, 使用者可以從特定 package 中的 module, copy 某個 attribute,<br>Ex:</p>
<pre><code><span class="title">from</span> sound.effects.echo 
<span class="import"><span class="keyword">import</span> echofilter echofilter<span class="container">(<span class="title">input</span>, <span class="title">output</span>, <span class="title">delay</span> = 0.7, <span class="title">atten</span> = 4)</span></span></code></pre>
<p><strong>from package import *</strong> statement</p>
<p>在實際的應用中, 使用者可能會想要一次將 package 中的 module 都 import 進 namespace 中.<br>但事實上, 這樣的做法會因為 import 某些使用者不預期的 module 而產生一些使用不預期的行為.<br>正因為如此, 針對 package 的 import * 就必須遵守下列的規則:</p>
<ul>
<li>若是 package 中的 __init__.py 檔案內有定義 __all__ 變數, 則會依據 __all__變數中的內容,<br>來決定要 import 哪些 sub-modules</li>
<li>否則當__init__.py 檔案內沒有定義 __all__ 變數, 則只會執行 __init__.py 內的敘述</li>
</ul>
<p><strong>intra package reference</strong>  </p>
<ul>
<li>import module in the same package<br>The surround module, it can simply use:</li>
</ul>
<p>Ex:  </p>
<pre><code># surround.py
<span class="import"><span class="keyword">import</span> echo</span>
<span class="title">from</span> echo <span class="import"><span class="keyword">import</span> echofilter</span></code></pre>
<ul>
<li>import module in the different package<br>Use absolute import to refer sub-modules of sibling package:</li>
</ul>
<p>Ex:</p>
<pre><code>#vocoder.py
<span class="title">from</span> sound.effects <span class="import"><span class="keyword">import</span> echo</span></code></pre>
<hr>
<p><a name=package_example></a></p>
<h1>An example to refactor a module as a package</h1>
<p>假設目前有一個 module phone.py, 裡面包含了 utility for Pots phone, Isdn phone and G3 phone.<br>如下:</p>
<pre><code><span class="comment"># Phone.py</span>
<span class="function"><span class="keyword">def</span>  <span class="title">Pots</span><span class="params">()</span>:</span>
    <span class="keyword">print</span> “I’m Pots Phone”

<span class="function"><span class="keyword">def</span> <span class="title">Isdn</span><span class="params">()</span>:</span>
    <span class="keyword">print</span> “I’m Isdn Phone”

Def G3():
    <span class="keyword">print</span> “I’m G3 Phone”</code></pre>
<p>事實上, 我們可以將它規劃成 package 的形式,<br>如下：  </p>
<pre><code>+ Phone
    <span class="command">\_</span><span class="command">\_</span>init<span class="command">\_</span><span class="command">\_</span>.py
    Pots.py
    Isdn.py
    G3.py</code></pre>
<p>透過在 __init__.py　中, 將 sub-module 中的 utility 都 copy 出來,<br>如下:</p>
<pre><code><span class="comment"># file: __init__.py</span>
<span class="keyword">from</span> Pots <span class="keyword">import</span> Pots    <span class="comment"># 從 Pots 這個 sub-module 中, copy Pots 這個 attribute</span>
<span class="keyword">from</span> Isdn <span class="keyword">import</span> Isdn    <span class="comment"># 從 Isdn 這個 sub-module 中, copy Isdn 這個 attribute</span>
<span class="keyword">from</span> G3 <span class="keyword">import</span> G3        <span class="comment"># 從 G3 這個 sub-module 中, copy G3 這個 attribute</span></code></pre>
<p>用戶端的代碼,<br>如下:</p>
<pre><code><span class="preprocessor"># test.py</span>
import Phone

Phone<span class="variable">.Pots</span>()
Phone<span class="variable">.Isdn</span>()
Phone<span class="variable">.G3</span>()</code></pre>
<p>Output:</p>
<pre><code>I’m Pots Phone
I’m Isdn Phone
I’m G3 Phone</code></pre>
<p>這樣的設計, 不僅能夠讓使用者更容易理解這些 module, 也能降低 module maintain 上的 efforts</p>
]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Python/" term="Python"/>
    <category scheme="http://mutsughost1.github.io/tags/Study Group/" term="Study Group"/>
    <category scheme="http://mutsughost1.github.io/categories/Software/" term="Software"/>
  </entry>
</feed>
