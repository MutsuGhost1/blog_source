<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[MutsuGhost1's Blog]]></title>
  <subtitle><![CDATA[Pursue excellence, and success will follow, pants down]]></subtitle>
  <link href="http://mutsughost1.github.io//atom.xml" rel="self"/>
  <link href="http://mutsughost1.github.io/"/>
  <updated>2014-06-01T21:25:48.363Z</updated>
  <id>http://mutsughost1.github.io//</id>
  <author>
    <name><![CDATA[MutsuGhost1]]></name>
    <email><![CDATA[MutsuGhost1@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Mockito Basic]]></title>
    <link href="http://mutsughost1.github.io/2014/05/18/learning-mockito/"/>
    <id>http://mutsughost1.github.io/2014/05/18/learning-mockito/</id>
    <published>2014-05-18T00:48:44.000Z</published>
    <updated>2014-06-01T21:10:37.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><h2 id="Learning_Mockito_with_examples">Learning Mockito with examples</h2>
<ol>
<li><strong><a href="#1">Verify some behavior (ignore any return value)</a></strong></li>
<li><strong><a href="#2">Verify some behavior with stubbing the return value</a></strong></li>
<li><strong><a href="#3">Verify unstubbing behavior</a></strong></li>
<li><strong><a href="#4">Argument matcher</a></strong></li>
<li><strong><a href="#5">Verify exact number of invocations</a></strong></li>
<li><strong><a href="#6">Verification in order</a></strong></li>
<li><strong><a href="#7">Finding redundant invocations</a></strong></li>
<li><strong><a href="#8">Stubbing consecutive calls</a></strong></li>
<li><strong><a href="#9">Stubbing with callbacks</a></strong></li>
<li><strong><a href="#10">doReturn()|doThrow()|doAnswer()|doNoting()|doCallRealMethod() family of methods</a></strong></li>
<li><strong><a href="#11">reset mock</a></strong></li>
<li><strong><a href="#12">Capturing Argument</a></strong></li>
<li><strong><a href="#13">Changing default return values of unstubbed invocations</a></strong></li>
<li><strong><a href="#14">Inject mock/spy object into tested target</a></strong></li>
<li><strong><a href="#15">Verify with timeout</a></strong></li>
</ol>
</li>
</ul>
<p><a id="more"></a></p>
<hr>
<ul>
<li><h2 id="Basic_Concepts">Basic Concepts</h2>
<ul>
<li>&#x64B0;&#x5BEB; Unit Test &#x7684; 3A &#x539F;&#x5247;:<ol>
<li>Arrange: <ul>
<li>Set up th object to be tested.</li>
<li>We may need to surround the object with collaborators. <br> For testing purposes, those collaborators minght be test objects (mocks, fakes, etc&#x2026;) or the real ting.</li>
</ul>
</li>
<li>Act:<ul>
<li>Act on the object. (invoke the tested method with parameters.)</li>
</ul>
</li>
<li>Assert:<ul>
<li>Make claims about the object, its collaborators, its parameters and possibly global state.</li>
<li>In other words, verify the test result.</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<hr>
<p><a name="1"></a></p>
<h3 id="verify_somw_behavior_(ignore_any_return_value)">verify somw behavior (ignore any return value)</h3>
<pre><code>@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="literal">void</span> test01(){

    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> mockedList <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>)mock(<span class="built_in">List</span><span class="built_in">.</span>class);

    <span class="comment">// Act</span>
    <span class="comment">// Action on the object</span>
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    mockedList<span class="built_in">.</span>clear();

    <span class="comment">// Assert</span>
    <span class="comment">// Verify the result</span>
    verify(mockedList)<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    verify(mockedList)<span class="built_in">.</span>clear();

    <span class="comment">// Act</span>
    <span class="comment">// Action on the object</span>
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    mockedList<span class="built_in">.</span>clear();

    <span class="comment">// Assert</span>
    <span class="comment">// Verify the result.</span>
    <span class="comment">// The interactions should be accumulated unless the mock object is reset</span>
    verify(mockedList, times(<span class="number">2</span>))<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    verify(mockedList, times(<span class="number">2</span>))<span class="built_in">.</span>clear();
}
</code></pre><hr>
<p><a name="2"></a></p>
<h3 id="verify_some_behavior_with_stubbing_the_return_value">verify some behavior with stubbing the return value</h3>
<pre><code>@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span>(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, it can be a concrete class</span>
    LinkedList&lt;String&gt; mockedList = (LinkedList&lt;String&gt;) mock(LinkedList.class);

    <span class="comment">// Act</span>
    <span class="comment">// Stubbing it.</span>
    <span class="comment">// Make it return what you want</span>
    when(mockedList.<span class="keyword">get</span>(<span class="number">0</span>)).thenReturn(<span class="string">&quot;first&quot;</span>);
    <span class="comment">// The latter stubbing will override the former one</span>
    when(mockedList.<span class="keyword">get</span>(<span class="number">0</span>)).thenReturn(<span class="string">&quot;firstfirst&quot;</span>);
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test02:&quot;</span> + mockedList.<span class="keyword">get</span>(<span class="number">0</span>));
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test02:&quot;</span> + mockedList.<span class="keyword">get</span>(<span class="number">0</span>));

    <span class="comment">// Assert</span>
    verify(mockedList, times(<span class="number">2</span>)).<span class="keyword">get</span>(<span class="number">0</span>);
}
</code></pre><p><strong>Output:</strong></p>
<pre><code><span class="tag">test02</span><span class="pseudo">:firstfirst</span>
<span class="tag">test02</span><span class="pseudo">:firstfirst</span>
</code></pre><hr>
<p><a name="3"></a></p>
<h3 id="verify_unstubbing_behavior">verify unstubbing behavior</h3>
<pre><code><span class="property">@SuppressWarnings</span>(<span class="string">&quot;unchecked&quot;</span>)
public <span class="reserved">void</span> test03(){
    <span class="regexp">//</span> Arrange
    <span class="regexp">//</span> Create the mock object, it can be a concrete <span class="class"><span class="keyword">class</span></span>
    LinkedList&lt;String&gt; mockedList = (LinkedList&lt;String&gt;) mock(LinkedList.class);

    <span class="regexp">//</span> Act
    <span class="regexp">//</span> The <span class="reserved">default</span> <span class="keyword">return</span> value <span class="keyword">for</span> object <span class="keyword">is</span> <span class="literal">null</span>.
    <span class="regexp">//</span> For primitive type, the <span class="reserved">default</span> value <span class="keyword">for</span> int <span class="keyword">is</span> <span class="number">0.</span>
    //                   , the <span class="reserved">default</span> value <span class="keyword">for</span> boolean <span class="keyword">is</span> <span class="literal">false</span>.
    System.out.println(<span class="string">&quot;test03:&quot;</span> + mockedList.get(<span class="number">0</span>));

    <span class="regexp">//</span> Assert
    <span class="regexp">//</span> times(<span class="number">1</span>) <span class="keyword">is</span> the <span class="reserved">default</span> value, <span class="keyword">if</span> you don<span class="string">&apos;t specify it
    verify(mockedList, times(1)).get(0);
}</span>
</code></pre><p><strong>Output:</strong></p>
<pre><code>test03:<span class="keyword">null</span>
</code></pre><hr>
<p><a name="4"></a></p>
<h3 id="argument_matching_using_default_matcher">argument matching using default matcher</h3>
<pre><code><span class="comment">// Argument Matching Using Default Matcher</span>
@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span>(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List.class);
    when(mockedList.<span class="keyword">get</span>(anyInt())).thenReturn(<span class="string">&quot;stubbing string&quot;</span>);

    <span class="comment">// Act</span>
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10</span>; i++){
        System.<span class="keyword">out</span>.println(<span class="string">&quot;[&quot;</span>+ i + <span class="string">&quot;]:&quot;</span> + mockedList.<span class="keyword">get</span>(i));
    }

    <span class="comment">// Assert</span>
    verify(mockedList, times(<span class="number">10</span>)).<span class="keyword">get</span>(anyInt());
}
</code></pre><p><strong>Output:</strong></p>
<pre><code><span class="attr_selector">[0]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[1]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[2]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[3]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[4]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[5]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[6]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[7]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[8]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
<span class="attr_selector">[9]</span><span class="pseudo">:stubbing</span> <span class="tag">string</span>
</code></pre><hr>
<h3 id="argument_matching_using_customized_matcher">argument matching using customized matcher</h3>
<pre><code>@SuppressWarnings(<span class="string">&quot;rawtypes&quot;</span>)
<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IsListOfTwoElements</span> <span class="keyword">extends</span> <span class="title">ArgumentMatcher</span>&lt;<span class="title">List</span>&gt;{</span>
    @Override
    <span class="keyword">public</span> boolean matches(Object argument) {
        <span class="keyword">return</span> <span class="number">2</span> == ((<span class="keyword">List</span>)argument).size();
    }

}

@SuppressWarnings(<span class="string">&quot;rawtypes&quot;</span>)
<span class="keyword">private</span> <span class="keyword">List</span> listOfTwoElements(){
    <span class="keyword">return</span> argThat(<span class="keyword">new</span> IsListOfTwoElements());
}

<span class="comment">// Argument Matching Using Custom Matcher</span>
@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> void test05(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="keyword">List</span>&lt;String&gt; mockedList = (<span class="keyword">List</span>&lt;String&gt;) mock(<span class="keyword">List</span>.class);
    when(mockedList.addAll(listOfTwoElements())).thenReturn(<span class="keyword">true</span>);

    <span class="comment">// Act</span>
    mockedList.addAll(Arrays.asList(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>));

    <span class="comment">// Assert</span>
    verify(mockedList).addAll(listOfTwoElements());
}
</code></pre><hr>
<p><a name="5"></a></p>
<h3 id="verify_exact_number_of_invocation">verify exact number of invocation</h3>
<pre><code>@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="literal">void</span> test06(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> mockedList <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) mock(<span class="built_in">List</span><span class="built_in">.</span>class);

    <span class="comment">// Act</span>
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;three&quot;</span>);
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;three&quot;</span>);
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;three&quot;</span>);

    <span class="comment">// Assert</span>
    verify(mockedList)<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    verify(mockedList, times(<span class="number">1</span>))<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    verify(mockedList, times(<span class="number">2</span>))<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);
    verify(mockedList, times(<span class="number">3</span>))<span class="built_in">.</span>add(<span class="string">&quot;three&quot;</span>);

    verify(mockedList, never())<span class="built_in">.</span>add(<span class="string">&quot;none&quot;</span>);
    verify(mockedList, atLeastOnce())<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    verify(mockedList, atLeast(<span class="number">2</span>))<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);
    verify(mockedList, atMost(<span class="number">5</span>))<span class="built_in">.</span>add(<span class="string">&quot;three&quot;</span>);
}
</code></pre><hr>
<p><a name="6"></a></p>
<h3 id="verification_in_order,_using_single_mock">verification in order, using single mock</h3>
<pre><code><span class="keyword">public</span> <span class="literal">void</span> test07(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> singleMock <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) mock(<span class="built_in">List</span><span class="built_in">.</span>class);

    <span class="comment">// Act</span>
    singleMock<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    singleMock<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);

    <span class="comment">// Assert</span>
    InOrder inOrder <span class="subst">=</span> inOrder(singleMock);
    inOrder<span class="built_in">.</span>verify(singleMock)<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    inOrder<span class="built_in">.</span>verify(singleMock)<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);
}
</code></pre><hr>
<h3 id="verification_in_order,_using_multiple_mock">verification in order, using multiple mock</h3>
<pre><code>@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="literal">void</span> test08(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> firstMock <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) mock(<span class="built_in">List</span><span class="built_in">.</span>class);
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> secondMock <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) mock(<span class="built_in">List</span><span class="built_in">.</span>class);

    <span class="comment">// Act</span>
    firstMock<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    secondMock<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);
    firstMock<span class="built_in">.</span>add(<span class="string">&quot;three&quot;</span>);
    secondMock<span class="built_in">.</span>add(<span class="string">&quot;four&quot;</span>);

    <span class="comment">// Assert</span>
    <span class="comment">// Verification in order is flexible - you don&apos;t have to</span>
    <span class="comment">//   verify all interactions one-by-one but only those you&apos;re</span>
    <span class="comment">//   interested in testing in order</span>
    InOrder inOrder <span class="subst">=</span> inOrder(firstMock, secondMock);
    inOrder<span class="built_in">.</span>verify(firstMock)<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    inOrder<span class="built_in">.</span>verify(secondMock)<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);
    <span class="comment">// it still passes, even marks it as comment</span>
    inOrder<span class="built_in">.</span>verify(firstMock)<span class="built_in">.</span>add(<span class="string">&quot;three&quot;</span>);
    inOrder<span class="built_in">.</span>verify(secondMock)<span class="built_in">.</span>add(<span class="string">&quot;four&quot;</span>);
}
</code></pre><hr>
<p><a name="7"></a></p>
<h3 id="finding_redundant_invocations">finding redundant invocations</h3>
<pre><code><span class="keyword">public</span> <span class="literal">void</span> test09(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> mockedList <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) mock(<span class="built_in">List</span><span class="built_in">.</span>class);

    <span class="comment">// Act</span>
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);

    <span class="comment">// Assert</span>
    verify(mockedList)<span class="built_in">.</span>add(<span class="string">&quot;one&quot;</span>);
    verify(mockedList)<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>); <span class="comment">// mark it to fail</span>

    verifyNoMoreInteractions(mockedList);
}
</code></pre><hr>
<p><a name="8"></a></p>
<h3 id="stubbing_consecutive_calls_(iterator-style_stubbing)">stubbing consecutive calls (iterator-style stubbing)</h3>
<pre><code>@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="literal">void</span> test10(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> mockedList <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) mock(<span class="built_in">List</span><span class="built_in">.</span>class);

    <span class="comment">// Act</span>
    when(mockedList<span class="built_in">.</span>get(<span class="number">0</span>))<span class="built_in">.</span>thenReturn(<span class="string">&quot;0&quot;</span>)<span class="built_in">.</span>thenReturn(<span class="string">&quot;1&quot;</span>);
    <span class="comment">// the usage above is equal to the below</span>
    <span class="comment">// when(mockedList.get(0)).thenReturn(&quot;0&quot;,&quot;1&quot;);</span>

    <span class="comment">// Assert</span>
    assertTrue(<span class="string">&quot;0&quot;</span><span class="built_in">.</span><span class="keyword">equals</span>(mockedList<span class="built_in">.</span>get(<span class="number">0</span>)));
    assertTrue(<span class="string">&quot;1&quot;</span><span class="built_in">.</span><span class="keyword">equals</span>(mockedList<span class="built_in">.</span>get(<span class="number">0</span>)));
}
</code></pre><hr>
<p><a name="9"></a></p>
<h3 id="stubbing_with_callbacks">stubbing with callbacks</h3>
<pre><code><span class="comment">// stubbing with callback</span>
<span class="comment">//   it can be used to simulate the response callback</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span>(){
    <span class="comment">// Arrange</span>
    Util mock = mock(Util.class);

    <span class="comment">// Act</span>
    when(mock.asyncCall()).thenAnswer(<span class="keyword">new</span> Answer(){
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> Object <span class="title">answer</span>(InvocationOnMock invocation) <span class="keyword">throws</span> Throwable {
            <span class="comment">// do the response call</span>
            System.out.println(<span class="string">&quot;test11: answer callback&quot;</span>);
            <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">true</span>);
        }
    });

    <span class="comment">// Assert</span>
    assertTrue(mock.asyncCall());
    verify(mock).asyncCall();
}
</code></pre><hr>
<p><a name="10"></a></p>
<h3 id="doReturn_using_mock">doReturn using mock</h3>
<pre><code><span class="comment">// doReturn using mock</span>
<span class="keyword">public</span> <span class="literal">void</span> test12(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> mockedList <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) mock(<span class="built_in">List</span><span class="built_in">.</span>class);

    <span class="comment">// Act</span>
    <span class="comment">// When you use mock, it&apos;s equal to when(mockedList.get(0)).thenReturn(&quot;0&quot;)</span>
    doReturn(<span class="string">&quot;one&quot;</span>)<span class="built_in">.</span>when(mockedList)<span class="built_in">.</span>get(<span class="number">0</span>);
    <span class="comment">// when(mockedList.get(0)).thenReturn(&quot;0&quot;);</span>

    <span class="comment">// Assert</span>
    assertTrue(<span class="string">&quot;one&quot;</span><span class="built_in">.</span><span class="keyword">equals</span>(mockedList<span class="built_in">.</span>get(<span class="number">0</span>)));
    verify(mockedList)<span class="built_in">.</span>get(<span class="number">0</span>);
}
</code></pre><hr>
<h3 id="doReturn_using_spy">doReturn using spy</h3>
<pre><code><span class="comment">// doReturn using spy</span>
<span class="keyword">public</span> <span class="literal">void</span> test13(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> spyList <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) spy(<span class="literal">new</span> LinkedList<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>());

    <span class="comment">// Act</span>
    <span class="comment">// When you use spy, it&apos;s not equal to when(spyList.get(0)).thenReturn(&quot;0&quot;)</span>
    doReturn(<span class="string">&quot;one&quot;</span>)<span class="built_in">.</span>when(spyList)<span class="built_in">.</span>get(<span class="number">0</span>);
    <span class="comment">// when(spyList.get(0)).thenReturn(&quot;0&quot;);</span>

    <span class="comment">// Assert</span>
    assertTrue(<span class="string">&quot;one&quot;</span><span class="built_in">.</span><span class="keyword">equals</span>(spyList<span class="built_in">.</span>get(<span class="number">0</span>)));
    verify(spyList)<span class="built_in">.</span>get(<span class="number">0</span>);
}
</code></pre><hr>
<h3 id="doThrow">doThrow</h3>
<pre><code><span class="comment">// doThrow</span>
@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test14</span>(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List.class);

    <span class="comment">// it&apos;s equal to</span>
    <span class="comment">// doThrow(new RuntimeException()).when(mockedList).toString();</span>
    doThrow(RuntimeException.class).when(mockedList).toString();

    <span class="keyword">try</span>{
        System.<span class="keyword">out</span>.println(mockedList);
    }<span class="keyword">catch</span>(RuntimeException e){
        <span class="comment"><span class="xmlDocTag">///</span> pass</span>
    }
}
</code></pre><hr>
<h3 id="doAnswer">doAnswer</h3>
<pre><code><span class="comment">// rewrite case 10 using doAnswer</span>
<span class="annotation">@SuppressWarnings</span>(<span class="string">&quot;rawtypes&quot;</span>)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test15</span>(){
    <span class="comment">// Arrange</span>
    Util mock = mock(Util.class);

    <span class="comment">// Act</span>
    doAnswer(<span class="keyword">new</span> Answer(){
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> Object <span class="title">answer</span>(InvocationOnMock invocation) <span class="keyword">throws</span> Throwable {
            <span class="comment">// do the response call</span>
            System.out.println(<span class="string">&quot;test15: answer callback&quot;</span>);
            <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">true</span>);
        }
    }).when(mock).asyncCall();

    <span class="comment">// Assert</span>
    assertTrue(mock.asyncCall());
    verify(mock).asyncCall();
}
</code></pre><p><strong>Output:</strong></p>
<pre><code><span class="attribute">test15</span>: <span class="string">answer callback</span>
<span class="attribute">test15</span>: <span class="string">answer callback</span>
</code></pre><hr>
<h3 id="doNothing">doNothing</h3>
<pre><code><span class="comment">// doNothing</span>
<span class="comment">// it&apos;s rarely to use doNothing, the following is an example</span>
<span class="annotation">@SuppressWarnings</span>(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test16</span>(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List.class);
    doNothing().doThrow(<span class="keyword">new</span> RuntimeException()).when(mockedList).clear();

    <span class="comment">// Act</span>
    <span class="comment">// does nothing the first time:</span>
    mockedList.clear();

    <span class="keyword">try</span>{
        <span class="comment">// throws RuntimeException the next time:</span>
        mockedList.clear();
    }<span class="keyword">catch</span>(RuntimeException e){

    }
}
</code></pre><hr>
<h3 id="doRealCall">doRealCall</h3>
<pre><code><span class="keyword">private</span> <span class="keyword">class</span> Util2{
    <span class="keyword">public</span> String <span class="title">A</span>(){
        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;
    }

    <span class="keyword">private</span> String <span class="title">B</span>(){
        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;
    }

    <span class="keyword">public</span> String <span class="title">AB</span>(){
        <span class="keyword">return</span> A() + B();
    }
}

<span class="comment">// doRealCall</span>
<span class="comment">// mock object can also be used to do partial mock</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test17</span>(){
    Util2 mockUtil2 = mock(Util2.class);
    assertTrue(<span class="keyword">null</span> == mockUtil2.A());

    when(mockUtil2.A()).thenCallRealMethod();
    assertTrue(<span class="string">&quot;A&quot;</span>.equals(mockUtil2.A()));

    <span class="comment">// mark any one to fail</span>
    when(mockUtil2.B()).thenCallRealMethod();
    when(mockUtil2.AB()).thenCallRealMethod();
    assertTrue(<span class="string">&quot;AB&quot;</span>.equals(mockUtil2.AB()));
}
</code></pre><hr>
<p><a name="11"></a></p>
<h3 id="reset_mock">reset mock</h3>
<pre><code><span class="comment">// reset mock</span>
@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="literal">void</span> test18(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> mockedList <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) mock(<span class="built_in">List</span><span class="built_in">.</span>class);

    <span class="comment">// Act</span>
    mockedList<span class="built_in">.</span>get(<span class="number">0</span>);
    reset(mockedList);

    <span class="comment">// Assert</span>
    verify(mockedList, never())<span class="built_in">.</span>get(<span class="number">0</span>);
}
</code></pre><hr>
<p><a name="12"></a></p>
<h3 id="capturing_arguments">capturing arguments</h3>
<pre><code><span class="comment">// capturing arguments for further assertions</span>
@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="literal">void</span> test19(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> mockedList <span class="subst">=</span> (<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>) mock(<span class="built_in">List</span><span class="built_in">.</span>class);
    ArgumentCaptor<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> argument <span class="subst">=</span> ArgumentCaptor<span class="built_in">.</span>forClass(<span class="built_in">String</span><span class="built_in">.</span>class);

    <span class="comment">// Act</span>
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;Hello World&quot;</span>);
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;two&quot;</span>);
    mockedList<span class="built_in">.</span>add(<span class="string">&quot;three&quot;</span>);

    <span class="comment">// Assert</span>
    verify(mockedList, times(<span class="number">3</span>))<span class="built_in">.</span>add(argument<span class="built_in">.</span>capture());

    System<span class="built_in">.</span>out<span class="built_in">.</span>println(<span class="string">&quot;test19:&quot;</span> <span class="subst">+</span> argument<span class="built_in">.</span>getAllValues());
    <span class="comment">// print the argument of last call</span>
    System<span class="built_in">.</span>out<span class="built_in">.</span>println(<span class="string">&quot;test19:&quot;</span> <span class="subst">+</span> argument<span class="built_in">.</span>getValue());
}
</code></pre><p><strong>Output:</strong></p>
<pre><code>test19:[Hello World, <span class="constant">two</span>, <span class="constant">three</span>]
test19:<span class="constant">three</span>
</code></pre><hr>
<p><a name="13"></a></p>
<h3 id="change_the_default_value_of_unstubbed_invocations_(using_RETURNS_SMART_NULLS)">change the default value of unstubbed invocations (using RETURNS_SMART_NULLS)</h3>
<pre><code><span class="comment">// change the default value of unstubbed invocations</span>
<span class="comment">//   use RETURNS_SMART_NULLS to know which null pointer exception</span>
<span class="comment">//   is caused by unstubing</span>
@SuppressWarnings(<span class="string">&quot;rawtypes&quot;</span>)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test20</span>(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    List mockedList =  mock(List.class, RETURNS_SMART_NULLS);
    ListIterator iterator = mockedList.listIterator();

    <span class="keyword">try</span>{
        System.<span class="keyword">out</span>.println(<span class="string">&quot;test20:&quot;</span> + iterator.nextIndex());
    }<span class="keyword">catch</span>(SmartNullPointerException e){

    }
}
</code></pre><hr>
<h3 id="change_the_default_value_of_unstubbed_invocations_(using_CALLS_REAL_METHODS)">change the default value of unstubbed invocations (using CALLS_REAL_METHODS)</h3>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> PartialMockObject {
    <span class="keyword">public</span> String <span class="title">m1</span>(){
        <span class="keyword">return</span> <span class="string">&quot;PartialMockObject:&quot;</span> + <span class="string">&quot;m1&quot;</span>;
    }

    <span class="keyword">public</span> String <span class="title">m2</span>(){
        <span class="keyword">return</span> p() + <span class="string">&quot;m3&quot;</span>;
    }

    <span class="keyword">public</span> String <span class="title">m3</span>(){
        <span class="keyword">return</span> pp() + <span class="string">&quot;m3&quot;</span>;
    }

    <span class="keyword">public</span> String <span class="title">p</span>(){
        <span class="keyword">return</span> <span class="string">&quot;PartialMockObject:&quot;</span>;
    }

    <span class="keyword">private</span> String <span class="title">pp</span>(){
        <span class="keyword">return</span> p();
    }
}

<span class="comment">// change the default value of unstubbed invocations</span>
<span class="comment">//   use CALLS_REAL_METHODS to simulate partial mock</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test24</span>(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    PartialMockObject mock =  mock(PartialMockObject.class, CALLS_REAL_METHODS);
    PartialMockObject spy = spy(<span class="keyword">new</span> PartialMockObject());

    when(mock.m3()).thenReturn(<span class="string">&quot;m3 is stubbed&quot;</span>);
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test24: mock.m1()=&quot;</span> + mock.m1());
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test24: mock.m2()=&quot;</span> + mock.m2());
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test24: mock.m3()=&quot;</span> + mock.m3());

    when(spy.m3()).thenReturn(<span class="string">&quot;m3 is stubbed&quot;</span>);
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test24: spy.m1()=&quot;</span> + spy.m1());
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test24: spy.m2()=&quot;</span> + spy.m2());
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test24: spy.m3()=&quot;</span> + spy.m3());
}
</code></pre><p><strong>Output:</strong></p>
<pre><code><span class="attribute">test24</span>: <span class="string">mock.m1()=PartialMockObject:m1</span>
<span class="attribute">test24</span>: <span class="string">mock.m2()=PartialMockObject:m3</span>
<span class="attribute">test24</span>: <span class="string">mock.m3()=m3 is stubbed</span>
<span class="attribute">test24</span>: <span class="string">spy.m1()=PartialMockObject:m1</span>
<span class="attribute">test24</span>: <span class="string">spy.m2()=PartialMockObject:m3</span>
<span class="attribute">test24</span>: <span class="string">spy.m3()=m3 is stubbed</span>
</code></pre><hr>
<p><a name="14"></a></p>
<h3 id="inject_mock/spy_into_tested_target_(using_constructor)">inject mock/spy into tested target (using constructor)</h3>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> SUT {
    List&lt;String&gt; mList;

    <span class="keyword">public</span> <span class="title">SUT</span>(List&lt;String&gt; list){
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT&apos;s constructor&quot;</span>);
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT&apos;s mList:&quot;</span> + mList);
        mList = list;
    }

    <span class="keyword">public</span> String <span class="title">get</span>(<span class="keyword">int</span> index){
        <span class="keyword">return</span> mList.<span class="keyword">get</span>(index);
    }

    <span class="keyword">public</span> boolean <span class="title">put</span>(String obj){
        <span class="keyword">return</span> mList.add(obj);
    }

    @Override
    <span class="keyword">public</span> boolean <span class="title">equals</span>(Object obj) {
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT&apos;equals: (SUT)obj).mList =&quot;</span> + ((SUT)obj).mList);
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT&apos;equals: mList =&quot;</span> + mList);
        <span class="keyword">return</span> ((SUT)obj).mList == mList;
    }
}
</code></pre><p><strong>Output:</strong></p>
<pre><code>test21: start
SUT<span class="string">&apos;s constructor
SUT&apos;</span>s mList:null
SUT2<span class="string">&apos;s constructor
SUT3&apos;</span>s <span class="function"><span class="keyword">constructor</span>
<span class="title">SUT</span>&apos;<span class="title">s</span> <span class="title">constructor</span>
<span class="title">SUT</span>&apos;<span class="title">s</span> <span class="title">mList</span>:</span>null
SUT<span class="string">&apos;equals: (SUT)obj).mList =mList
SUT&apos;</span><span class="keyword">equals</span>: mList =mList
test21: <span class="keyword">end</span>
</code></pre><hr>
<h3 id="inject_mock/spy_into_tested_target_(using_setter)">inject mock/spy into tested target (using setter)</h3>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> SUT2 {
    List&lt;String&gt; mList2;

    <span class="keyword">public</span> <span class="title">SUT2</span>(){
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT2&apos;s constructor&quot;</span>);
    }

    <span class="keyword">public</span> String <span class="title">get</span>(<span class="keyword">int</span> index){
        <span class="keyword">return</span> mList2.<span class="keyword">get</span>(index);
    }

    <span class="keyword">public</span> boolean <span class="title">put</span>(String obj){
        <span class="keyword">return</span> mList2.add(obj);
    }

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span>(List&lt;String&gt; list){
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT2&apos;s setList&quot;</span>);
        mList2 = list;
    }

    @Override
    <span class="keyword">public</span> boolean <span class="title">equals</span>(Object obj) {
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT2&apos;s equals: (SUT2)obj).mList2 =&quot;</span> + ((SUT2)obj).mList2);
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT2&apos;s equals: mList2 =&quot;</span> + mList2);
        <span class="keyword">return</span> ((SUT2)obj).mList2 == mList2;
    }
}

<span class="comment">// dependency injection using the setter</span>
@Mock <span class="keyword">private</span> List&lt;String&gt; mList2;
@InjectMocks <span class="keyword">private</span> SUT2 mSUT2;
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test22</span>(){
    <span class="comment">// Arrange</span>
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test22: start&quot;</span>);
    MockitoAnnotations.initMocks(<span class="keyword">this</span>);
    <span class="comment">// Act</span>
    <span class="comment">// Assert</span>
    assertNotNull(mList2);
    assertNotNull(mSUT2);

    SUT2 sut2 = <span class="keyword">new</span> SUT2();
    sut2.setList(mList2);
    assertTrue(mSUT2.equals(sut2));
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test22: end&quot;</span>);
}
</code></pre><p><strong>Output:</strong></p>
<pre><code>test22: start
SUT<span class="string">&apos;s constructor
SUT&apos;</span>s mList:null
SUT2<span class="string">&apos;s constructor
SUT3&apos;</span>s <span class="function"><span class="keyword">constructor</span>
<span class="title">SUT2</span>&apos;<span class="title">s</span> <span class="title">constructor</span>
<span class="title">SUT2</span>&apos;<span class="title">s</span> <span class="title">setList</span>
<span class="title">SUT2</span>&apos;<span class="title">s</span> <span class="title">equals</span>:</span> (SUT2)obj).mList2 =mList2
SUT2<span class="string">&apos;s equals: mList2 =mList2
test22: end</span>
</code></pre><hr>
<h3 id="inject_mock/spy_into_tested_target_(using_field)">inject mock/spy into tested target (using field)</h3>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> SUT3 {
    List&lt;String&gt; mList3;

    <span class="keyword">public</span> <span class="title">SUT3</span>(){
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT3&apos;s constructor&quot;</span>);
    }

    <span class="keyword">public</span> String <span class="title">get</span>(<span class="keyword">int</span> index){
        <span class="keyword">return</span> mList3.<span class="keyword">get</span>(index);
    }

    <span class="keyword">public</span> boolean <span class="title">put</span>(String obj){
        <span class="keyword">return</span> mList3.add(obj);
    }

    @Override
    <span class="keyword">public</span> boolean <span class="title">equals</span>(Object obj) {
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT3&apos;s equals: (SUT3)obj).mList3 =&quot;</span> + ((SUT3)obj).mList3);
        System.<span class="keyword">out</span>.println(<span class="string">&quot;SUT3&apos;s equals: mList3 =&quot;</span> + mList3);
        <span class="keyword">return</span> ((SUT3)obj).mList3 == mList3;
    }
}

<span class="comment">// dependency injection using field</span>
@Mock(name=<span class="string">&quot;mList3&quot;</span>) <span class="keyword">private</span> List&lt;String&gt; mLIST3;
@InjectMocks <span class="keyword">private</span> SUT3 mSUT3;
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test23</span>(){
    <span class="comment">// Arrange</span>
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test23: start&quot;</span>);
    MockitoAnnotations.initMocks(<span class="keyword">this</span>);
    <span class="comment">// Act</span>
    <span class="comment">// Assert</span>
    assertNotNull(mLIST3);
    assertNotNull(mSUT3);

    SUT3 sut3 = <span class="keyword">new</span> SUT3();
    sut3.mList3 = mLIST3;
    assertTrue(mSUT3.equals(sut3));
    System.<span class="keyword">out</span>.println(<span class="string">&quot;test23: end&quot;</span>);
}
</code></pre><p><strong>Output:</strong></p>
<pre><code>test23: start
SUT<span class="string">&apos;s constructor
SUT&apos;</span>s mList:null
SUT2<span class="string">&apos;s constructor
SUT3&apos;</span>s <span class="function"><span class="keyword">constructor</span>
<span class="title">SUT3</span>&apos;<span class="title">s</span> <span class="title">constructor</span>
<span class="title">SUT3</span>&apos;<span class="title">s</span> <span class="title">equals</span>:</span> (SUT3)obj).mList3 =mList3
SUT3<span class="string">&apos;s equals: mList3 =mList3
test23: end</span>
</code></pre><hr>
<p><a name="15"></a></p>
<h3 id="verify_with_timeout">verify with timeout</h3>
<pre><code>@SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test25</span>(){
    <span class="comment">// Arrange</span>
    <span class="comment">// Create the mock object, even it&apos;s an interface</span>
    final List&lt;String&gt; mockedList = (List&lt;String&gt;) mock(List.class);

    <span class="comment">// Act</span>
    <span class="comment">// When you use mock, it&apos;s equal to when(mockedList.get(0)).thenReturn(&quot;0&quot;)</span>
    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {
        @Override
        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {
            <span class="keyword">try</span>{
                Thread.sleep(<span class="number">2500</span>);
                <span class="comment">// when(mockedList.get(0)).thenReturn(&quot;0&quot;);</span>
                doReturn(<span class="string">&quot;one&quot;</span>).when(mockedList).<span class="keyword">get</span>(<span class="number">0</span>);
                assertTrue(<span class="string">&quot;one&quot;</span>.equals(mockedList.<span class="keyword">get</span>(<span class="number">0</span>)));
            } <span class="keyword">catch</span>(InterruptedException e){

            }
        }
    });
    t1.start();

    <span class="comment">// Assert</span>
    <span class="keyword">long</span> start, end, elapsed;
    start = System.currentTimeMillis();
    <span class="comment">// if the condition is satisfied, it won&apos;t be blocked</span>
    verify(mockedList, timeout(<span class="number">3000</span>)).<span class="keyword">get</span>(<span class="number">0</span>);
    end = System.currentTimeMillis();
    elapsed = end - start;
    assertTrue(elapsed &gt; <span class="number">2000</span>);
}
</code></pre><hr>
<ul>
<li>[Reference]<ul>
<li>[1] <a href="http://code.google.com/p/mockito/" target="_blank" rel="external">Mockito Official Website</a></li>
<li>[2] <a href="http://msdn.microsoft.com/zh-tw/library/dn167673.aspx" target="_blank" rel="external">30&#x5929;&#x5FEB;&#x901F;&#x4E0A;&#x624B;TDD</a></li>
</ul>
</li>
</ul>
]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Software-Testing/" term="Software Testing"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Python Basic]]></title>
    <link href="http://mutsughost1.github.io/2013/09/29/python-basic/"/>
    <id>http://mutsughost1.github.io/2013/09/29/python-basic/</id>
    <published>2013-09-29T12:45:42.000Z</published>
    <updated>2014-06-01T21:10:47.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="#python_folder_structure" title="Python&#x27;s Folder Structure">Python&#x2019;s Folder Structure</a></li>
<li><a href="#yield_about" title="&#x95DC;&#x65BC; yield">&#x95DC;&#x65BC; <em>yield</em></a><ul>
<li><a href="#yield_history" title="yield &#x662F;&#x70BA;&#x4F55;&#x800C;&#x751F; ?">yield &#x662F;&#x70BA;&#x4F55;&#x800C;&#x751F; ?</a></li>
<li><a href="#yield_usage" title="yield &#x7684;&#x5404;&#x7A2E;&#x7528;&#x6CD5;">yield &#x7684;&#x5404;&#x7A2E;&#x7528;&#x6CD5;</a><ul>
<li><a href="#yield_fundamental" title="&#x7684;&#x57FA;&#x672C;&#x904B;&#x4F5C;&#x539F;&#x7406;">yield &#x7684;&#x57FA;&#x672C;&#x904B;&#x4F5C;&#x539F;&#x7406;</a></li>
<li><a href="#yield_send" title="send(expression)">send(expression) - pass a value to generator</a></li>
<li><a href="#yield_throw" title="throw">throw(type[,value[,traceback]]) - raise exception inside generator</a></li>
<li><a href="#yield_close" title="close()">close() - terminate the generator</a></li>
<li><a href="#yield_generator_exp" title="generator expression">generator expression - &#x5FEB;&#x901F;&#x7522;&#x751F;&#x4E00;&#x500B; generator object</a></li>
</ul>
</li>
<li><a href="#yield_reference">Reference</a></li>
</ul>
</li>
<li>Python Scope &#x6982;&#x5FF5;</li>
<li><a href="#others" title="&#x5176;&#x4ED6;">&#x5176;&#x4ED6;</a><ul>
<li><a href="http://www.python.org/dev/peps/pep-0202/" title="PEP202" target="_blank" rel="external">List Comprehesion</a> </li>
<li><a href="#lambda_exp" title="Lambda expression">Lambda expression</a></li>
<li><a href="#built_in_map" title="Built-in Funtion map">Built-in Funtion map</a></li>
<li><a href="#built_in_reduce" title="Built-in Funtion reduce">Built-in Funtion reduce</a></li>
<li><a href="#built_in_filter" title="Built-in Funtion filter">Built-in Funtion filter</a></li>
<li><a href="#built_in_zip" title="Built-in Funtion zip">Built-in Funtion zip</a><a id="more"></a>
</li>
</ul>
</li>
</ul>
<hr>
<p><a name="python_folder_structure"></a></p>
<h1 id="Python&#x2019;s_Folder_Structure"><em>Python&#x2019;s Folder Structure</em></h1>
<p>&#x5728;&#x958B;&#x59CB;&#x4F7F;&#x7528; Python &#x4E4B;&#x524D;, &#x5FC5;&#x9808;&#x5148;&#x5728;&#x7CFB;&#x7D71;&#x88DD;<a href="http://www.python.org/getit/" target="_blank" rel="external">&#x5B89;&#x88DD; Python &#x7684;&#x57F7;&#x884C;&#x74B0;&#x5883;</a>, &#x5B89;&#x88DD;&#x5B8C;&#x5F8C;&#x6703;&#x767C;&#x73FE;, &#x9810;&#x8A2D;&#x7684;&#x8CC7;&#x6599;&#x593E;&#x7D50;&#x69CB;&#x5982;&#x4E0B;:</p>
<p><img src="http://MutsuGhost1.github.io/image/python_install1.PNG" alt=""></p>
<ul>
<li>&#x5728; PythonXX &#x2014;&gt; Lib &#x76EE;&#x9304;&#x4E2D;, &#x53EF;&#x4EE5;&#x770B;&#x5230; Python Built-in Module &#x7684; Source Code  </li>
<li>&#x5728; PythonXX &#x2014;&gt; Lib &#x2014;&gt; site-packages &#x76EE;&#x9304;&#x4E2D;, &#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5B89;&#x88DD;&#x7684; 3rd Party Package</li>
</ul>
<p><img src="http://MutsuGhost1.github.io/image/python_install2.PNG" alt=""></p>
<hr>
<p><a name="yield_about"></a></p>
<h1 id="&#x95DC;&#x65BC;_yield_&#x7528;&#x6CD5;">&#x95DC;&#x65BC; <em>yield</em> &#x7528;&#x6CD5;</h1>
<p><a name="yield_history"></a></p>
<h2 id="yield_&#x662F;&#x70BA;&#x4F55;&#x800C;&#x751F;_?">yield &#x662F;&#x70BA;&#x4F55;&#x800C;&#x751F; ?</h2>
<p>&#x5728; <a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank" rel="external">PEP255</a> &#x4E2D;,&#x6709;&#x4E00;&#x6BB5;&#x8A71;&#x662F;&#x9019;&#x9EBC;&#x63CF;&#x8FF0;&#x7684;  </p>
<blockquote>
<p><em>When a producer function has a hard enough job that it requires<br>maintaining state between values produced, most programming languages<br>offer no pleasant and efficient solution beyond adding a callback<br>function to the producer&#x2019;s argument list, to be called with each value produced</em>  </p>
</blockquote>
<p>&#x7576;&#x4E00;&#x500B;&#x8907;&#x96DC;&#x7684; producer function, &#x70BA;&#x4E86;&#x5728;&#x6BCF;&#x6B21;&#x88AB;&#x547C;&#x53EB;&#x6642;, &#x6B63;&#x78BA;&#x7684; produce &#x51FA;&#x8CC7;&#x6599;, &#x5FC5;&#x9808;&#x5728; producer function<br>&#x5167;&#x5BE6;&#x4F5C;&#x4E00;&#x4E9B;&#x8907;&#x96DC;&#x7684; states &#x4F7F;&#x5F97;&#x8CC7;&#x6599;&#x53EF;&#x4EE5;&#x88AB;&#x6B63;&#x78BA;&#x7522;&#x751F;.  </p>
<p><a href="http://en.wikipedia.org/wiki/Fibonacci_number" title="Fibonacci Series in Wiki" target="_blank" rel="external">&#x4EE5; Fibonacci Series &#x70BA;&#x4F8B;</a></p>
<pre><code><span class="comment"># fib0.py produce &#x51FA; n &#x500B; number &#x7684; fibonacci series</span>
<span class="function"><span class="keyword">def</span> <span class="title">fib0</span><span class="params">(end)</span>:</span>
    a, b = <span class="number">0</span>, <span class="number">1</span>
    <span class="keyword">for</span> i <span class="keyword">in</span> range(end):
        a, b = b, a + b
        <span class="keyword">print</span> <span class="string">&quot;i=&quot;</span>, i, <span class="string">&quot; a=&quot;</span>, a

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    fib0(<span class="number">10</span>)

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main()
</code></pre><p>Output:  </p>
<pre><code><span class="setting">i= <span class="value"><span class="number">0</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">1</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">2</span> a= <span class="number">2</span></span></span>
<span class="setting">i= <span class="value"><span class="number">3</span> a= <span class="number">3</span></span></span>
<span class="setting">i= <span class="value"><span class="number">4</span> a= <span class="number">5</span></span></span>
<span class="setting">i= <span class="value"><span class="number">5</span> a= <span class="number">8</span></span></span>
<span class="setting">i= <span class="value"><span class="number">6</span> a= <span class="number">13</span></span></span>
<span class="setting">i= <span class="value"><span class="number">7</span> a= <span class="number">21</span></span></span>
<span class="setting">i= <span class="value"><span class="number">8</span> a= <span class="number">34</span></span></span>
<span class="setting">i= <span class="value"><span class="number">9</span> a= <span class="number">55</span></span></span>
</code></pre><p>&#x4E0A;&#x8FF0; <strong>fib0.py</strong> &#x7684;&#x505A;&#x6CD5;, &#x53EA;&#x80FD;&#x4E00;&#x6B21; produce &#x51FA;&#x6240;&#x6709;&#x7684; numbers, &#x82E5;&#x8981;&#x505A;&#x6210;&#x6BCF;&#x6B21;&#x547C;&#x53EB;&#x624D; produce &#x51FA; number,<br>&#x5FC5;&#x9808;&#x7531; programmer &#x5B9A;&#x7FA9;&#x984D;&#x5916;&#x7684; states &#x4F86;&#x505A;&#x8655;&#x7406;, &#x985E;&#x4F3C;&#x7684;&#x505A;&#x6CD5;&#x5982;&#x4E0B;:</p>
<pre><code><span class="comment"># fib1.py produce &#x51FA; n &#x500B; number &#x7684; fibonacci series</span>
<span class="comment"># global variable to keep state</span>
fib_state_cur = <span class="number">0</span>
fib_state_end = <span class="number">0</span>
fib_state_a = <span class="number">0</span>
fib_state_b = <span class="number">1</span>
<span class="function"><span class="keyword">def</span> <span class="title">fib1</span><span class="params">(end=-<span class="number">1</span>)</span>:</span>
    <span class="comment"># use global variable to keep state</span>
    <span class="keyword">global</span> fib_state_cur, fib_state_end, fib_state_a, fib_state_b

    <span class="comment"># reset state for each new call</span>
    <span class="keyword">if</span> <span class="number">0</span> &lt; end:
        fib_state_cur = <span class="number">0</span>
        fib_state_end = end
        fib_state_a = <span class="number">0</span>
        fib_state_b = <span class="number">1</span>

    <span class="comment"># restore the state for each call</span>
    start = fib_state_cur
    end = fib_state_end
    a, b = fib_state_a, fib_state_b

    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):
        a, b = b, a + b
        <span class="comment"># keep the state</span>
        fib_state_cur = i+<span class="number">1</span>
        fib_state_a, fib_state_b = a, b
        <span class="keyword">return</span> a

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):
        <span class="keyword">if</span> <span class="number">0</span> == i:
            <span class="comment"># first time to initialize the number of items</span>
            <span class="keyword">print</span> <span class="string">&quot;i=&quot;</span>, i, <span class="string">&quot;a=&quot;</span>, fib1(<span class="number">10</span>)
        <span class="keyword">else</span>:
            <span class="comment"># get the next number</span>
            <span class="keyword">print</span> <span class="string">&quot;i=&quot;</span>, i, <span class="string">&quot;a=&quot;</span>, fib1()

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main()
</code></pre><p>Output:  </p>
<pre><code><span class="setting">i= <span class="value"><span class="number">0</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">1</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">2</span> a= <span class="number">2</span></span></span>
<span class="setting">i= <span class="value"><span class="number">3</span> a= <span class="number">3</span></span></span>
<span class="setting">i= <span class="value"><span class="number">4</span> a= <span class="number">5</span></span></span>
<span class="setting">i= <span class="value"><span class="number">5</span> a= <span class="number">8</span></span></span>
<span class="setting">i= <span class="value"><span class="number">6</span> a= <span class="number">13</span></span></span>
<span class="setting">i= <span class="value"><span class="number">7</span> a= <span class="number">21</span></span></span>
<span class="setting">i= <span class="value"><span class="number">8</span> a= <span class="number">34</span></span></span>
<span class="setting">i= <span class="value"><span class="number">9</span> a= <span class="number">55</span></span></span>
</code></pre><p>&#x5927;&#x591A;&#x6578;&#x7684;&#x7A0B;&#x5F0F;&#x8A9E;&#x8A00;, &#x91DD;&#x5C0D;&#x9019;&#x6A23;&#x7684;&#x554F;&#x984C;&#x5728;&#x8A9E;&#x6CD5;&#x4E0A;&#x4E26;&#x6C92;&#x6709;&#x76F4;&#x63A5;&#x7684;&#x652F;&#x63F4;, &#x56E0;&#x6B64;&#x9664;&#x4E86;&#x4E0A;&#x8FF0;&#x7684;&#x505A;&#x6CD5;&#x5916;, &#x5927;&#x591A;&#x6578;&#x6298;&#x8877;&#x7684;&#x505A;&#x6CD5;&#x90FD;&#x662F;&#x63D0;&#x4F9B;<br>callback function &#x7D66;producer function &#x7576;&#x4F5C;&#x53C3;&#x6578;, &#x7576;&#x6BCF;&#x6B21;&#x8CC7;&#x6599;&#x88AB; produce &#x51FA;&#x4F86;&#x6642;, &#x900F;&#x904E; callback function &#x4F86;&#x901A;&#x77E5; consumer.  </p>
<p>&#x70BA;&#x4E86;&#x5C0D;&#x985E;&#x4F3C;&#x7684;&#x9700;&#x6C42;, &#x6709;&#x66F4;&#x597D;&#x7684;&#x652F;&#x63F4;, <a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank" rel="external">PEP255</a> &#x88AB;&#x63D0;&#x51FA;&#x4E14;&#x5BE6;&#x73FE;&#x65BC; Python 2.3 &#x4E2D;, &#x5728;&#x521D;&#x7248; <a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank" rel="external">PEP255</a> &#x7684;&#x5B9A;&#x7FA9;&#x4E2D;, yield &#x662F;&#x4E00;&#x500B; statement.</p>
<p>&#x900F;&#x904E; yield &#x7684;&#x652F;&#x63F4;, &#x53EF;&#x5C07; <strong>fib1.py</strong> &#x7C21;&#x5316;&#x70BA; <strong>fib2.py</strong>, &#x5982;&#x4E0B;:</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(end)</span>:</span>
    a, b = <span class="number">0</span>, <span class="number">1</span>
    <span class="keyword">for</span> i <span class="keyword">in</span> range(end):
        a, b = b, a + b
        <span class="keyword">yield</span> a

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    i = <span class="number">0</span>
    <span class="keyword">for</span> a <span class="keyword">in</span> fib2(<span class="number">10</span>):
        <span class="keyword">print</span> <span class="string">&quot;i=&quot;</span>, i, <span class="string">&quot;a=&quot;</span>, a
        i+=<span class="number">1</span>  
</code></pre><p>Output:  </p>
<pre><code><span class="setting">i= <span class="value"><span class="number">0</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">1</span> a= <span class="number">1</span></span></span>
<span class="setting">i= <span class="value"><span class="number">2</span> a= <span class="number">2</span></span></span>
<span class="setting">i= <span class="value"><span class="number">3</span> a= <span class="number">3</span></span></span>
<span class="setting">i= <span class="value"><span class="number">4</span> a= <span class="number">5</span></span></span>
<span class="setting">i= <span class="value"><span class="number">5</span> a= <span class="number">8</span></span></span>
<span class="setting">i= <span class="value"><span class="number">6</span> a= <span class="number">13</span></span></span>
<span class="setting">i= <span class="value"><span class="number">7</span> a= <span class="number">21</span></span></span>
<span class="setting">i= <span class="value"><span class="number">8</span> a= <span class="number">34</span></span></span>
<span class="setting">i= <span class="value"><span class="number">9</span> a= <span class="number">55</span></span></span>
</code></pre><p>&#x5230;&#x4E86; Python 2.5, &#x91DD;&#x5C0D; yield &#x6709;&#x66F4;&#x9032;&#x4E00;&#x6B65;&#x7684; enhancement <a href="http://www.python.org/dev/peps/pep-0342/" title="PEP342" target="_blank" rel="external">PEP342</a>, &#x4F7F;&#x5176;&#x80FD;&#x5920;&#x8F03;&#x5B8C;&#x5584;&#x7684;&#x8655;&#x7406; <a href="http://en.wikipedia.org/wiki/Coroutine#Implementations_for_Python" title="Coroutine in Wiki" target="_blank" rel="external">Coroutine</a> &#x9019;&#x985E;&#x7684;&#x554F;&#x984C;.  </p>
<hr>
<p><a name="yield_usage"></a></p>
<h2 id="yield_&#x7684;&#x5404;&#x7A2E;&#x7528;&#x6CD5;">yield &#x7684;&#x5404;&#x7A2E;&#x7528;&#x6CD5;</h2>
<p>&#x7531;&#x65BC; <a href="http://www.python.org/dev/peps/pep-0342/" title="PEP342" target="_blank" rel="external">PEP342</a> &#x662F;&#x91DD;&#x5C0D; <a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank" rel="external">PEP255</a> &#x7684; enhancement, &#x56E0;&#x6B64;&#x4EE5;&#x4E0B;&#x76F4;&#x63A5;&#x91DD;&#x5C0D; <a href="http://www.python.org/dev/peps/pep-0342/" title="PEP342" target="_blank" rel="external">PEP342</a> &#x7684;&#x5404;&#x9805;&#x7528;&#x6CD5;, &#x4E00;&#x4E00;&#x505A;&#x500B;&#x8AAA;&#x660E;.<br><a href="http://www.python.org/dev/peps/pep-0255" title="PEP255" target="_blank" rel="external">PEP255</a> &#x4E2D;, yield &#x662F;&#x4E00;&#x500B; statement.<br><a href="http://www.python.org/dev/peps/pep-0342/" title="PEP342" target="_blank" rel="external">PEP342</a> &#x4E2D;, yield &#x662F;&#x4E00;&#x500B; expression, &#x56E0;&#x6B64;&#x5C07; yield expression &#x7684;&#x56DE;&#x50B3;&#x503C;&#x5FFD;&#x7565;&#x6389;&#x7576;&#x6210; yield statement &#x4F86;&#x8A0E;&#x8AD6;&#x65E2;&#x53EF;.  </p>
<p><a name="yield_fundamental"></a></p>
<h3 id="yield_&#x7684;&#x57FA;&#x672C;&#x904B;&#x4F5C;&#x539F;&#x7406;">yield &#x7684;&#x57FA;&#x672C;&#x904B;&#x4F5C;&#x539F;&#x7406;</h3>
<p>&#x9996;&#x5148;, &#x5148;&#x770B;&#x770B; Python &#x5982;&#x4F55;&#x770B;&#x5F85;&#x4E00;&#x500B;&#x5305;&#x542B;&#x6709; yield &#x8A9E;&#x6CD5;&#x7684; function [1]:</p>
<blockquote>
<p>A function which returns an iterator. It looks like a normal function except that it contains yield statements<br>for producing a series a values usable in a for-loop or that can be retrieved one at a time with the next() function.<br>Each yield temporarily suspends processing, remembering the location execution state<br>(including local variables and pending try-statements).<br>When the generator resumes, it picks-up where it left-off  (in contrast to functions which start fresh on every invocation).  </p>
</blockquote>
<p>&#x4E0A;&#x9762;&#x9019;&#x53E5;&#x8A71;, &#x6211;&#x5011;&#x53EF;&#x4EE5;&#x62C6;&#x6210;&#x5E7E;&#x500B;&#x90E8;&#x4EFD;&#x4F86;&#x7406;&#x89E3;:  </p>
<ol>
<li>&#x7576;&#x4E00;&#x500B; function &#x5167;&#x5305;&#x542B;&#x4E86; yield &#x8A9E;&#x6CD5;, &#x9019;&#x500B; function &#x5C31;&#x7A31;&#x70BA; generator.  </li>
<li>&#x9019;&#x500B; function (generator) &#x88AB;&#x547C;&#x53EB;&#x6642;, &#x56DE;&#x50B3;&#x4E00;&#x500B; iterator (generator object).  </li>
<li>iterator &#x5167;&#x57F7;&#x884C;&#x7684;&#x4EE3;&#x78BC;, &#x65E2;&#x70BA; function &#x5167;&#x5B9A;&#x7FA9;&#x7684;&#x4EE3;&#x78BC;.<br>&#x552F;&#x4E00;&#x7684;&#x5DEE;&#x7570;&#x662F;, &#x6BCF;&#x6B21;&#x547C;&#x53EB; next() &#x90FD;&#x6703;&#x5728; yield expression &#x8655; suspend (&#x5132;&#x5B58;&#x6574;&#x500B; context &#x7684;&#x8B8A;&#x6578;&#x72C0;&#x614B;)<br>&#x4E26;&#x4E14; return &#x5176; yield &#x7684; value &#x7D66; next() &#x7684; caller</li>
<li>&#x6BCF;&#x6B21;&#x547C;&#x53EB; next(), &#x90FD;&#x6703;&#x5F9E;&#x4E0A;&#x4E00;&#x6B21;&#x7D50;&#x675F;&#x7684;&#x5730;&#x65B9; resume (&#x6062;&#x5FA9;&#x6574;&#x500B; context &#x7684;&#x8B8A;&#x6578;&#x72C0;&#x614B;), &#x4E26;&#x7E7C;&#x7E8C;&#x57F7;&#x884C;&#x5230;&#x4E0B;&#x500B; yield &#x8655;</li>
<li>&#x82E5;&#x547C;&#x53EB; next() &#x6642;, &#x4EE3;&#x78BC;&#x4E2D;&#x5DF2;&#x7121; yield expression &#x53EF; suspend, &#x5247;&#x7522;&#x751F; StopIterator Exception  </li>
</ol>
<p>&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x78BC;, &#x9A57;&#x8B49;&#x4E86;&#x4E0A;&#x8FF0;&#x7684;&#x8AAA;&#x6CD5;:</p>
<pre><code><span class="comment"># generator_demo.py  </span>

<span class="comment"># 1. define a function (generator)</span>
<span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>              <span class="comment"># &#x7B2C;&#x4E00;&#x6B21;&#x547C;&#x53EB; next() &#x5C07;&#x65BC;&#x6B64;&#x958B;&#x59CB;&#x57F7;&#x884C;</span>
    <span class="keyword">yield</span> x              <span class="comment"># &#x7B2C;&#x4E00;&#x6B21; next() &#x547C;&#x53EB;&#x5F8C;, &#x5C07; suspend &#x65BC;&#x6B64;, &#x4E26;&#x56DE;&#x50B3; x</span>
    x += <span class="number">20</span>              <span class="comment"># &#x7B2C;&#x4E8C;&#x6B21;&#x547C;&#x53EB; next() &#x5C07;&#x65BC;&#x6B64;&#x958B;&#x59CB;&#x57F7;&#x884C;, &#x4FDD;&#x6709;&#x4E0A;&#x6B21;&#x57F7;&#x884C;&#x500B;&#x8B8A;&#x6578;&#x5167;&#x5BB9;&#x7684; context</span>
    <span class="keyword">yield</span> x              <span class="comment"># &#x7B2C;&#x4E8C;&#x6B21; next() &#x547C;&#x53EB;&#x5F8C;, &#x5C07; suspend &#x65BC;&#x6B64;, &#x4E26;&#x56DE;&#x50B3; x</span>
                         <span class="comment"># &#x7B2C;&#x4E09;&#x6B21;&#x547C;&#x53EB; next() &#x5C07;&#x89F8;&#x767C; StopIterator Exception</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    <span class="keyword">print</span> type(gen)      <span class="comment"># 1. gen   &#x578B;&#x5225;&#x70BA; &lt;type &apos;function&apos;&gt;, &#x63D0;&#x4F9B;&#x7522;&#x751F; generator(iterator) object</span>
    <span class="keyword">print</span> type(gen())    <span class="comment"># 2. gen() &#x578B;&#x5225;&#x70BA; &lt;type &apos;generator&apos;&gt;</span>
    gen_var = gen()      
    <span class="keyword">print</span> gen_var        <span class="comment"># gen_var &#x70BA;&#x4E00;&#x500B; &lt;generator object gen at 0x00DE8288&gt;</span>
    <span class="keyword">print</span> type(gen_var)  <span class="comment"># gen_var &#x578B;&#x5225;&#x70BA; &lt;type &apos;generator&apos;&gt;</span>
    <span class="keyword">print</span> gen_var.next() <span class="comment"># 3. 100</span>
    <span class="keyword">print</span> gen_var.next() <span class="comment"># 4. 120</span>
    <span class="keyword">print</span> gen_var.next() <span class="comment"># 5. raise StopIteratorException</span>

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main() 
</code></pre><p>Output:  </p>
<pre><code>&lt;<span class="class"><span class="keyword">type</span> &apos;<span class="title">function</span>&apos;&gt;</span>
&lt;<span class="class"><span class="keyword">type</span> &apos;<span class="title">generator</span>&apos;&gt;</span>
&lt;<span class="class"><span class="keyword">type</span> &apos;<span class="title">generator</span>&apos;&gt;</span>
&lt;generator <span class="keyword">object</span> gen at <span class="number">0x00DE82B0</span>&gt;
<span class="number">100</span>
<span class="number">120</span>
Traceback (most recent call last):
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">29</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">26</span>, <span class="keyword">in</span> main
StopIteration
</code></pre><p>&#x6B78;&#x7D0D;&#x4E0A;&#x8FF0;&#x5E7E;&#x9805;&#x91CD;&#x9EDE;:  </p>
<ul>
<li><strong>yield &#x57FA;&#x672C;&#x4E0A;&#x662F;&#x642D;&#x914D;&#x5728; function &#x5167;&#x90E8;&#x4F7F;&#x7528;&#x7684;</strong></li>
<li>&#x4F7F;&#x7528; yield &#x8A9E;&#x6CD5;&#x7684; function, &#x53C8;&#x7A31;&#x4E4B;&#x70BA; generator</li>
<li>generator &#x6240;&#x7522;&#x751F;&#x7684; generator object &#x662F;&#x4E00;&#x500B; iterator.</li>
<li>generator &#x6BCF;&#x6B21;&#x57F7;&#x884C;&#x7684; next() &#x4EE3;&#x78BC;, &#x5373;&#x70BA; function &#x5167;&#x90E8;&#x7684;&#x4EE3;&#x78BC;, &#x5DEE;&#x5225;&#x5728;&#x65BC;<ul>
<li>next() &#x57F7;&#x884C;&#x5230; yield &#x8655;&#x5373; suspend, &#x4E26;&#x56DE;&#x50B3; yield &#x7684; value &#x7D66; next() caller  </li>
<li>&#x6BCF;&#x6B21;&#x57F7;&#x884C; next() &#x5C07;&#x6703;&#x5F9E;&#x4E0A;&#x6B21; suspend &#x8655;, &#x7E7C;&#x7E8C; resume, &#x4E14;&#x4FDD;&#x6709;&#x4E0A;&#x6B21; context &#x5167;&#x7684;&#x8B8A;&#x6578;&#x72C0;&#x614B;</li>
</ul>
</li>
<li>&#x82E5;&#x547C;&#x53EB; next() &#x6642;, &#x4EE3;&#x78BC;&#x4E2D;&#x5DF2;&#x7121; yield expression &#x53EF; suspend, &#x5247;&#x7522;&#x751F; StopIterator Exception</li>
</ul>
<p><a name="yield_send"></a></p>
<h2 id="send(expression)_-_pass_a_value_to_generator">send(expression) - pass a value to generator</h2>
<p>&#x7406;&#x89E3;&#x5B8C; <a href="#yield_fundamental" title="&#x7684;&#x57FA;&#x672C;&#x904B;&#x4F5C;&#x539F;&#x7406;">yield &#x7684;&#x57FA;&#x672C;&#x904B;&#x4F5C;&#x539F;&#x7406;</a>, &#x5C31;&#x5F88;&#x597D;&#x7406;&#x89E3; send &#x9019;&#x500B; method &#x7684;&#x884C;&#x70BA;.<br>send(expression) &#x548C; next() &#x4E00;&#x6A23;, &#x662F; trigger iterator &#x7684;&#x57F7;&#x884C;, &#x76F4;&#x5230;&#x9047;&#x5230;&#x4E0B;&#x4E00;&#x500B; yield expression.<br>&#x5DEE;&#x7570;&#x5728;&#x65BC;:  </p>
<ul>
<li>send(expression) &#x662F; <a href="http://www.python.org/dev/peps/pep-0342/" title="Coroutines via Enhanced Generators" target="_blank" rel="external">PEP342</a> &#x63D0;&#x51FA;, &#x5728; Python 2.5 &#x5BE6;&#x73FE;, &#x7528;&#x4F86;&#x6307;&#x5B9A; yield expression &#x6240; evaluate &#x7684;&#x7D50;&#x679C;  </li>
<li>&#x9019;&#x4E5F;&#x662F;&#x70BA;&#x4F55;&#x5728; Python 2.5 &#x4E2D;, yield &#x5F9E; statement &#x8B8A;&#x66F4;&#x70BA; expression &#x7684;&#x539F;&#x56E0;&#x4E4B;&#x4E00;</li>
<li>&#x5728; Python 2.3, yield &#x9084;&#x662F;&#x4E00;&#x500B; statement  </li>
</ul>
<p>&#x4E0B;&#x5217;&#x4EE3;&#x78BC;&#x8AAA;&#x660E;&#x4E86;, send(expression) &#x5982;&#x4F55;&#x6307;&#x4EE4; yield expression &#x7684;&#x7D50;&#x679C;.</p>
<pre><code><span class="comment"># generator_send_demo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">gen2</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>                     <span class="comment"># &#x547C;&#x53EB; next() &#x5C07;&#x65BC;&#x6B64;&#x958B;&#x59CB;&#x57F7;&#x884C;</span>
    y = <span class="keyword">yield</span> x                 <span class="comment"># next() &#x547C;&#x53EB;&#x5F8C;, &#x5C07; suspend &#x65BC;&#x6B64;, &#x4E26;&#x56DE;&#x50B3; x</span>
                                <span class="comment"># &#x547C;&#x53EB; send(10) &#x5C07;&#x65BC;&#x6B64;&#x958B;&#x59CB;&#x57F7;&#x884C;, &#x4FDD;&#x6709;&#x4E0A;&#x6B21;&#x57F7;&#x884C;&#x500B;&#x8B8A;&#x6578;&#x5167;&#x5BB9;&#x7684; context,  </span>
                                <span class="comment"># &#x5C07; send &#x6307;&#x5B9A;&#x7684;&#x503C; assign &#x7D66; y</span>
    x += y                      <span class="comment"># send(10) &#x547C;&#x53EB;&#x5F8C;, &#x57F7;&#x884C;&#x6B64; statement, </span>
    y = <span class="keyword">yield</span> x                 <span class="comment"># send(10) &#x547C;&#x53EB;&#x5F8C;, &#x5C07; suspend &#x65BC;&#x6B64;, &#x4E26;&#x56DE;&#x50B3; x</span>
                                <span class="comment"># &#x547C;&#x53EB; send(20) &#x5C07;&#x65BC;&#x6B64;&#x958B;&#x59CB;&#x57F7;&#x884C;, &#x4FDD;&#x6709;&#x4E0A;&#x6B21;&#x57F7;&#x884C;&#x500B;&#x8B8A;&#x6578;&#x5167;&#x5BB9;&#x7684; context,   </span>
                                <span class="comment"># &#x5C07; send &#x6307;&#x5B9A;&#x7684;&#x503C; assign &#x7D66; y</span>
    x += y                      <span class="comment"># send(20) &#x547C;&#x53EB;&#x5F8C;, &#x57F7;&#x884C; statement,</span>
    <span class="keyword">yield</span> x                     <span class="comment"># send(20) &#x547C;&#x53EB;&#x5F8C;, &#x5C07; suspend &#x65BC;&#x6B64;, &#x4E26;&#x56DE;&#x50B3; x</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_var2 = gen2()           <span class="comment"># &#x7522;&#x751F;&#x4E00;&#x500B; generator object &#x5132;&#x5B58;&#x65BC; gen_var2</span>
    <span class="keyword">print</span> gen_var2.next()       <span class="comment"># the same result with calling gen_var2.send(None)</span>
    <span class="keyword">print</span> gen_var2.send(<span class="number">10</span>)     <span class="comment"># &#x57F7;&#x884C; gen_var2.send()</span>
    <span class="keyword">print</span> gen_var2.send(<span class="number">20</span>)     <span class="comment"># &#x57F7;&#x884C; gen_var2.send()</span>
    <span class="keyword">print</span> gen_var2.send(<span class="number">30</span>)     <span class="comment"># the same reslut with calling gen_var2.next(), </span>
                                <span class="comment"># raise StopIterator Exception</span>

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main() 
</code></pre><p>Output:  </p>
<pre><code>100
110
130
Traceback (most recent <span class="operator"><span class="keyword">call</span> <span class="keyword">last</span>):
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">49</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">35</span>, <span class="keyword">in</span> main
StopIteration</span>
</code></pre><p>&#x9019;&#x908A;&#x88DC;&#x5145;&#x5E7E;&#x500B;&#x91CD;&#x9EDE;:  </p>
<ul>
<li>&#x53EF;&#x5C07; y = yield x &#x770B;&#x6210;&#x53F3;&#x534A;&#x90E8;&#x8DDF;&#x5DE6;&#x534A;&#x90E8;&#x5169;&#x500B;&#x52D5;&#x4F5C;, suspend &#x7684;&#x6642;&#x5019;&#x57F7;&#x884C;&#x53F3;&#x534A;&#x90E8;, resume &#x7684;&#x6642;&#x5019;&#x624D;&#x57F7;&#x884C;&#x5DE6;&#x534A;&#x90E8;&#x7684; assign.  </li>
<li>&#x900F;&#x904E; generator object, &#x7B2C;&#x4E00;&#x6B21;&#x547C; iterate iterator &#x6642;, &#x53EA;&#x80FD;&#x4F7F;&#x7528; next() or send(None), &#x5169;&#x8005;&#x7B49;&#x50F9; </li>
</ul>
<p><a name="yield_throw"></a></p>
<h2 id="throw(type[,value[,traceback]])_-_raise_exception_inside_generator">throw(type[,value[,traceback]]) - raise exception inside generator</h2>
<p><a href="http://www.python.org/dev/peps/pep-0342/" title="Coroutines via Enhanced Generators" target="_blank" rel="external">PEP342</a> &#x63D0;&#x5230;, &#x60F3;&#x5728; generator &#x4E2D;, suspend &#x5728; iterator &#x7684;&#x9EDE;, &#x7522;&#x751F; exception, &#x53EF;&#x4EE5;&#x900F;&#x904E; throw &#x4F86;&#x9054;&#x6210;.  </p>
<p>&#x53C3;&#x8003;&#x4E0B;&#x5217;&#x4EE3;&#x78BC;:  </p>
<pre><code><span class="comment"># generator_throw_demo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">gen3</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>                              <span class="comment"># &#x547C;&#x53EB; gen_var3.send(None) &#x5C07;&#x7531;&#x6B64;&#x958B;&#x59CB;&#x57F7;&#x884C;</span>
    <span class="keyword">try</span>:
        y = <span class="keyword">yield</span> x                      <span class="comment"># gen_var3.send(None) &#x547C;&#x53EB;&#x5F8C;, &#x5C07; suspend &#x65BC;&#x6B64;, &#x4E26;&#x56DE;&#x50B3; x</span>
                                         <span class="comment"># throw GeneratorExit &#x767C;&#x751F;&#x65BC;&#x6B64;</span>
        x += y
        y = <span class="keyword">yield</span> x
        x += y
        <span class="keyword">yield</span> x
<span class="keyword">except</span>:                                  <span class="comment"># &#x8655;&#x7406;&#x6240;&#x6709;&#x578B;&#x614B;&#x7684; exception, &#x5305;&#x542B; GeneratorExit Exception</span>
    <span class="keyword">pass</span>                                 <span class="comment"># pass GeneratorExit Exception &#x7684;&#x8655;&#x7406;</span>
                                         <span class="comment"># &#x7531;&#x65BC;&#x6C92;&#x6709; yield expression &#x4E86;, </span>
                                         <span class="comment"># &#x56E0;&#x6B64; raise StopIterator Exception</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_var3 = gen3()                    <span class="comment"># &#x7522;&#x751F;&#x4E00;&#x500B; generator object &#x5132;&#x5B58;&#x65BC; gen_var3</span>
    <span class="keyword">print</span> gen_var3.send(<span class="keyword">None</span>)            <span class="comment"># the same result with calling gen_var2.next()</span>
    <span class="keyword">print</span> gen_var3.throw(GeneratorExit)  <span class="comment"># &#x5728; generator &#x5167;&#x90E8;&#x7522;&#x751F;&#x4E00;&#x500B; GeneratorExit Exception</span>

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main()
</code></pre><p>Output:  </p>
<pre><code>100
Traceback (most recent <span class="operator"><span class="keyword">call</span> <span class="keyword">last</span>):
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">47</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">33</span>, <span class="keyword">in</span> main
StopIteration</span>
</code></pre><p>&#x6B64;&#x5916;, &#x7531;&#x5916;&#x90E8; trigger generator &#x5167;&#x7684; exception &#x5F8C;, &#x4ECD;&#x7136;&#x53EF;&#x5728;&#x5167;&#x90E8;&#x7684; exception handler &#x642D;&#x914D; yield &#x7E7C;&#x7E8C;&#x505A;&#x8655;&#x7406;.  </p>
<p>&#x53C3;&#x8003;&#x4E0B;&#x5217;&#x4EE3;&#x78BC;:  </p>
<pre><code><span class="comment"># generator_throw_demo2.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">gen3</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>                               <span class="comment"># &#x7B2C;&#x4E00;&#x6B21; gen_var3.send(None) &#x5C07;&#x7531;&#x6B64;&#x958B;&#x59CB;&#x57F7;&#x884C;</span>
    <span class="keyword">try</span>:
        y = <span class="keyword">yield</span> x                       <span class="comment"># &#x7B2C;&#x4E00;&#x6B21; gen_var3.send(None) &#x547C;&#x53EB;&#x5F8C;, &#x5C07; suspend &#x65BC;&#x6B64;,  </span>
                                          <span class="comment"># &#x4E26;&#x56DE;&#x50B3; x</span>
                                          <span class="comment"># throw GeneratorExit &#x767C;&#x751F;&#x65BC;&#x6B64;</span>
        x += y
        y = <span class="keyword">yield</span> x
        x += y
        <span class="keyword">yield</span> x
<span class="keyword">except</span>:                                   <span class="comment"># &#x8655;&#x7406;&#x6240;&#x6709;&#x578B;&#x614B;&#x7684; exception, &#x5305;&#x542B; GeneratorExit Exception</span>
    x +=<span class="number">10</span>                                <span class="comment"># throw GeneratorExit &#x767C;&#x751F;&#x5F8C;, &#x57F7;&#x884C;&#x6B64; statement </span>
    <span class="keyword">yield</span> x                               <span class="comment"># throw GeneratorExit &#x767C;&#x751F;&#x5F8C;, &#x5C07; suspend &#x65BC;&#x6B64;, &#x4E26;&#x56DE;&#x50B3; x</span>
                                          <span class="comment"># &#x7B2C;&#x4E8C;&#x6B21; gen_var3.send(None) &#x7531;&#x6B64;&#x958B;&#x59CB;&#x57F7;&#x884C;</span>
    x +=<span class="number">20</span>                                <span class="comment"># &#x7B2C;&#x4E8C;&#x6B21; gen_var3.send(None) &#x767C;&#x751F;&#x5F8C;, &#x57F7;&#x884C;&#x6B64; statement</span>
    <span class="keyword">yield</span> x                               <span class="comment"># &#x7B2C;&#x4E8C;&#x6B21; gen_var3.send(None) &#x767C;&#x751F;&#x5F8C;, &#x5C07; suspend &#x65BC;&#x6B64;, </span>
                                          <span class="comment"># &#x4E26;&#x56DE;&#x50B3; x</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_var3 = gen3()                     <span class="comment"># &#x7522;&#x751F;&#x4E00;&#x500B; generator object &#x5132;&#x5B58;&#x65BC; gen_var3</span>
    <span class="keyword">print</span> gen_var3.send(<span class="keyword">None</span>)             <span class="comment"># the same result with calling gen_var2.next()</span>
    <span class="keyword">print</span> gen_var3.throw(GeneratorExit)   <span class="comment"># &#x5728; generator &#x5167;&#x90E8;&#x7522;&#x751F;&#x4E00;&#x500B; GeneratorExit Exception</span>
    <span class="keyword">print</span> gen_var3.send(<span class="keyword">None</span>)             <span class="comment"># the same result with calling gen_var2.next()</span>
    <span class="keyword">print</span> gen_var3.send(<span class="keyword">None</span>)             <span class="comment"># the same result with calling gen_var2.next()</span>
</code></pre><p>Output:  </p>
<pre><code>100
110
130
Traceback (most recent <span class="operator"><span class="keyword">call</span> <span class="keyword">last</span>):
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">51</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">37</span>, <span class="keyword">in</span> main
StopIteration</span>
</code></pre><p><a name="yield_close"></a></p>
<h2 id="close()_-_terminate_the_generator">close() - terminate the generator</h2>
<p><a href="http://www.python.org/dev/peps/pep-0342/" title="Coroutines via Enhanced Generators" target="_blank" rel="external">PEP342</a> &#x63D0;&#x5230;, &#x7576; generator object &#x4E0D;&#x518D;&#x4F7F;&#x7528;&#x6642;, &#x53EF;&#x4EE5;&#x547C;&#x53EB; close() method, &#x4E4B;&#x5F8C;&#x5982;&#x679C;&#x518D;&#x547C;&#x53EB; next() method &#x5247;&#x6703; raise StopIterator Exception.  </p>
<p>&#x53C3;&#x8003;&#x4E0B;&#x9762;&#x4EE3;&#x78BC;:  </p>
<pre><code><span class="comment"># generator_close_demo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">gen2</span><span class="params">()</span>:</span>
    x = <span class="number">100</span>
    y = <span class="keyword">yield</span> x
    x += y
    y = <span class="keyword">yield</span> x
    x += y
    <span class="keyword">yield</span> x

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_var2 = gen2()
    <span class="keyword">print</span> gen_var2.send(<span class="keyword">None</span>)
    gen_var2.close()
    <span class="keyword">print</span> gen_var2.send(<span class="number">10</span>)     <span class="comment"># raise StopIterator Exception, if next() is called after close()</span>
    <span class="keyword">print</span> gen_var2.send(<span class="number">20</span>)

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main()
</code></pre><p>Output:</p>
<pre><code>100
Traceback (most recent <span class="operator"><span class="keyword">call</span> <span class="keyword">last</span>):
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">46</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;
  File <span class="string">&quot;&lt;module1&gt;&quot;</span>, line <span class="number">31</span>, <span class="keyword">in</span> main
StopIteration</span>
</code></pre><p><a name="yield_generator_exp"></a></p>
<h2 id="generator_expression_-_&#x5FEB;&#x901F;&#x7522;&#x751F;&#x4E00;&#x500B;_generator_object">generator expression - &#x5FEB;&#x901F;&#x7522;&#x751F;&#x4E00;&#x500B; generator object</h2>
<p>&#x9664;&#x4E86;&#x900F;&#x904E;&#x5B9A;&#x7FA9;&#x5305;&#x542B; yield expression &#x7684; function &#x5916;, &#x53EF;&#x4EE5;&#x900F;&#x904E; Python &#x8A9E;&#x6CD5;&#x5FEB;&#x901F;&#x7684;&#x7522;&#x751F; generator object.<br>&#x5F15;&#x8FF0; <a href="http://docs.python.org/2.7/glossary.html#term-generator" title="generator expression" target="_blank" rel="external">Python Glossary</a> &#x7684;&#x5B9A;&#x7FA9;:</p>
<blockquote>
<p>An expression that returns an iterator. It looks like a normal expression followed by a for expression defining a loop variable, range, and an optional if expression</p>
</blockquote>
<p>&#x7BC4;&#x4F8B;&#x5982;&#x4E0B;:</p>
<pre><code><span class="comment"># generator_expression_demo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    gen_exp = ((i+<span class="number">1</span>)*(i+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))  <span class="comment"># &#x7522;&#x751F;&#x4E00;&#x500B; generator object</span>

    <span class="keyword">print</span> type(gen_exp)
    <span class="keyword">print</span> gen_exp                               <span class="comment"># &#x548C; generator &#x7522;&#x751F;&#x51FA;&#x4F86;&#x7684; object &#x5370;&#x51FA;&#x4F86;&#x7684;&#x8CC7;&#x8A0A;&#x4E0D;&#x592A;&#x4E00;&#x6A23;</span>

    <span class="keyword">for</span> x <span class="keyword">in</span> gen_exp:
        <span class="keyword">print</span> x

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main()
</code></pre><p>Output:</p>
<pre><code>&lt;<span class="keyword">type</span> <span class="string">&apos;generator&apos;</span>&gt;
&lt;generator <span class="class"><span class="keyword">object</span> &lt;<span class="title">genexpr</span>&gt; <span class="title">at</span> 0<span class="title">x00DE82B0</span>&gt;</span>
<span class="number">1</span>
<span class="number">4</span>
<span class="number">9</span>
<span class="number">16</span>
<span class="number">25</span>
<span class="number">36</span>
<span class="number">49</span>
<span class="number">64</span>
<span class="number">81</span>
<span class="number">100</span>
</code></pre><p>&#x9019;&#x88E1;&#x6709;&#x4E00;&#x9EDE;&#x8981;&#x6CE8;&#x610F;, generator expression &#x7522;&#x751F;&#x51FA;&#x4F86;&#x7684; object &#x8207; generator &#x7522;&#x751F;&#x51FA;&#x4F86;&#x7684; object print &#x51FA;&#x4F86;&#x7684;&#x7D50;&#x679C;&#x6709;&#x4E9B;&#x4E0D;&#x540C;.  </p>
<ul>
<li>print generator expression &#x7522;&#x751F;&#x7684; object &#x6703;&#x5370;&#x51FA; &lt;generator object <strong>&lt;genexpr&gt;</strong> at 0x00DE82B0&gt;</li>
<li>print generator &#x7522;&#x751F;&#x7684; object &#x6703;&#x5370;&#x51FA; &lt;generator object <strong>gen</strong> at 0x00DE82B0&gt;</li>
</ul>
<p><a name="yield_reference"></a></p>
<h2 id="Reference:">Reference:</h2>
<ul>
<li>[1] <a href="http://docs.python.org/2.7/glossary.html#term-generator" target="_blank" rel="external">Definition for generator in python</a></li>
<li>[2] <a href="http://blog.donews.com/limodou/archive/2006/09/04/1028747.aspx" target="_blank" rel="external">limodou&#x7684;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</a></li>
<li>[3] <a href="http://dhcmrlchtdj.github.io/sia/post/2012-11-20/python_yield.html" target="_blank" rel="external">python yield &#x7814;&#x7A76;</a></li>
<li>[4] <a href="http://www.python.org/dev/peps/pep-0255/" title="Simple Generators" target="_blank" rel="external">PEP255</a></li>
<li>[5] <a href="http://www.python.org/dev/peps/pep-0289/" title="Generator Expressions" target="_blank" rel="external">PEP289</a></li>
<li>[6] <a href="http://www.python.org/dev/peps/pep-0342/" title="Coroutines via Enhanced Generators" target="_blank" rel="external">PEP342</a></li>
<li>[7] <a href="http://www.jb51.net/article/15717.htm" target="_blank" rel="external">Python &#x6DF1;&#x5165;&#x7406;&#x89E3;yield</a></li>
</ul>
<hr>
<p><a name="others"></a></p>
<h1 id="&#x5176;&#x5B83;"><em>&#x5176;&#x5B83;</em></h1>
<p><a name="lambda_exp"></a></p>
<h2 id="Lambda_Expression">Lambda Expression</h2>
<p>Python &#x4E2D;&#x4F7F;&#x7528; Lambda Expression &#x7684;&#x8A9E;&#x6CD5;&#x53EF;&#x4EE5;&#x4E00;&#x500B;&#x5EFA;&#x7ACB; Annonymous Function </p>
<p>Ex:</p>
<pre><code>f = <span class="keyword">lambda</span> x: x ** x
print(f(<span class="number">1</span>))
print(f(<span class="number">2</span>))
print(f(<span class="number">3</span>))
print(f(<span class="number">4</span>))
print(f(<span class="number">5</span>))

g = <span class="keyword">lambda</span> x, y: x * y
print(g(<span class="number">1</span>, <span class="number">6</span>))
print(g(<span class="number">2</span>, <span class="number">7</span>))
print(g(<span class="number">3</span>, <span class="number">8</span>))
print(g(<span class="number">4</span>, <span class="number">9</span>))
print(g(<span class="number">5</span>, <span class="number">10</span>))
</code></pre><p>Output:</p>
<pre><code>1
4
27
256
3125
6
14
24
36
50
</code></pre><p><a name="built_in_map"></a></p>
<h2 id="Built-in_Function_map">Built-in Function map</h2>
<p>&#x5728;&#x63A2;&#x8A0E; map function &#x4E4B;&#x524D;, &#x8B93;&#x6211;&#x5011;&#x5148;&#x56DE;&#x61B6;&#x4E00;&#x4E0B;&#x570B;&#x4E2D;&#x6642;&#x5019;&#x5B78;&#x904E;&#x7684;&#x6578;&#x5B78;&#x51FD;&#x6578;,<br>&#x5047;&#x8A2D;&#x51FD;&#x6578; f(x,y,..,z) &#x8F38;&#x5165;&#x4E00;&#x7D44; x1, y1, &#x2026;, z1 &#x53C3;&#x6578;&#x5F8C;, &#x53EF;&#x5F97;&#x5230;&#x4E00;&#x500B;&#x7D50;&#x679C; r1,<br>&#x73FE;&#x5728;&#x6211;&#x5011;&#x6E96;&#x5099; n &#x7D44;&#x8CC7;&#x6599; [(x1, y1, &#x2026;, z1), (x2, y2, &#x2026;, z2), &#x2026;, (xn, yn, &#x2026;, zn)]<br>&#x4F9D;&#x5E8F;&#x8F38;&#x5165;&#x7D66;&#x51FD;&#x6578; f(x,y,&#x2026;,z) &#x5F8C;,<br>&#x53EF;&#x5F97;&#x5230; n &#x500B;&#x7D50;&#x679C; [r1,r2, &#x2026;, rn], &#x5982;&#x4E0B;&#x5716;&#x6240;&#x793A;:</p>
<p><img src="http://MutsuGhost1.github.io/image/python_map_function.PNG" alt=""></p>
<p>&#x4E8B;&#x5BE6;&#x4E0A; map function &#x5C31;&#x662F;&#x57F7;&#x884C;&#x985E;&#x4F3C;&#x9019;&#x6A23;&#x7684;&#x6982;&#x5FF5;. map function &#x6709;&#x5169;&#x7D44; input &#x53C3;&#x6578;:  </p>
<ol>
<li>function (&#x5C0D;&#x61C9;&#x5230;&#x4E0A;&#x8FF0;&#x7684;&#x51FD;&#x6578; f)  </li>
<li>&#x8F38;&#x5165; function &#x7684;&#x53C3;&#x6578;, &#x53C3;&#x6578;&#x500B;&#x6578;&#x5FC5;&#x9808;&#x8207; function &#x53C3;&#x6578;&#x5339;&#x914D;</li>
</ol>
<p>&#x4E0B;&#x5217;&#x4EE3;&#x78BC;&#x5C55;&#x793A; map function &#x7684;&#x4F7F;&#x7528;&#x65B9;&#x6CD5;:</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,b,c)</span>:</span>
    <span class="keyword">return</span> a*b*c

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    lista = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]
    listb = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]
    listc = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]
    <span class="keyword">print</span> map(f, lista, listb, listc)
</code></pre><p>Output:  </p>
<pre><code>[<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>]
</code></pre><p>&#x6709;&#x4E00;&#x9EDE;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x4E8B;&#x60C5;, &#x7576;&#x53C3;&#x6578;&#x662F;&#x4E00;&#x500B; sequence &#x6642;, <strong>&#x5404;&#x500B; sequence &#x7684;&#x53C3;&#x6578;&#x4E0D;&#x4E00;&#x81F4;, &#x5C07;&#x53D6;&#x6700;&#x9577;&#x7684;&#x70BA;&#x4E3B;, &#x4E0D;&#x8DB3;&#x88DC; None</strong>.<br>&#x6700;&#x5F8C;, &#x9644;&#x4E0A; <a href="http://docs.python.org/2/library/functions.html#map" target="_blank" rel="external">Python &#x6587;&#x4EF6;</a>&#x4E0A;&#x7684;&#x8AAA;&#x660E;:  </p>
<p><em>map(function, iterable, &#x2026;)</em>  </p>
<blockquote>
<p>Apply function to every item of iterable and return a list of the results.<br>If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. <strong>If one iterable is shorter than another it is assumed to be extended with None items</strong>. <strong>If function is None, the identity function is assumed</strong>; if there are multiple arguments, map() returns a list consisting of tuples containing the corresponding items from all iterables (a kind of transpose operation). The iterable arguments may be a sequence or any iterable object; <strong>the result is always a list</strong>.</p>
</blockquote>
<p><a name="built_in_reduce"></a></p>
<h2 id="Built-in_Function_reduce">Built-in Function reduce</h2>
<blockquote>
<p>Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value</p>
</blockquote>
<p>Reduce &#x7684; Pseudo Code, &#x985E;&#x4F3C;&#x4E0B;&#x9762;&#x9019;&#x500B;&#x7BC4;&#x4F8B;:</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">reduce</span><span class="params">(function, iterable, initializer=None)</span>:</span>
    it = iter(iterable)

    <span class="keyword">if</span> initializer <span class="keyword">is</span> <span class="keyword">None</span>:
    <span class="keyword">try</span>:
        initializer = next(it)
    <span class="keyword">except</span> StopIteration:
        <span class="keyword">raise</span> TypeError(<span class="string">&apos;reduce() of empty sequence with no initial value&apos;</span>)

    accum_value = initializer
    <span class="keyword">for</span> x <span class="keyword">in</span> it:
        accum_value = function(accum_value, x)
    <span class="keyword">return</span> accum_value
</code></pre><p>Ex:  </p>
<ul>
<li>reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5)</li>
</ul>
<p><a name="built_in_filter"></a></p>
<h2 id="Built-in_Function_filter">Built-in Function filter</h2>
<blockquote>
<p>Construct a list from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list. I<strong>f function is None, the identity function is assumed</strong>, that is, all elements of iterable that are false are removed.</p>
</blockquote>
<p>Ex:  </p>
<ul>
<li><strong>filter(function, iterable)</strong> is equivalent to <strong>[item for item in iterable if function(item)]</strong></li>
</ul>
<p><a name="built_in_zip"></a></p>
<h2 id="Built-in_Function_zip">Built-in Function zip</h2>
<p>zip function &#x505A;&#x7684;&#x4E8B;&#x60C5;, &#x5982;&#x4E0B;&#x5716;:</p>
<p><img src="http://MutsuGhost1.github.io/image/python_zip_function.PNG" alt=""></p>
<p>Ex:</p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]
<span class="prompt">&gt;&gt;&gt; </span>b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]
<span class="prompt">&gt;&gt;&gt; </span>c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]      <span class="comment"># &#x4EE5;&#x77ED;&#x7684;&#x70BA;&#x4E3B;</span>
<span class="prompt">&gt;&gt;&gt; </span>zipped = zip(a,b)
[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]
<span class="prompt">&gt;&gt;&gt; </span>zip(a,c)
[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]
<span class="prompt">&gt;&gt;&gt; </span>zip(*zipped)         <span class="comment"># unzip &#x56DE;&#x539F;&#x4F86;&#x6A21;&#x6A23;</span>
[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]
</code></pre>]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Python/" term="Python"/>
    <category scheme="http://mutsughost1.github.io/tags/Study-Group/" term="Study Group"/>
    <category scheme="http://mutsughost1.github.io/categories/Software/" term="Software"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[About This Blog]]></title>
    <link href="http://mutsughost1.github.io/2013/09/29/about-this-blog/"/>
    <id>http://mutsughost1.github.io/2013/09/29/about-this-blog/</id>
    <published>2013-09-29T11:23:42.000Z</published>
    <updated>2014-06-01T20:53:04.000Z</updated>
    <content type="html"><![CDATA[<p>&#x9019;&#x500B; blog &#x662F;&#x4F7F;&#x7528; <a href="http://zespia.tw/hexo/" title="hexo" target="_blank" rel="external">hexo</a> &#x9019;&#x5957;&#x8EDF;&#x9AD4;&#x7522;&#x751F;&#x7684;.<br>&#x4E3B;&#x8981;&#x53C3;&#x8003;&#x4E86;&#x4EE5;&#x4E0B;&#x9023;&#x7D50;:<br><a id="more"></a></p>
<ol>
<li><a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">hexo &#x7CFB;&#x5217;&#x6559;&#x7A0B;</a>  </li>
<li><a href="http://code.kpman.cc/2013/04/28/%E5%AE%A2%E8%A3%BD%E5%8C%96hexo-light-theme/" target="_blank" rel="external">&#x81EA;&#x8A02; RSS &#x8207;&#x65B0;&#x589E; Disqus &#x7559;&#x8A00;&#x677F;</a>  <ul>
<li><a href="http://www.digitalhubinc.com/2013/06/Disqus-Various-Widget-Code-for-Blogger-and-Wordpress-Blog.html#.UkgNLtKBlTo" title="Combination Widget &#x5DF2;&#x7D93;&#x4E0D;&#x652F;&#x63F4;&#x4E86;&#x5594;!" target="_blank" rel="external">Disqus Widget &#x8A9E;&#x6CD5;&#x53C3;&#x8003;</a>  </li>
</ul>
</li>
<li><a href="http://www.authormedia.com/how-to-add-a-twitter-widget-to-your-sidebar/" target="_blank" rel="external">&#x65B0;&#x589E; Twitter Widget</a>  </li>
<li><a href="http://zipperary.com/2013/06/02/hexo-guide-5/" target="_blank" rel="external">&#x7522;&#x751F; SiteMap</a></li>
</ol>
<p>&#x6B64;&#x5916;, &#x70BA;&#x4E86;&#x8B93; Website &#x80FD;&#x5920;&#x5229;&#x7528; Google &#x505A;&#x7AD9;&#x5167;&#x641C;&#x5C0B;  </p>
<ol>
<li><a href="https://www.google.com/webmasters/tools/home?hl=zh-TW" target="_blank" rel="external">&#x5230; Google &#x8A3B;&#x518A;&#x7DB2;&#x7AD9;</a>  </li>
<li><a href="http://tosian.blogspot.tw/2008/04/google-google-sitemap.html" target="_blank" rel="external">&#x5C07; SiteMap &#x4E0A;&#x50B3;&#x5230; Google </a>  </li>
</ol>
<p>&#x88FD;&#x4F5C;&#x81EA;&#x5DF1;&#x7684; Avatar  </p>
<ul>
<li><a href="https://en.gravatar.com/" target="_blank" rel="external">Gravatar</a>  </li>
</ul>
<p>&#x64B0;&#x5BEB; Markdown &#x6587;&#x4EF6;&#x4F7F;&#x7528;&#x7684; Editor</p>
<ul>
<li><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a></li>
</ul>
]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Blog/" term="Blog"/>
    <category scheme="http://mutsughost1.github.io/categories/Software/" term="Software"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Python OOP Exception]]></title>
    <link href="http://mutsughost1.github.io/2013/09/27/python-oop-exception/"/>
    <id>http://mutsughost1.github.io/2013/09/27/python-oop-exception/</id>
    <published>2013-09-27T06:55:04.000Z</published>
    <updated>2014-06-01T21:11:07.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Python OOP</li>
<li>Constructor/Destructor</li>
<li>Class/Instance Members</li>
<li>Access Control in Python OOP</li>
<li>Inheritance</li>
<li>Polymorphism</li>
<li>Operator Overloading</li>
<li>Function Overloading</li>
<li>Object Types in Python</li>
<li>Check relationship between class and instance</li>
</ul>
<p><a id="more"></a></p>
<hr>
<h1 id="Python_OOP">Python OOP</h1>
<p>Python &#x8A9E;&#x8A00;, &#x672C;&#x8EAB;&#x4E5F;&#x652F;&#x63F4; <strong>O</strong>bject <strong>O</strong>riented <strong>P</strong>rogramming &#x9019;&#x6A23;&#x7684; Programming Pradigm.<br>&#x8A9E;&#x6CD5;&#x4E0A;, &#x662F;&#x63A1;&#x53D6;&#x985E;&#x4F3C; C++ &#x8207; Modula-3 &#x7684;&#x8A9E;&#x6CD5;.  </p>
<p>&#x4E00;&#x500B;&#x6700;&#x7C21;&#x55AE;&#x7684; class definition &#x5982;&#x4E0B;&#xFF1A;</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">oldStyle</span>:</span>
    <span class="keyword">pass</span>
</code></pre><p>&#x8A9E;&#x6CD5;&#x4E0A;, class definition &#x53EF;&#x4EE5;&#x5BEB;&#x6210;:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="type">DerivedClassName</span><span class="container">(<span class="type">BaseClass1</span>[,<span class="type">BaseClass2</span>[,&#x2026;]])</span>:
    statement1
    &#x2026;
    statementN</span>
</code></pre><p>&#x5176;&#x4E2D;&#x7684; statement1 &#x2026; statementN &#x53EF;&#x4EE5;&#x662F;:</p>
<ul>
<li>Data memeber definition</li>
<li>Member function definition</li>
<li>Memeber class definition</li>
</ul>
<p>&#x7576; import module &#x6642;, python interpret &#x5230;&#x4E00;&#x500B; class definition &#x6642;,<br>&#x5B83;&#x6703;&#x5C07; class &#x5167;&#x76F8;&#x95DC;&#x7684; definition &#x90FD;&#x5B9A;&#x7FA9;&#x5728;&#x6B64; class &#x6240;&#x5EFA;&#x7ACB;&#x7684; namespace &#x5167;.  </p>
<p><strong>New Style Class v.s. Old Style Class</strong>  </p>
<ul>
<li>Python 2.2 &#x4E4B;&#x524D;, type &#x548C; class &#x662F;&#x4E0D;&#x540C;&#x7684;<ul>
<li>type (list, tuple, dict &#x2026; etc)</li>
<li>class</li>
</ul>
</li>
<li>Python 2.2 Unifying type and class<ul>
<li>The obvious change is built-in types can be used to as base class</li>
<li>&#x6C92;&#x6709;&#x660E;&#x78BA;&#x7E7C;&#x627F;&#x5176;&#x4ED6; class &#x7684; class definition, &#x7A31;&#x70BA; Old Style Class</li>
<li>Python 3 &#x5F8C;, &#x6C92;&#x6709;&#x660E;&#x78BA;&#x7E7C;&#x627F; class &#x5C07;&#x6703;&#x8996;&#x70BA; default &#x7E7C;&#x627F; object</li>
</ul>
</li>
<li>Reference: <a href="http://www.python.org/download/releases/2.2.3/descrintro/" title="&#x8AAA;&#x660E; Python 2.2 &#x5F8C;, &#x6574;&#x5408; type and class &#x7684;&#x6587;&#x7AE0;" target="_blank" rel="external">http://www.python.org/download/releases/2.2.3/descrintro/</a>  </li>
</ul>
<p>Ex:  </p>
<pre><code><span class="comment"># define a old style class in python 2.x</span>
<span class="class"><span class="keyword">class</span> <span class="title">oldStyleClass</span>:</span>
<span class="keyword">pass</span>
<span class="comment"># define a new style class in python 2.x</span>
<span class="class"><span class="keyword">class</span> <span class="title">newStyleClass</span> <span class="params">(object)</span>:</span>
<span class="keyword">pass</span>
</code></pre><hr>
<h1 id="Constructor/Destructor">Constructor/Destructor</h1>
<p>&#x5148;&#x524D;&#x63D0;&#x5230;, &#x5B9A;&#x4E00;&#x500B;&#x6700;&#x7C21;&#x55AE;&#x7684; new style class, &#x5982;&#x4E0B;:</p>
<pre><code><span class="comment">#define a simplest class named &quot;Employee&quot;</span>
<span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
    <span class="keyword">pass</span>
</code></pre><p>&#x5047;&#x8A2D;&#x6211;&#x5011;&#x8981;&#x65B0;&#x589E;&#x4E00;&#x500B;&#x529F;&#x80FD;, &#x4F86;&#x66FF; Employee &#x4F86;&#x7D00;&#x9304;, &#x76EE;&#x524D; instance of Employee &#x7684;&#x6709;&#x6548;&#x500B;&#x6578;.<br>&#x53EF;&#x4EE5;&#x900F;&#x904E;&#x65B0;&#x589E; Constructor &amp; Destructor &#x52A0;&#x4E0A;&#x4E00;&#x500B; class variable &#x4F86;&#x5BE6;&#x73FE;, &#x5177;&#x9AD4;&#x5982;&#x4E0B;:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
    empCount = <span class="number">0</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>
        Employee.empCount += <span class="number">1</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        Employee.empCount -= <span class="number">1</span>
</code></pre><p>&#x4E5F;&#x8A31;&#x6709;&#x4EBA;&#x6703;&#x554F;, &#x5728;&#x6709; GC &#x6A5F;&#x5236;&#x7684;&#x8A9E;&#x8A00;&#x4E2D;, Destructor &#x5B58;&#x5728;&#x7684;&#x76EE;&#x7684;&#x662F;?<br>&#x901A;&#x5E38; Destructor &#x7684;&#x5B58;&#x5728;, &#x5C31;&#x662F;&#x8B93; Object &#x80FD;&#x63D0;&#x65E9;&#x91CB;&#x653E;&#x5360;&#x7528;&#x7684;&#x8CC7;&#x6E90;.   </p>
<hr>
<h1 id="Class/Instance_Memebers">Class/Instance Memebers</h1>
<p>&#x63A5;&#x4E0B;&#x4F86;, &#x6211;&#x5011;&#x60F3;&#x66FF; Class &#x52A0;&#x4E0A;&#x984D;&#x5916;&#x7684; Memebers, &#x5305;&#x542B;&#x4E86;:</p>
<ul>
<li>Instance Variable<ul>
<li>&#x7528;&#x4F86;&#x8868;&#x793A; instance of Employee &#x7684;&#x59D3;&#x540D;, &#x547D;&#x540D;&#x70BA; name, &#x9810;&#x8A2D;&#x70BA; &#x201C;anonymous&#x201D; </li>
<li>&#x7528;&#x4F86;&#x8A18;&#x9304;&#x5404;&#x500B; instance of Employee &#x7684;&#x57FA;&#x672C;&#x85AA;&#x8CC7;, &#x547D;&#x540D;&#x70BA; base_salary, &#x9810;&#x8A2D;&#x70BA; 1000</li>
</ul>
</li>
<li>Static Method<ul>
<li>&#x5B9A;&#x7FA9;&#x4E00;&#x500B; static method &#x80FD;&#x5920;&#x5370;&#x51FA;&#x76EE;&#x524D; # of instance of Employee, &#x547D;&#x540D;&#x70BA; EmployeeCount </li>
</ul>
</li>
<li>Instance Method<ul>
<li>&#x5B9A;&#x7FA9;&#x4E00;&#x500B; instance method, &#x80FD;&#x5920;&#x53D6;&#x5F97;&#x76EE;&#x524D; instance of Employee &#x7684;&#x7E3D;&#x85AA;&#x8CC7;, &#x547D;&#x540D;&#x70BA; getSalary </li>
</ul>
</li>
</ul>
<p>&#x5177;&#x9AD4;&#x4EE3;&#x78BC;&#x5982;&#x4E0B;:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
    empCount = <span class="number">0</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">&quot;anonymous&quot;</span>, base_salary=<span class="number">1000</span>)</span>:</span>
        Employee.empCount = <span class="number">0</span>
        self.name = name
        self.base_salary = base_salary

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        Employee.empCount = <span class="number">0</span>

    <span class="decorator">@staticmethod</span>
    <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
        <span class="keyword">print</span> <span class="string">&quot;Employee Count:&quot;</span> + str(Employee.empCount)

    <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.base_salary
</code></pre><p>&#x5F9E;&#x4E0A;&#x5217;&#x4EE3;&#x78BC;, &#x53EF;&#x4EE5;&#x6B78;&#x7D0D;&#x51FA;&#x4EE5;&#x4E0B;&#x5E7E;&#x4EF6;&#x4E8B;:</p>
<ul>
<li>&#x5B9A;&#x7FA9;&#x5728; class &#x5167;&#x90E8;, &#x975E; method &#x5167;&#x90E8;&#x7684;&#x8B8A;&#x6578;, &#x8996;&#x70BA; class variable</li>
<li>&#x5B9A;&#x7FA9;&#x5728; class &#x5167;&#x90E8;&#x7684; method, &#x9810;&#x8A2D;&#x90FD;&#x662F; instance method, &#x7B2C;&#x4E00;&#x500B;&#x53C3;&#x6578;&#x90FD;&#x662F; reference to the instance, &#x7FD2;&#x6163;&#x4E0A;&#x547D;&#x540D;&#x70BA; self</li>
<li>&#x901A;&#x5E38; instance variable &#x90FD;&#x76F4;&#x63A5;&#x5B9A;&#x7FA9;&#x5728; class &#x5B9A;&#x7FA9;&#x88E1;, instance method body &#x4E2D;, &#x7FD2;&#x6163;&#x4E0A;&#x90FD;&#x662F;&#x4EE5; self. &#x7576;&#x4F5C; prefix  </li>
<li>&#x5728; class &#x5167;&#x90E8;&#x5B9A;&#x7FA9; static method, &#x8ACB;&#x5728; method &#x7684;&#x5BA3;&#x544A;&#x524D;&#x9762;&#x4F7F;&#x7528; @staticmethod, &#x4F86;&#x544A;&#x8A34; python interpreter &#x9019;&#x500B; method &#x662F;&#x4E00;&#x500B; static method, &#x4E0D;&#x5E36; self &#x53C3;&#x6578;</li>
</ul>
<p>&#x63A5;&#x4E0B;&#x4F86;&#x5C07;&#x5C55;&#x793A;&#x6B64; class &#x5C07;&#x5982;&#x4F55;&#x88AB;&#x4F7F;&#x7528;:  </p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
    empCount = <span class="number">0</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">&quot;anonymous&quot;</span>, base_salary=<span class="number">1000</span>)</span>:</span>
        Employee.empCount = <span class="number">0</span>
        self.name = name
        self.base_salary = base_salary

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        Employee.empCount = <span class="number">0</span>

    <span class="decorator">@staticmethod</span>
    <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
        <span class="keyword">print</span> <span class="string">&quot;Employee Count:&quot;</span> + str(Employee.empCount)

    <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.base_salary

    <span class="comment"># the method will be called when call str(new Employee())</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> <span class="string">&quot;Employee name:&quot;</span> + self.name + <span class="string">&quot; base_salary:&quot;</span> + self.base_salary

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   employee1 = Employee(<span class="string">&quot;Peter&quot;</span>)
   <span class="keyword">print</span> employee1
   <span class="keyword">print</span> &#x201C;Salary=&#x201D; + str(employee1.getSalary())
   Employee.EmployeeCount()
   <span class="keyword">del</span> employee1
   Employee.EmployeeCount()

<span class="keyword">if</span> <span class="string">&quot;__main__&quot;</span> == __name__:
    main()
</code></pre><p>Output:</p>
<pre><code><span class="label">Employee:</span> name=Peter base_salary=<span class="number">1000</span>
Salary=<span class="number">1000</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">1</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">0</span>
</code></pre><hr>
<h1 id="Access_Control_in_Python_OOP">Access Control in Python OOP</h1>
<p>&#x5728; Pyhon &#x4E2D;, &#x4E26;&#x6C92;&#x6709;&#x63D0;&#x4F9B; Modifier &#x4F86;&#x660E;&#x78BA;&#x7684;&#x4F86;&#x63A7;&#x5236; Attribute &#x7684;&#x5B58;&#x53D6;&#x6B0A;&#x9650;.<br>&#x76F8;&#x53CD;&#x7684;, Python &#x662F;&#x900F;&#x904E;&#x4E00;&#x7A2E; Naming Convention &#x4F86;&#x544A;&#x8A34; User, &#x9019;&#x500B; Attribute &#x662F; Private &#x7684;.<br>&#x96D6;&#x7136;&#x5982;&#x6B64;, User &#x60F3;&#x8981;&#x5F37;&#x5236;&#x5B58;&#x53D6;&#x6B64; Private Attribute, &#x9084;&#x662F;&#x53EF;&#x4EE5;&#x9054;&#x6210;&#x7684;.</p>
<p>Ex:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
   __empCount = <span class="number">0</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    <span class="comment"># the name of attribute is changed as &quot;_Employee&quot; + &quot;__empCount&quot;</span>
    <span class="keyword">print</span> Employee._Employee__empCount

<span class="keyword">if</span> <span class="string">&quot;__main__&quot;</span> == __name__:
    main()
</code></pre><p>Output:</p>
<pre><code>0
</code></pre><ul>
<li>Python &#x4E2D;, &#x6BCF;&#x500B; Attribute &#x90FD;&#x662F; Public &#x7684;</li>
<li>&#x4EE5; &#x201C;<em>_&#x201D; &#x958B;&#x982D;&#x7684; Attribute, &#x6703;&#x88AB;&#x505A; Name Mangling, &#x6539;&#x540D;&#x70BA; &#x201C;</em>&#x201C; + ClassName + AttributeName</li>
<li>&#x4EE5; &#x201C;__&#x201D; &#x958B;&#x982D;&#x7684; Attribute, &#x53EA;&#x662F;&#x5728;&#x7FD2;&#x6163;&#x4E0A;&#x88AB;&#x8996;&#x70BA; Private &#x7684;, &#x4F46;&#x662F;&#x4ECD;&#x7136;&#x53EF;&#x5F37;&#x5236;&#x5B58;&#x53D6; </li>
</ul>
<hr>
<h1 id="Inheritance">Inheritance</h1>
<p>&#x5982;&#x679C;&#x6211;&#x5011;&#x60F3;&#x8981;&#x52A0;&#x5165;&#x4E00;&#x500B;&#x7279;&#x5225;&#x7684; Employee, &#x7A31;&#x70BA; Manager, &#x53EF;&#x4EE5;&#x8003;&#x616E;&#x7528;&#x7E7C;&#x627F;&#x7684;&#x65B9;&#x5F0F;&#x9054;&#x6210;.<br>Manager &#x9664;&#x4E86;&#x672C;&#x8EAB;&#x662F;&#x4E00;&#x500B; (is a) Emplyoee &#x5916;, &#x9084;&#x5FC5;&#x9808;&#x6EFF;&#x8DB3;:</p>
<ul>
<li>Manager &#x7E7C;&#x627F;&#x4E86; Employee &#x7684;&#x6240;&#x6709; attributes</li>
<li>Manager &#x591A;&#x4E86; bonus &#x7684; attribute</li>
<li>Manager &#x7684; getSalary &#x7D50;&#x679C;, &#x5FC5;&#x9808;&#x662F; base_salary + bonus &#x7684;&#x7D50;&#x679C;</li>
</ul>
<p>Ex: <strong>invoke the method in the super class</strong></p>
<pre><code><span class="comment"># demo how to invoke the method in the super class</span>

<span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="params">(Employee)</span>:</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">&quot;anonymous&quot;</span>, base_salary=<span class="number">1200</span>, bonus = <span class="number">200</span>)</span>:</span>
        super(Manager, self).__init__(name, base_salary)
        self.bonus = bonus

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        super(Manager, self).__del__()
</code></pre><p>Ex: <strong>Override the method in the super class</strong></p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="params">(Employee)</span>:</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">&quot;anonymous&quot;</span>, base_salary=<span class="number">1200</span>, bonus = <span class="number">200</span>)</span>:</span>
        super(Manager, self).__init__(name, base_salary)
        self.bonus = bonus

    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
        super(Manager, self).__del__()

    <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> super(Manager, self).getSalary() + self.bonus

    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> <span class="string">&quot;Manager name:&quot;</span> + self.name + <span class="string">&quot; base_salary:&quot;</span> + str(self.base_salary) + \
               <span class="string">&quot; bonus:&quot;</span> + str(self.bonus)

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   manager1 = Manager(<span class="string">&quot;Peter&quot;</span>)
   <span class="keyword">print</span> manager1
   <span class="keyword">print</span> &#x201C;Salary=&#x201D; + str(manager1.getSalary())
   <span class="keyword">del</span> manager1

<span class="keyword">if</span> <span class="string">&quot;__main__&quot;</span> == __name__:
    main()
</code></pre><p>Output:</p>
<pre><code><span class="attribute">Manager: name</span>=<span class="string">John base_salary=1200 bonus=200
Salary=1400</span>
</code></pre><hr>
<h1 id="Polymorphism">Polymorphism</h1>
<p>&#x7531;&#x65BC; Python &#x662F;&#x4E00;&#x500B; Weakly Type &#x7684;&#x8A9E;&#x8A00;, &#x56E0;&#x6B64;&#x5728;&#x8B8A;&#x6578;&#x7684;&#x5BA3;&#x544A;&#x6642;, &#x4E26;&#x4E0D;&#x6703;&#x660E;&#x78BA;&#x6307;&#x51FA;&#x7279;&#x5B9A;&#x7684;&#x578B;&#x5225;.<br>&#x56E0;&#x6B64;, &#x53EA;&#x8981;&#x6B64;&#x8B8A;&#x6578;&#x6240;&#x6307;&#x5411;&#x7684; Object, &#x7B26;&#x5408;&#x64CD;&#x4F5C;&#x6240;&#x9700;&#x8981;&#x7684;&#x5404;&#x9805; Attribute, &#x5247; Program &#x5373;&#x53EF;&#x6B63;&#x5E38;&#x904B;&#x4F5C;.  </p>
<p>Ex:</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    list_employees = [Manager(&#x201C;John&#x201D;), Employee(<span class="string">&quot;Peter&quot;</span>)]
    <span class="keyword">for</span> employee <span class="keyword">in</span> list_employees:
        <span class="keyword">print</span> employee.__str__()

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main()
</code></pre><p>Output:</p>
<pre><code><span class="attribute">Manager</span>: <span class="string">name=John base_salary=1200 bonus=200</span>
<span class="attribute">Employee</span>: <span class="string">name=Peter base_salary=1000</span>
</code></pre><p><strong>&#x4E8B;&#x5BE6;&#x4E0A;, Python &#x9019;&#x6A23;&#x7684;&#x505A;&#x6CD5;&#x63D0;&#x4F9B;&#x4E86;&#x66F4;&#x5F48;&#x6027;&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;. &#x5728;&#x64B0;&#x5BEB;&#x7279;&#x5B9A;&#x6F14;&#x7B97;&#x6CD5;&#x7684;&#x6642;&#x5019;,<br>&#x53EA;&#x9700;&#x8981;&#x8003;&#x616E; Object &#x672C;&#x8EAB;&#x80FD;&#x63D0;&#x4F9B;&#x54EA;&#x4E9B; Attributes, &#x4E0D;&#x9700;&#x8981;&#x8003;&#x616E; Object &#x7684;&#x7E7C;&#x627F;&#x9AD4;&#x7CFB;.</strong></p>
<hr>
<h1 id="Operator_Overloading">Operator Overloading</h1>
<p>Python &#x672C;&#x8EAB;&#x5B9A;&#x7FA9;&#x4E86;&#x4E00;&#x7D44; Built-in Operators, &#x8B93;&#x4F7F;&#x7528;&#x8005;&#x53EF;&#x4EE5; Overloading &#x5176;&#x884C;&#x70BA;.</p>
<p>Ex:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Vector</span> <span class="params">(object)</span>:</span>
   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span>
       self.x = x
       self.y = y
   <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, rhs)</span>:</span>
       <span class="keyword">return</span> Vector(self.x + rhs.x, self.y + rhs.y)
   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">&quot;Vector: (&quot;</span> + str(self.x) + <span class="string">&quot;, &quot;</span> + str(self.y) + <span class="string">&quot;)&quot;</span>

   <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="params">(object)</span>:</span>
   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span>
       self.x = x
       self.y = y
   <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, rhs)</span>:</span>
       <span class="keyword">return</span> Point(self.x + rhs.x, self.y + rhs.y)
   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">&quot;Point: (&quot;</span> + str(self.x) + <span class="string">&quot;, &quot;</span> + str(self.y) + <span class="string">&quot;)&quot;</span>

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   vec1 = Vector(<span class="number">10</span>, <span class="number">20</span>)
   vec2 = Vector(<span class="number">90</span>, <span class="number">80</span>)
   <span class="keyword">print</span> vec1 + vec2

   p1 = Point(<span class="number">3</span>,   <span class="number">10</span>)
   p2 = Point(-<span class="number">3</span>, -<span class="number">10</span>)
   <span class="keyword">print</span> p1 + p2

   <span class="comment"># the evaluation order is ((vec1 + p1) + p2)</span>
   <span class="keyword">print</span> vec1 + p1 + p2
   <span class="comment"># the evaluation order is ((p2 + vec1) + vec2)</span>
   <span class="keyword">print</span> p2 + vec1 + vec2
</code></pre><p>Output:</p>
<pre><code><span class="attribute">Vector</span>: <span class="string">(100, 100)</span>
<span class="attribute">Point</span>: <span class="string">(0, 0)</span>
<span class="attribute">Vector</span>: <span class="string">(10, 20)</span>
<span class="attribute">Point</span>: <span class="string">(97, 90)</span>
</code></pre><p>&#x5982;&#x540C;&#x4E4B;&#x524D;&#x63D0;&#x5230;&#x7684;, Python &#x4E2D;, &#x53EA;&#x8981; Object &#x6709;&#x80FD;&#x529B; (&#x6709; Attributes) &#x5C31;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x57F7;&#x884C;.<br>&#x4E0A;&#x9762;&#x9019;&#x500B;&#x4F8B;&#x5B50;&#x986F;&#x793A;, &#x65E2;&#x4F7F;&#x662F; vec1 + p1 &#x6216; p2 + vec1, &#x9019;&#x6A23;&#x7684;&#x64CD;&#x4F5C;&#x90FD;&#x662F;&#x5408;&#x6CD5;&#x7684;.<br>&#x56E0;&#x70BA; Python &#x53EA;&#x77E5;&#x9053;, &#x628A; vec1 + p1 &#x63DB;&#x6210; vec1.<strong>add</strong>(p1), &#x53EA;&#x8981; p1 &#x63D0;&#x4F9B;&#x8DB3;&#x5920;&#x7684;&#x80FD;&#x529B;, &#x80FD;&#x5B8C;&#x6210; <strong>add</strong> &#x65E2;&#x53EF;.<br>&#x6B64;&#x5916;, Python &#x4E2D; Operator &#x7684; Evaluation Order &#x90FD;&#x662F;&#x5F9E;&#x5DE6;&#x5230;&#x53F3;, &#x4E0D;&#x80FD;&#x88AB;&#x6539;&#x8B8A;.</p>
<p>Reference:</p>
<ul>
<li><a href="http://docs.python.org/2/library/operator.html" title="Operator Overloading" target="_blank" rel="external">http://docs.python.org/2/library/operator.html</a></li>
<li><a href="http://docs.python.org/2/reference/expressions.html#evaluation-order" title="Operator Evaluation Order" target="_blank" rel="external">http://docs.python.org/2/reference/expressions.html#evaluation-order</a></li>
</ul>
<hr>
<h1 id="Function_Overloading">Function Overloading</h1>
<p>Python &#x4E2D;, &#x4E26;&#x6C92;&#x6709;&#x63D0;&#x4F9B; Function Overloading &#x7684;&#x6A5F;&#x5236;. &#x4E00;&#x822C;&#x800C;&#x8A00;, &#x6703;&#x900F;&#x904E;&#x4E0B;&#x5217;&#x65B9;&#x5F0F;&#x4F86;&#x9054;&#x6210;:  </p>
<ul>
<li>Default Arguments</li>
<li>Variable Length Arguments With List</li>
<li>Variable Length Arguments With Dict </li>
</ul>
<p>Ex: <strong>Default Arguments</strong></p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
   empCount = <span class="number">0</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">&quot;&quot;</span>, base_salary=<span class="number">1000</span>)</span>:</span>
       self.base_salary = base_salary
       self.name = name
       Employee.empCount += <span class="number">1</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
       Employee.empCount -= <span class="number">1</span>

   <span class="decorator">@staticmethod</span>
   <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
       <span class="keyword">print</span> <span class="string">&quot;Employee.empCount = &quot;</span> + str(Employee.empCount)

   <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> self.base_salary

   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">&quot;Employee: name=&quot;</span> + self.name + \
              <span class="string">&quot; base_salary=&quot;</span> + str(self.base_salary)

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   employee1 = Employee(<span class="string">&quot;Peter&quot;</span>)
   <span class="keyword">print</span> employee1
   <span class="keyword">print</span> &#x201C;Salary=&#x201D; + str(employee1.getSalary())
   Employee.EmployeeCount()
   <span class="keyword">del</span> employee1
   Employee.EmployeeCount()

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main()
</code></pre><p>Output:</p>
<pre><code><span class="label">Employee:</span> name=Peter base_salary=<span class="number">1000</span>
Salary=<span class="number">1000</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">1</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">0</span>
</code></pre><p>Ex: <strong>Variable Length Arguments With Tuple</strong></p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
   empCount = <span class="number">0</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span>
       self.name  = &#x201C;&#x201D;
       self.salary = <span class="number">1000</span>
       <span class="keyword">if</span> <span class="number">1</span> &lt;= len(args): self.name  = args[<span class="number">0</span>]
       <span class="keyword">if</span> <span class="number">2</span> &lt;= len(args): self.salary = args[<span class="number">1</span>]
       Employee.__empCount += <span class="number">1</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
       Employee.empCount -= <span class="number">1</span>

   <span class="decorator">@staticmethod</span>
   <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
       <span class="keyword">print</span> <span class="string">&quot;Employee.empCount = &quot;</span> + str(Employee.empCount)

   <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> self.base_salary

   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">&quot;Employee: name=&quot;</span> + self.name + \
              <span class="string">&quot; base_salary=&quot;</span> + str(self.base_salary)

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   employee1 = Employee(<span class="string">&quot;Peter&quot;</span>)
   <span class="keyword">print</span> employee1
   <span class="keyword">print</span> &#x201C;Salary=&#x201D; + str(employee1.getSalary())
   Employee.EmployeeCount()
   <span class="keyword">del</span> employee1
   Employee.EmployeeCount()

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
   main()
</code></pre><p>Output:</p>
<pre><code><span class="label">Employee:</span> name=Peter base_salary=<span class="number">1000</span>
Salary=<span class="number">1000</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">1</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">0</span>
</code></pre><p>Ex: <strong>Variable Length Arguments With Dict</strong></p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="params">(object)</span>:</span>
   empCount = <span class="number">0</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **args)</span>:</span>
       self.name  = args.get(&#x201C;name&#x201D;, &#x201C;&#x201D;)
       self.salary = args.get(&#x201C;salary&#x201D;, <span class="number">1000</span>)
       Employee.__empCount += <span class="number">1</span>

   <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>
       Employee.empCount -= <span class="number">1</span>

   <span class="decorator">@staticmethod</span>
   <span class="function"><span class="keyword">def</span> <span class="title">EmployeeCount</span><span class="params">()</span>:</span>
       <span class="keyword">print</span> <span class="string">&quot;Employee.empCount = &quot;</span> + str(Employee.empCount)

   <span class="function"><span class="keyword">def</span> <span class="title">getSalary</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> self.base_salary

   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
       <span class="keyword">return</span> <span class="string">&quot;Employee: name=&quot;</span> + self.name + \
              <span class="string">&quot; base_salary=&quot;</span> + str(self.base_salary)

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
   employee1 = Employee(<span class="string">&quot;Peter&quot;</span>)
   <span class="keyword">print</span> employee1
   <span class="keyword">print</span> &#x201C;Salary=&#x201D; + str(employee1.getSalary())
   Employee.EmployeeCount()
   <span class="keyword">del</span> employee1
   Employee.EmployeeCount()

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
   main()
</code></pre><p>Output:</p>
<pre><code><span class="label">Employee:</span> name=Peter base_salary=<span class="number">1000</span>
Salary=<span class="number">1000</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">1</span>
<span class="label">EmployeeCount:</span> Employee<span class="preprocessor">.empCount</span> = <span class="number">0</span>
</code></pre><p>&#x6B64;&#x5916;, &#x8981;&#x6CE8;&#x610F;&#x7684;&#x4E00;&#x9EDE;&#x662F;, &#x5982;&#x679C;&#x4F60;&#x5F37;&#x5236;&#x5BEB;&#x4E86;&#x5169;&#x500B;&#x76F8;&#x540C; Signature &#x7684; Method, &#x5F8C;&#x8005;&#x6703;&#x8986;&#x84CB;&#x524D;&#x8005;.  </p>
<p>Ex:</p>
<p>Output:</p>
<hr>
<h1 id="Object_Types_in_Python">Object Types in Python</h1>
<p>&#x5728; Python &#x4E2D;, &#x6240;&#x6709;&#x7269;&#x4EF6;&#x7684;&#x578B;&#x5225;&#x53EF;&#x4EE5;&#x5206;&#x70BA;&#x4E0B;&#x5217; 3 &#x7A2E;:</p>
<ol>
<li>Class Object  <ul>
<li>Instantiation</li>
<li>Attribute Reference</li>
</ul>
</li>
<li>Instance Object<ul>
<li>Attribute Reference</li>
</ul>
</li>
<li>Method Object<ul>
<li></li>
</ul>
</li>
</ol>
<hr>
<h1 id="Check_relationship_between_class_and_instance">Check relationship between class and instance</h1>
]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Python/" term="Python"/>
    <category scheme="http://mutsughost1.github.io/tags/Study-Group/" term="Study Group"/>
    <category scheme="http://mutsughost1.github.io/categories/Software/" term="Software"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Python Module Package]]></title>
    <link href="http://mutsughost1.github.io/2013/09/27/python-module-package/"/>
    <id>http://mutsughost1.github.io/2013/09/27/python-module-package/</id>
    <published>2013-09-27T06:54:50.000Z</published>
    <updated>2014-06-01T21:10:58.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="#what_module" title="What&#x27;s a python module ?">What&#x2019;s a python module ?</a></li>
<li><a href="#why_module" title="Why use modules ?">Why use modules ?</a></li>
<li><a href="#how_module" title="How to use/write modules ?">How to use/write modules ?</a></li>
<li><a href="#module_search_path" title="Module search Path">Module search Path ?</a></li>
<li><a href="#reload_module" title="Reload your module after applying any change">Reload your module after applying any change ?</a> </li>
<li><a href="#what_package" title="What&#x27;s package ?">What&#x2019;s package ?</a></li>
<li><a href="#why_package" title="Why use packaes ?">Why use packaes ?</a></li>
<li><a href="#how_package" title="How to use packages ?">How to use packages ?</a></li>
<li><a href="#package_example" title="An example to refactor a module as a package">An example to refactor a module as a package</a></li>
</ul>
<p><a id="more"></a></p>
<hr>
<p><a name="what_module"></a></p>
<h1 id="What&#x2019;s_a_python_module_?">What&#x2019;s a python module ?</h1>
<p>&#x5728; Python &#x4E2D;, &#x6BCF;&#x4E00;&#x500B;&#x6A94;&#x6848;&#x90FD;&#x662F;&#x4E00;&#x500B; Python Module, &#x901A;&#x5E38;&#x4EE5; py &#x505A;&#x70BA;&#x5176;&#x526F;&#x6A94;&#x540D;</p>
<blockquote>
<p>&#x5B9A;&#x7FA9;&#x4E0A;, python module &#x500B;&#x5305;&#x542B;&#x4E86; python definitions &#x4EE5;&#x53CA; python executable statements.<br>python definitions &#x901A;&#x5E38;&#x662F;&#x6307; variable definitions, function definitions and class definitions.  </p>
</blockquote>
<p>Python module &#x53EA;&#x6703;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x88AB; import &#x7684;&#x6642;&#x5019;&#x88AB;&#x57F7;&#x884C;. &#x88AB; import module &#x6703;&#x5728;&#x76EE;&#x524D;&#x57F7;&#x884C;&#x7684; global namespace &#x4E2D;,<br>&#x5EFA;&#x7ACB;&#x4E00;&#x500B;&#x5C6C;&#x65BC;&#x6B64; module &#x7684; namespace. &#x5728;&#x9810;&#x8A2D;&#x4E0B;, &#x9019;&#x500B; module &#x7684; namespace &#x6703;&#x662F; module name.<br>&#x4EFB;&#x4F55;&#x4EBA;&#x53EF;&#x4EE5;&#x900F;&#x904E;&#x9019;&#x500B; module name &#x4F86;&#x5B58;&#x53D6; module &#x5167;&#x7684;&#x5404;&#x9805; attributes.  </p>
<p>&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x5373;&#x70BA;&#x4E00;&#x500B; Module:</p>
<pre><code><span class="comment"># A python module fibo.py</span>

__VERSION = <span class="string">&quot;Version 1&quot;</span>  <span class="comment"># variable definition</span>

<span class="function"><span class="keyword">def</span> <span class="title">fibo</span><span class="params">(n)</span>:</span>             <span class="comment"># function definition</span>
    <span class="keyword">pass</span>

<span class="comment"># you can define your class here</span>

<span class="keyword">if</span> <span class="string">&quot;__main__&quot;</span> == __name__:
    <span class="keyword">pass</span>                 <span class="comment"># write executable statements</span>
</code></pre><hr>
<p><a name="why_module"></a></p>
<h1 id="Why_use_python_modules_?">Why use python modules ?</h1>
<p>&#x5C07;&#x5E38;&#x7528;&#x7684; code &#x6574;&#x7406;&#x6210; module &#x7684;&#x597D;&#x8655;&#x5982;&#x4E0B;:</p>
<ul>
<li>&#x5C07;&#x76F8;&#x95DC;&#x7684; code &#x7D44;&#x7E54;&#x5728;&#x540C;&#x4E00;&#x500B; module &#x4E2D;, &#x8B93; code &#x66F4;&#x5BB9;&#x6613;&#x7DAD;&#x8B77;, &#x66F4;&#x5BB9;&#x6613;&#x8B80;, &#x66F4;&#x5BB9;&#x6613; re-use</li>
<li>&#x907F;&#x514D; naming conflict, &#x6240;&#x6709;&#x5B9A;&#x7FA9;&#x5728; module &#x5167;&#x7684;&#x8B8A;&#x6578;, &#x90FD;&#x5C6C;&#x65BC;&#x6B64; module namespace &#x4E0B;</li>
</ul>
<hr>
<p><a name="how_module"></a></p>
<h1 id="How_to_use/write_python_modules_?">How to use/write python modules ?</h1>
<p><strong>Syntax for using a module</strong></p>
<blockquote>
<p><strong>import</strong> module1 [,module2[,&#x2026;moduleN]]<br><strong>import</strong> module [as alias]<br><strong>from</strong> module <strong>import</strong> item1[,item2[,&#x2026;itemN]]<br><strong>from</strong> module <strong>import</strong> item [as alias]  </p>
</blockquote>
<p><strong>&#x4E00;&#x500B;&#x8A08;&#x7B97; fibonacci sequence &#x7684; python module &#x5982;&#x4E0B;:</strong></p>
<pre><code><span class="comment"># module fibo.py</span>
<span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>
    <span class="string">&quot;&quot;&quot; show fibonacci sequence up to n &quot;&quot;&quot;</span>
    a, b = <span class="number">0</span>, <span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        <span class="keyword">print</span> b,
        a,b = b, a+b

<span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>
    <span class="string">&quot;&quot;&quot; return fibonacci sequence up to n &quot;&quot;&quot;</span>
    listFibo = []
    <span class="keyword">while</span> b &lt; n:
        listFibo.append(b)
        a,b = b, a+b
    <span class="keyword">return</span> listFibo
</code></pre><p><strong>&#x555F;&#x52D5; Python Interactive Console, &#x4E26;&#x5207;&#x63DB;&#x5230; module fibo.py &#x6240;&#x5728;&#x76EE;&#x9304;&#x4E0B;, &#x4E26;&#x57F7;&#x884C;&#x4E0B;&#x5217;&#x6307;&#x4EE4;&#x4F7F;&#x7528; fibo module:</strong>  </p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>]
<span class="prompt">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo
<span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>, <span class="string">&apos;fibo&apos;</span>]
<span class="prompt">&gt;&gt;&gt; </span>fibo.fib(<span class="number">1000</span>)
<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span> <span class="number">610</span> <span class="number">987</span>
<span class="prompt">&gt;&gt;&gt; </span>fibo.fib2(<span class="number">100</span>)
[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]
</code></pre><p><strong>&#x57F7;&#x884C; import statement &#x6642;, &#x5BE6;&#x969B;&#x4E0A;&#x57F7;&#x884C;&#x4E86; 3 &#x4EF6;&#x4E8B;&#x60C5;:</strong></p>
<ol>
<li><p>Find the file of imported module (&#x5F9E; sys.path &#x53BB;&#x627E;)  </p>
</li>
<li><p>Compile it as byte code (if needed)  </p>
</li>
<li><p>Run the module&#x2019;s code to build the objects it defines.  </p>
<ul>
<li>A variable will be created in global namespace to reference the object of the module  </li>
</ul>
</li>
</ol>
<p><strong>&#x5229;&#x7528; from &#x2026; import &#x2026; &#x4F86;&#x7C21;&#x5316;&#x4F7F;&#x7528; module &#x5167;&#x7684; atrribute name</strong></p>
<p>&#x900F;&#x904E; from module import item &#x4F86;&#x7C21;&#x5316;&#x4F7F;&#x7528; module &#x5167;&#x7684; attribute name</p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>]
<span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> fibo <span class="keyword">import</span> fib, fib2
<span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>, <span class="string">&apos;fib&apos;</span>, <span class="string">&apos;fib2&apos;</span>]
<span class="prompt">&gt;&gt;&gt; </span>fib(<span class="number">1000</span>)
<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span> <span class="number">610</span> <span class="number">987</span>
<span class="prompt">&gt;&gt;&gt; </span>fib2(<span class="number">100</span>)
[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]
</code></pre><p><strong>&#x4E8B;&#x5BE6;&#x4E0A;, from module import item &#x662F;&#x57FA;&#x65BC; import statement &#x4F86;&#x5BE6;&#x73FE;&#x7684;</strong></p>
<p><strong>from fibo import fib, fib2</strong> &#x53EF;&#x4EE5;&#x770B;&#x62C6;&#x89E3;&#x6210;&#x4E0B;&#x5217;&#x5E7E;&#x500B;&#x52D5;&#x4F5C;:  </p>
<ol>
<li>import fibo  </li>
<li>fib = fibo.fib  </li>
<li>fib2 = fibo.fib2  </li>
<li>del fibo</li>
</ol>
<p><strong>&#x6BCF;&#x500B; module &#x90FD;&#x6703;&#x6709;&#x4E00;&#x500B; __name__ attribute, &#x4EE3;&#x8868;&#x9019;&#x500B; module &#x7684;&#x540D;&#x7A31;</strong></p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo
<span class="prompt">&gt;&gt;&gt; </span>dir(fibo)
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__file__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>, <span class="string">&apos;fib&apos;</span>, <span class="string">&apos;fib2&apos;</span>, <span class="string">&apos;main&apos;</span>]
<span class="prompt">&gt;&gt;&gt; </span>fibo.__name__
<span class="string">&apos;fibo&apos;</span>
</code></pre><p>&#x7576;&#x9019;&#x500B; python module &#x88AB;&#x7576;&#x4F5C; script &#x57F7;&#x884C;&#x6642;, __name__ &#x7684;&#x5167;&#x5BB9;&#x5C07;&#x88AB;&#x6539;&#x70BA; &#x201C;__main__&#x201C;<br>&#x9019;&#x6A23;&#x7684;&#x505A;&#x6CD5;&#x53EF;&#x4EE5;&#x8B93;&#x6BCF;&#x500B; module &#x5C07;&#x7279;&#x5B9A;&#x7684;&#x4EE3;&#x78BC;&#x53EA;&#x6709;&#x5728; module &#x88AB;&#x7576;&#x4F5C; script &#x57F7;&#x884C;&#x6642;, &#x624D;&#x6703;&#x57F7;&#x884C;</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        <span class="keyword">print</span> b,
        a,b = b, a+b

<span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>
    result = []
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        result.append(b)
        a, b = b, a+b
    <span class="keyword">return</span> result


<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    fib(<span class="number">1000</span>)
    <span class="keyword">print</span> <span class="string">&quot;\n&quot;</span>, fib2(<span class="number">100</span>)

<span class="keyword">if</span> __name__ == <span class="string">&apos;__main__&apos;</span>:
    main()
</code></pre><p>&#x5728; Python Interactive Console &#x4E0B;&#x57F7;&#x884C;:</p>
<pre><code>E:<span class="command">\Temp</span><span class="command">\Python</span><span class="command">\hw</span>3<span class="command">\example</span>&gt;python.exe fibo.py
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
<span class="special">[</span>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89<span class="special">]</span>
</code></pre><p>&#x6B64;&#x6642; <strong> name </strong> &#x5C07;&#x7B49;&#x65BC; &#x201C;<strong> main </strong>&#x201C;, &#x6703;&#x8DD1;&#x5230; main() function &#x53BB;&#x57F7;&#x884C;</p>
<p><strong>from module import *</strong> statement</p>
<p>&#x5982;&#x679C; module &#x4E2D;&#x7121;&#x5B9A;&#x7FA9; __all__ &#x8B8A;&#x6578;, &#x5247;&#x5C07;&#x6703; copy &#x6B64; module &#x4E2D;&#x6240;&#x6709; attributes (&#x4E0D;&#x542B;__&#x958B;&#x982D;&#x4E4B; attributes)<br>&#x5426;&#x5247;, &#x53EA;&#x6703; copy __all__ &#x8B8A;&#x6578;&#x4E2D;&#x6240;&#x6307;&#x5B9A;&#x4E4B; attributes</p>
<p>Exampe: (imported module &#x4E2D;&#x7121;&#x5B9A;&#x7FA9; __all__ &#x8B8A;&#x6578;)</p>
<pre><code><span class="comment"># module fibo.py</span>

<span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        <span class="keyword">print</span> b,
        a,b = b, a+b

<span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>
    result = []
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        result.append(b)
        a, b = b, a+b
    <span class="keyword">return</span> result
</code></pre><p>Output:</p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>]
<span class="prompt">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo
<span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>, <span class="string">&apos;fibo&apos;</span>]
<span class="prompt">&gt;&gt;&gt; </span>dir(fibo)
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__file__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>, <span class="string">&apos;fib&apos;</span>, <span class="string">&apos;fib2&apos;</span>]
<span class="prompt">&gt;&gt;&gt; </span><span class="keyword">del</span> fibo
<span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>]    
<span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> fibo <span class="keyword">import</span> *
<span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>, <span class="string">&apos;fib&apos;</span>, <span class="string">&apos;fib2&apos;</span>]
</code></pre><p>Exampe: (imported module &#x4E2D;&#x6709;&#x5B9A;&#x7FA9; __all__ &#x8B8A;&#x6578;)</p>
<pre><code><span class="comment"># module fibo.py</span>

__all__ = [<span class="string">&quot;fib2&quot;</span>]

<span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        <span class="keyword">print</span> b,
        a,b = b, a+b

<span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>
    result = []
    a,b = <span class="number">0</span>,<span class="number">1</span>
    <span class="keyword">while</span> b &lt; n:
        result.append(b)
        a, b = b, a+b
    <span class="keyword">return</span> result
</code></pre><p>Output:</p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>]
<span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> fibo <span class="keyword">import</span> *
<span class="prompt">&gt;&gt;&gt; </span>dir()
[<span class="string">&apos;__builtins__&apos;</span>, <span class="string">&apos;__doc__&apos;</span>, <span class="string">&apos;__name__&apos;</span>, <span class="string">&apos;__package__&apos;</span>, <span class="string">&apos;fib2&apos;</span>]
</code></pre><hr>
<p><a name="module_search_path"></a></p>
<h1 id="Module_Search_Path">Module Search Path</h1>
<p>&#x7576;&#x4F60;&#x5BEB;&#x597D;&#x81EA;&#x5DF1;&#x7684; Module &#x5F8C;, &#x60F3;&#x7576;&#x6210; Library &#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x5176;&#x4ED6; Python Module &#x4F86;&#x4F7F;&#x7528;&#x6642;,<br>&#x5FC5;&#x9808;&#x5C07; Module &#x653E;&#x5230;&#x5176; Search Path &#x4E2D;, &#x624D;&#x80FD;&#x8B93; Module &#x88AB;&#x6B63;&#x5E38; import &#x4E14;&#x4F7F;&#x7528;.<br>&#x4E00;&#x822C;&#x4F86;&#x8AAA;, Module Search Path &#x662F;&#x4EE5; sys.path &#x4F86;&#x8868;&#x793A;, &#x7531;&#x4E0B;&#x5217;&#x6210;&#x54E1;&#x6240;&#x7D44;&#x6210;:</p>
<ol>
<li>Directory containing the script (&#x76EE;&#x524D;&#x57F7;&#x884C;&#x4E4B; Script &#x6240;&#x5728;&#x7684;&#x76EE;&#x9304;)</li>
<li>PYTHONPATH (&#x7CFB;&#x7D71;&#x4E2D;&#x7684;&#x74B0;&#x5883;&#x8B8A;&#x6578;, User &#x53EF;&#x5C07;&#x81EA;&#x8A02;&#x7684; Module Location &#x586B;&#x5165;&#x6B64;&#x74B0;&#x5883;&#x8B8A;&#x6578;&#x4E2D;)</li>
<li>Installation Default Dependent (&#x8207;&#x5E73;&#x53F0;&#x7CFB;&#x7D71;&#x76F8;&#x95DC;&#x7684;&#x8DEF;&#x5F91;, &#x5B89;&#x88DD; Python &#x6642;, &#x5C07;&#x6703;&#x81EA;&#x52D5;&#x6C7A;&#x5B9A;)</li>
</ol>
<p>&#x7576;&#x88AB; import &#x7684; module &#x7121;&#x6CD5;&#x5728; sys.path &#x4E2D;&#x88AB;&#x641C;&#x5C0B;&#x5230;, &#x5C07;&#x6703;&#x7522;&#x751F; ImportError Exception.<br>&#x7576;&#x524D;&#x57F7;&#x884C;&#x7684; script &#x76EE;&#x9304;&#x4E2D;, &#x82E5;&#x6709;&#x8207; Standard Library &#x4E2D;&#x7684; module &#x6709;&#x76F8;&#x540C;&#x540D;&#x7A31;, &#x5247;&#x6703;&#x906E;&#x853D; Standard Library &#x7684; Module.</p>
<hr>
<p><a name="reload_module"></a></p>
<h1 id="Reload_Your_Module_To_Apply_Any_Modification">Reload Your Module To Apply Any Modification</h1>
<p>&#x8ACB;&#x8A18;&#x5F97;, &#x6BCF;&#x500B; python interpreter session &#x4E2D;, &#x53EA;&#x6703; import &#x4E00;&#x6B21; module, &#x56E0;&#x6B64;&#x7576; module &#x8B8A;&#x52D5;&#x6642;, &#x8ACB;&#x57F7;&#x884C;  </p>
<ul>
<li>reload(module)</li>
</ul>
<p><img src="http://MutsuGhost1.github.io/image/python_reload_function.PNG" alt=""></p>
<p>&#x6240;&#x6709; reference &#x5230;&#x6B64; module &#x7684;&#x8B8A;&#x6578;, &#x90FD;&#x5C07;&#x53D7;&#x5F71;&#x97FF;</p>
<hr>
<p><a name="what_package"></a></p>
<h1 id="What&#x2019;s_package_?">What&#x2019;s package ?</h1>
<p>Package &#x7531;&#x4E00;&#x500B; Directory &#x6240;&#x69CB;&#x6210;, &#x88E1;&#x9762;&#x5305;&#x542B;&#x4E86; Python Module &#x6A94;&#x6848;, &#x4EE5;&#x53CA;&#x4E00;&#x500B;&#x540D;&#x7A31;&#x70BA; <strong>__ini__.py</strong> &#x7684;&#x6A94;&#x6848;.<br>&#x900F;&#x904E; <strong>__ini__.py</strong> &#x6A94;&#x6848;, Python Interpreter &#x624D;&#x6703;&#x5C07;&#x6B64; Directory &#x8996;&#x70BA;&#x4E00;&#x500B; Package.  </p>
<p><img src="http://MutsuGhost1.github.io/image/python_package.PNG" alt=""></p>
<p>&#x4E0A;&#x5716;&#x65E2;&#x70BA;&#x4E00;&#x500B;&#x7C21;&#x55AE;&#x7684; Package, &#x900F;&#x904E; import A.B &#x5247;&#x53EF; import package A &#x4E2D;&#x7684; module B.</p>
<hr>
<p><a name="why_package"></a></p>
<h1 id="Why_use_package_?">Why use package ?</h1>
<p>&#x4F7F;&#x7528; Package &#x4F86;&#x7D44;&#x7E54; Python Module &#x7684;&#x597D;&#x8655;&#x5728;&#x65BC;: </p>
<ul>
<li>&#x53EF;&#x4EE5;&#x964D;&#x4F4E; Module &#x9593;&#x7684; Coupling, &#x589E;&#x52A0; Module &#x5167;&#x7684; Cohesion  </li>
<li>&#x4F7F;&#x5F97; Module &#x66F4;&#x6613;&#x65BC; Maintain</li>
<li>&#x8B93; Module &#x66F4; readable  </li>
</ul>
<hr>
<p><a name="how_package"></a></p>
<h1 id="How_to_use_packages">How to use packages</h1>
<p>&#x900F;&#x904E;&#x4E0B;&#x5217;&#x5E7E;&#x7A2E;&#x65B9;&#x6CD5;, &#x53EF;&#x4EE5; import package &#x6216; package &#x5167;&#x7684; module:</p>
<ul>
<li>import package.module [as alias]<ul>
<li>&#x5C07;&#x57F7;&#x884C; package &#x5167;&#x7684; __init__.py &#x6A94;&#x6848;, &#x505A;&#x70BA; package &#x7684;&#x521D;&#x59CB;&#x5316;  </li>
<li>&#x5EFA;&#x7ACB;&#x4E00;&#x500B;&#x65B0;&#x7684; namespace for this module of package</li>
<li>&#x900F;&#x904E; package.module.item (or alias.item) &#x4F86;&#x5B58;&#x53D6;&#x6B64; module &#x4E2D;&#x7684;&#x5404;&#x9805; attributes </li>
</ul>
</li>
<li>import package<ul>
<li>&#x50C5;&#x57F7;&#x884C; package &#x5167;&#x7684; __init__.py &#x6A94;&#x6848;, &#x505A;&#x70BA; package &#x7684;&#x521D;&#x59CB;&#x5316;</li>
</ul>
</li>
<li>from package import module [as alias] <ul>
<li>&#x5C07;&#x57F7;&#x884C; package &#x5167;&#x7684; __init__.py &#x6A94;&#x6848;, &#x505A;&#x70BA; package &#x7684;&#x521D;&#x59CB;&#x5316;</li>
<li>&#x5F9E; package &#x4E2D;, copy &#x51FA;&#x6B64; module</li>
<li>&#x900F;&#x904E; module.item (or alias.item) &#x4F86;&#x5B58;&#x53D6;&#x6B64; module &#x4E2D;&#x7684;&#x5404;&#x9805; attributes  </li>
</ul>
</li>
</ul>
<p>&#x5047;&#x8A2D;&#x76EE;&#x524D;&#x6709;&#x4E00;&#x500B; sound package &#x5176;&#x7D50;&#x69CB;&#x5982;&#x4E0B;:</p>
<pre><code>+ sound/                    <span class="comment"># top level package</span>
    __init__.py             <span class="comment"># initialize the sound package</span>
  + formats/                <span class="comment"># sub-package for file format converstions</span>
      __init__.py
      wavread.py
      wavwrite.py
      aifread.py
      aifwrite.py
      auread.py
      auwrite.py
      <span class="keyword">...</span>
  + effects/                <span class="comment"># sub-package for sound effects</span>
      __init__.py
      echo.py
      surround.py
      reverse.py
      <span class="keyword">...</span>
  + filters/                <span class="comment"># sub-package for filters</span>
      __init__.py
      equalizer.py
      vocoder.py
      karaoke.py
      <span class="keyword">...</span>
</code></pre><p>&#x4F7F;&#x7528;&#x8005;&#x900F;&#x904E; import package.module, &#x53EF;&#x4EE5; import package &#x4E2D;&#x7684;&#x67D0;&#x500B; module,<br>Ex:</p>
<pre><code>import sound<span class="preprocessor">.effects</span><span class="preprocessor">.echo</span> 
sound<span class="preprocessor">.effects</span><span class="preprocessor">.echo</span><span class="preprocessor">.echofilter</span>(input, output, delay = <span class="number">0.7</span>, atten = <span class="number">4</span>)
</code></pre><p>&#x900F;&#x904E; from package import module, &#x4F7F;&#x7528;&#x8005;&#x53EF;&#x4EE5;&#x5F9E;&#x7279;&#x5B9A; package &#x4E2D;, copy &#x51FA;&#x67D0;&#x500B; module,<br>Ex:</p>
<pre><code>from sound.effects
import <span class="keyword">echo</span> <span class="keyword">echo</span>.echofilter(input, output, delay = <span class="number">0.7</span>, atten = <span class="number">4</span>)
</code></pre><p>&#x900F;&#x904E; from package.module import item, &#x4F7F;&#x7528;&#x8005;&#x53EF;&#x4EE5;&#x5F9E;&#x7279;&#x5B9A; package &#x4E2D;&#x7684; module, copy &#x67D0;&#x500B; attribute,<br>Ex:</p>
<pre><code><span class="title">from</span> sound.effects.echo 
<span class="import"><span class="keyword">import</span> echofilter echofilter<span class="container">(<span class="title">input</span>, <span class="title">output</span>, <span class="title">delay</span> = 0.7, <span class="title">atten</span> = 4)</span></span>
</code></pre><p><strong>from package import *</strong> statement</p>
<p>&#x5728;&#x5BE6;&#x969B;&#x7684;&#x61C9;&#x7528;&#x4E2D;, &#x4F7F;&#x7528;&#x8005;&#x53EF;&#x80FD;&#x6703;&#x60F3;&#x8981;&#x4E00;&#x6B21;&#x5C07; package &#x4E2D;&#x7684; module &#x90FD; import &#x9032; namespace &#x4E2D;.<br>&#x4F46;&#x4E8B;&#x5BE6;&#x4E0A;, &#x9019;&#x6A23;&#x7684;&#x505A;&#x6CD5;&#x6703;&#x56E0;&#x70BA; import &#x67D0;&#x4E9B;&#x4F7F;&#x7528;&#x8005;&#x4E0D;&#x9810;&#x671F;&#x7684; module &#x800C;&#x7522;&#x751F;&#x4E00;&#x4E9B;&#x4F7F;&#x7528;&#x4E0D;&#x9810;&#x671F;&#x7684;&#x884C;&#x70BA;.<br>&#x6B63;&#x56E0;&#x70BA;&#x5982;&#x6B64;, &#x91DD;&#x5C0D; package &#x7684; import * &#x5C31;&#x5FC5;&#x9808;&#x9075;&#x5B88;&#x4E0B;&#x5217;&#x7684;&#x898F;&#x5247;:</p>
<ul>
<li>&#x82E5;&#x662F; package &#x4E2D;&#x7684; __init__.py &#x6A94;&#x6848;&#x5167;&#x6709;&#x5B9A;&#x7FA9; __all__ &#x8B8A;&#x6578;, &#x5247;&#x6703;&#x4F9D;&#x64DA; __all__&#x8B8A;&#x6578;&#x4E2D;&#x7684;&#x5167;&#x5BB9;,<br>&#x4F86;&#x6C7A;&#x5B9A;&#x8981; import &#x54EA;&#x4E9B; sub-modules</li>
<li>&#x5426;&#x5247;&#x7576;__init__.py &#x6A94;&#x6848;&#x5167;&#x6C92;&#x6709;&#x5B9A;&#x7FA9; __all__ &#x8B8A;&#x6578;, &#x5247;&#x53EA;&#x6703;&#x57F7;&#x884C; __init__.py &#x5167;&#x7684;&#x6558;&#x8FF0;</li>
</ul>
<p><strong>intra package reference</strong>  </p>
<ul>
<li>import module in the same package<br>The surround module, it can simply use:</li>
</ul>
<p>Ex:  </p>
<pre><code><span class="comment"># surround.py</span>
<span class="keyword">import</span> echo
<span class="keyword">from</span> echo <span class="keyword">import</span> echofilter
</code></pre><ul>
<li>import module in the different package<br>Use absolute import to refer sub-modules of sibling package:</li>
</ul>
<p>Ex:</p>
<pre><code><span class="comment">#vocoder.py</span>
<span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo
</code></pre><hr>
<p><a name="package_example"></a></p>
<h1 id="An_example_to_refactor_a_module_as_a_package">An example to refactor a module as a package</h1>
<p>&#x5047;&#x8A2D;&#x76EE;&#x524D;&#x6709;&#x4E00;&#x500B; module phone.py, &#x88E1;&#x9762;&#x5305;&#x542B;&#x4E86; utility for Pots phone, Isdn phone and G3 phone.<br>&#x5982;&#x4E0B;:</p>
<pre><code><span class="comment"># Phone.py</span>
<span class="function"><span class="keyword">def</span>  <span class="title">Pots</span><span class="params">()</span>:</span>
    <span class="keyword">print</span> &#x201C;I&#x2019;m Pots Phone&#x201D;

<span class="function"><span class="keyword">def</span> <span class="title">Isdn</span><span class="params">()</span>:</span>
    <span class="keyword">print</span> &#x201C;I&#x2019;m Isdn Phone&#x201D;

Def G3():
    <span class="keyword">print</span> &#x201C;I&#x2019;m G3 Phone&#x201D;
</code></pre><p>&#x4E8B;&#x5BE6;&#x4E0A;, &#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5C07;&#x5B83;&#x898F;&#x5283;&#x6210; package &#x7684;&#x5F62;&#x5F0F;,<br>&#x5982;&#x4E0B;&#xFF1A;  </p>
<pre><code>+ Phone
    <span class="command">\_</span><span class="command">\_</span>init<span class="command">\_</span><span class="command">\_</span>.py
    Pots.py
    Isdn.py
    G3.py
</code></pre><p>&#x900F;&#x904E;&#x5728; __init__.py&#x3000;&#x4E2D;, &#x5C07; sub-module &#x4E2D;&#x7684; utility &#x90FD; copy &#x51FA;&#x4F86;,<br>&#x5982;&#x4E0B;:</p>
<pre><code><span class="comment"># file: __init__.py</span>
<span class="keyword">from</span> Pots <span class="keyword">import</span> Pots    <span class="comment"># &#x5F9E; Pots &#x9019;&#x500B; sub-module &#x4E2D;, copy Pots &#x9019;&#x500B; attribute</span>
<span class="keyword">from</span> Isdn <span class="keyword">import</span> Isdn    <span class="comment"># &#x5F9E; Isdn &#x9019;&#x500B; sub-module &#x4E2D;, copy Isdn &#x9019;&#x500B; attribute</span>
<span class="keyword">from</span> G3 <span class="keyword">import</span> G3        <span class="comment"># &#x5F9E; G3 &#x9019;&#x500B; sub-module &#x4E2D;, copy G3 &#x9019;&#x500B; attribute</span>
</code></pre><p>&#x7528;&#x6236;&#x7AEF;&#x7684;&#x4EE3;&#x78BC;,<br>&#x5982;&#x4E0B;:</p>
<pre><code><span class="preprocessor"># test.py</span>
import Phone

Phone<span class="preprocessor">.Pots</span>()
Phone<span class="preprocessor">.Isdn</span>()
Phone<span class="preprocessor">.G</span>3()
</code></pre><p>Output:</p>
<pre><code><span class="keyword">I</span>&#x2019;m Pots Phone
<span class="keyword">I</span>&#x2019;m Isdn Phone
<span class="keyword">I</span>&#x2019;m G3 Phone
</code></pre><p>&#x9019;&#x6A23;&#x7684;&#x8A2D;&#x8A08;, &#x4E0D;&#x50C5;&#x80FD;&#x5920;&#x8B93;&#x4F7F;&#x7528;&#x8005;&#x66F4;&#x5BB9;&#x6613;&#x7406;&#x89E3;&#x9019;&#x4E9B; module, &#x4E5F;&#x80FD;&#x964D;&#x4F4E; module maintain &#x4E0A;&#x7684; efforts</p>
]]></content>
    <category scheme="http://mutsughost1.github.io/tags/Python/" term="Python"/>
    <category scheme="http://mutsughost1.github.io/tags/Study-Group/" term="Study Group"/>
    <category scheme="http://mutsughost1.github.io/categories/Software/" term="Software"/>
  </entry>
</feed>
