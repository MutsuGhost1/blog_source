{"Asset":{"gcvzisrjqzo69gts":{"_id":"gcvzisrjqzo69gts","source":"source/todolist/index.md","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/source/todolist/index.md","path":"todolist/index.md"},"ycomiavdze42mt7w":{"_id":"ycomiavdze42mt7w","source":"themes/light/source/fancybox/blank.gif","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/fancybox/blank.gif","path":"fancybox/blank.gif"},"43coyp5210tgc1se":{"_id":"43coyp5210tgc1se","source":"themes/light/source/fancybox/fancybox_loading.gif","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif"},"qajjjtl8hafj18tn":{"_id":"qajjjtl8hafj18tn","source":"themes/light/source/fancybox/fancybox_loading@2x.gif","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif"},"7wo8c8jmwfg74fpe":{"_id":"7wo8c8jmwfg74fpe","source":"themes/light/source/fancybox/fancybox_overlay.png","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png"},"8sjkgt2auffd0f55":{"_id":"8sjkgt2auffd0f55","source":"themes/light/source/fancybox/fancybox_sprite.png","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png"},"r15pbiz46f3pel8u":{"_id":"r15pbiz46f3pel8u","source":"themes/light/source/fancybox/fancybox_sprite@2x.png","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png"},"584nilc85u3lgqel":{"_id":"584nilc85u3lgqel","source":"themes/light/source/fancybox/jquery.fancybox.css","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css"},"u0g4xnte4lmnfjdi":{"_id":"u0g4xnte4lmnfjdi","source":"themes/light/source/fancybox/jquery.fancybox.pack.js","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js"},"iarccn0n2p1e8vhu":{"_id":"iarccn0n2p1e8vhu","source":"themes/light/source/js/gallery.js","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/js/gallery.js","path":"js/gallery.js"},"seb5m8e51bjuo0hw":{"_id":"seb5m8e51bjuo0hw","source":"themes/light/source/js/jquery.imagesloaded.min.js","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js"},"o3ty0iybtxp9q2zp":{"_id":"o3ty0iybtxp9q2zp","source":"themes/light/source/css/style.styl","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/css/style.styl","path":"css/style.styl"},"pm1704tgt65v1cld":{"_id":"pm1704tgt65v1cld","source":"themes/light/source/css/font/fontawesome-webfont.eot","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot"},"lgmp0fxq84shnnnr":{"_id":"lgmp0fxq84shnnnr","source":"themes/light/source/css/font/fontawesome-webfont.svg","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg"},"pp0oro3lio013oh5":{"_id":"pp0oro3lio013oh5","source":"themes/light/source/css/font/fontawesome-webfont.ttf","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf"},"fky68rhy6thc2qd1":{"_id":"fky68rhy6thc2qd1","source":"themes/light/source/css/font/fontawesome-webfont.woff","mtime":1401655984000,"modified":false,"full_source":"/home/liweicheng/Github/blog_source/themes/light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff"}},"Cache":{"ym01aa5qzs4xngny":{"_id":"ym01aa5qzs4xngny","content":"title: About This Blog\ndate: 2013-09-29 19:23:42\ncategories: Software\ntags: [Blog]\n---\n這個 blog 是使用 [hexo](http://zespia.tw/hexo/ \"hexo\") 這套軟體產生的.  \n主要參考了以下連結:  \n<!--more-->\n1. [hexo 系列教程](http://zipperary.com/categories/hexo/)  \n2. [自訂 RSS 與新增 Disqus 留言板](http://code.kpman.cc/2013/04/28/%E5%AE%A2%E8%A3%BD%E5%8C%96hexo-light-theme/)  \n * [Disqus Widget 語法參考](http://www.digitalhubinc.com/2013/06/Disqus-Various-Widget-Code-for-Blogger-and-Wordpress-Blog.html#.UkgNLtKBlTo \"Combination Widget 已經不支援了喔!\")  \n3. [新增 Twitter Widget](http://www.authormedia.com/how-to-add-a-twitter-widget-to-your-sidebar/)  \n4. [產生 SiteMap](http://zipperary.com/2013/06/02/hexo-guide-5/)\n\n此外, 為了讓 Website 能夠利用 Google 做站內搜尋  \n\n1. [到 Google 註冊網站](https://www.google.com/webmasters/tools/home?hl=zh-TW)  \n2. [將 SiteMap 上傳到 Google ](http://tosian.blogspot.tw/2008/04/google-google-sitemap.html)  \n\n製作自己的 Avatar  \n\n*  [Gravatar](https://en.gravatar.com/)  \n\n撰寫 Markdown 文件使用的 Editor\n\n* [MarkdownPad](http://markdownpad.com/)","mtime":1401655984000,"source":"source/_posts/about-this-blog.md"},"9x3g1nwldokvkdel":{"_id":"9x3g1nwldokvkdel","content":"title: Mockito Basic\ndate: 2014-05-18 08:48:44\ntags: Software Testing\n---\n\n* ## Learning Mockito with examples ##\n    1.  **[Verify some behavior (ignore any return value)](#1)**\n    2.  **[Verify some behavior with stubbing the return value](#2)**\n    3.  **[Verify unstubbing behavior](#3)**\n    4.  **[Argument matcher](#4)**\n    5.  **[Verify exact number of invocations](#5)**\n    6.  **[Verification in order](#6)**\n    7.  **[Finding redundant invocations](#7)**\n    8.  **[Stubbing consecutive calls](#8)**\n    9.  **[Stubbing with callbacks](#9)**\n    10. **[doReturn()|doThrow()|doAnswer()|doNoting()|doCallRealMethod() family of methods](#10)**\n    11. **[reset mock](#11)**\n    12. **[Capturing Argument](#12)**\n    13. **[Changing default return values of unstubbed invocations](#13)**\n    14. **[Inject mock/spy object into tested target](#14)**\n    15. **[Verify with timeout](#15)**\n\n<!--more-->\n- - -\n* ## Basic Concepts ##\n    * 撰寫 Unit Test 的 3A 原則:\n        1. Arrange: \n            * Set up th object to be tested.\n            * We may need to surround the object with collaborators. <br> For testing purposes, those collaborators minght be test objects (mocks, fakes, etc...) or the real ting.\n        2. Act:\n            * Act on the object. (invoke the tested method with parameters.)\n        3. Assert:\n            * Make claims about the object, its collaborators, its parameters and possibly global state.\n            * In other words, verify the test result.\n\n- - -\n<a name=1></a>\n### verify somw behavior (ignore any return value) ###\n\n    @SuppressWarnings(\"unchecked\")\n    public void test01(){\n\n    \t// Arrange\n    \t// Create the mock object, even it's an interface\n    \tList<String> mockedList = (List<String>)mock(List.class);\n\n    \t// Act\n    \t// Action on the object\n    \tmockedList.add(\"one\");\n    \tmockedList.clear();\n    \t\n    \t// Assert\n    \t// Verify the result\n    \tverify(mockedList).add(\"one\");\n    \tverify(mockedList).clear();\n    \t\n    \t// Act\n    \t// Action on the object\n    \tmockedList.add(\"one\");\n    \tmockedList.clear();\n    \t\n    \t// Assert\n    \t// Verify the result.\n    \t// The interactions should be accumulated unless the mock object is reset\n    \tverify(mockedList, times(2)).add(\"one\");\n    \tverify(mockedList, times(2)).clear();\n    }\n\n- - -\n<a name=2></a>\n### verify some behavior with stubbing the return value ###\n\n    @SuppressWarnings(\"unchecked\")\n    public void test02(){\n        // Arrange\n        // Create the mock object, it can be a concrete class\n        LinkedList<String> mockedList = (LinkedList<String>) mock(LinkedList.class);\n\n        // Act\n        // Stubbing it.\n        // Make it return what you want\n        when(mockedList.get(0)).thenReturn(\"first\");\n        // The latter stubbing will override the former one\n        when(mockedList.get(0)).thenReturn(\"firstfirst\");\n        System.out.println(\"test02:\" + mockedList.get(0));\n        System.out.println(\"test02:\" + mockedList.get(0));\n\n        // Assert\n        verify(mockedList, times(2)).get(0);\n    }\n\n**Output:**\n    \n    test02:firstfirst\n    test02:firstfirst\n\n- - -\n<a name=3></a>\n### verify unstubbing behavior ###\n\n    @SuppressWarnings(\"unchecked\")\n    public void test03(){\n        // Arrange\n        // Create the mock object, it can be a concrete class\n        LinkedList<String> mockedList = (LinkedList<String>) mock(LinkedList.class);\n\n        // Act\n        // The default return value for object is null.\n        // For primitive type, the default value for int is 0.\n        //                   , the default value for boolean is false.\n        System.out.println(\"test03:\" + mockedList.get(0));\n\n        // Assert\n        // times(1) is the default value, if you don't specify it\n        verify(mockedList, times(1)).get(0);\n    }\n\n**Output:**\n\n    test03:null\n\n- - -\n<a name=4></a>\n### argument matching using default matcher ###\n\n    // Argument Matching Using Default Matcher\n    @SuppressWarnings(\"unchecked\")\n    public void test04(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n        when(mockedList.get(anyInt())).thenReturn(\"stubbing string\");\n        \n        // Act\n        for(int i=0 ; i<10; i++){\n            System.out.println(\"[\"+ i + \"]:\" + mockedList.get(i));\n        }\n\n        // Assert\n        verify(mockedList, times(10)).get(anyInt());\n    }\n\n**Output:**\n    \n    [0]:stubbing string\n    [1]:stubbing string\n    [2]:stubbing string\n    [3]:stubbing string\n    [4]:stubbing string\n    [5]:stubbing string\n    [6]:stubbing string\n    [7]:stubbing string\n    [8]:stubbing string\n    [9]:stubbing string\n\n- - -\n### argument matching using customized matcher ###\n\n    @SuppressWarnings(\"rawtypes\")\n    private class IsListOfTwoElements extends ArgumentMatcher<List>{\n        @Override\n        public boolean matches(Object argument) {\n            return 2 == ((List)argument).size();\n        }\n        \n    }\n    \n    @SuppressWarnings(\"rawtypes\")\n    private List listOfTwoElements(){\n        return argThat(new IsListOfTwoElements());\n    }\n    \n    // Argument Matching Using Custom Matcher\n    @SuppressWarnings(\"unchecked\")\n    public void test05(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n        when(mockedList.addAll(listOfTwoElements())).thenReturn(true);\n\n        // Act\n        mockedList.addAll(Arrays.asList(\"one\", \"two\"));\n\n        // Assert\n        verify(mockedList).addAll(listOfTwoElements());\n    }\n\n- - -\n<a name=5></a>\n### verify exact number of invocation ###\n\n    @SuppressWarnings(\"unchecked\")\n    public void test06(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n\n        // Act\n        mockedList.add(\"one\");\n        mockedList.add(\"two\");\n        mockedList.add(\"two\");\n        mockedList.add(\"three\");\n        mockedList.add(\"three\");\n        mockedList.add(\"three\");\n\n        // Assert\n        verify(mockedList).add(\"one\");\n        verify(mockedList, times(1)).add(\"one\");\n        verify(mockedList, times(2)).add(\"two\");\n        verify(mockedList, times(3)).add(\"three\");\n        \n        verify(mockedList, never()).add(\"none\");\n        verify(mockedList, atLeastOnce()).add(\"one\");\n        verify(mockedList, atLeast(2)).add(\"two\");\n        verify(mockedList, atMost(5)).add(\"three\");\n    }\n\n\n- - -\n<a name=6></a>\n### verification in order, using single mock ###\n\n    public void test07(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> singleMock = (List<String>) mock(List.class);\n\n        // Act\n        singleMock.add(\"one\");\n        singleMock.add(\"two\");\n\n        // Assert\n        InOrder inOrder = inOrder(singleMock);\n        inOrder.verify(singleMock).add(\"one\");\n        inOrder.verify(singleMock).add(\"two\");\n    }\n\n- - -\n### verification in order, using multiple mock ###\n\n    @SuppressWarnings(\"unchecked\")\n    public void test08(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> firstMock = (List<String>) mock(List.class);\n        List<String> secondMock = (List<String>) mock(List.class);\n\n        // Act\n        firstMock.add(\"one\");\n        secondMock.add(\"two\");\n        firstMock.add(\"three\");\n        secondMock.add(\"four\");\n\n        // Assert\n        // Verification in order is flexible - you don't have to\n        //   verify all interactions one-by-one but only those you're\n        //   interested in testing in order\n        InOrder inOrder = inOrder(firstMock, secondMock);\n        inOrder.verify(firstMock).add(\"one\");\n        inOrder.verify(secondMock).add(\"two\");\n        // it still passes, even marks it as comment\n        inOrder.verify(firstMock).add(\"three\");\n        inOrder.verify(secondMock).add(\"four\");\n    }\n\n- - -\n<a name=7></a>\n### finding redundant invocations ###\n\n    public void test09(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n\n        // Act\n        mockedList.add(\"one\");\n        mockedList.add(\"two\");\n\n        // Assert\n        verify(mockedList).add(\"one\");\n        verify(mockedList).add(\"two\"); // mark it to fail\n        \n        verifyNoMoreInteractions(mockedList);\n    }\n\n- - -\n<a name=8></a>\n### stubbing consecutive calls (iterator-style stubbing) ###\n\n    @SuppressWarnings(\"unchecked\")\n    public void test10(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n\n        // Act\n        when(mockedList.get(0)).thenReturn(\"0\").thenReturn(\"1\");\n        // the usage above is equal to the below\n        // when(mockedList.get(0)).thenReturn(\"0\",\"1\");\n\n        // Assert\n        assertTrue(\"0\".equals(mockedList.get(0)));\n        assertTrue(\"1\".equals(mockedList.get(0)));\n    }\n\n- - -\n<a name=9></a>\n### stubbing with callbacks ###\n\n    // stubbing with callback\n    //   it can be used to simulate the response callback\n    public void test11(){\n        // Arrange\n        Util mock = mock(Util.class);\n\n        // Act\n        when(mock.asyncCall()).thenAnswer(new Answer(){\n            @Override\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                // do the response call\n                System.out.println(\"test11: answer callback\");\n                return Boolean.valueOf(true);\n            }\n        });\n\n        // Assert\n        assertTrue(mock.asyncCall());\n        verify(mock).asyncCall();\n    }\n\n- - -\n<a name=10></a>\n### doReturn using mock ###\n\n    // doReturn using mock\n    public void test12(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n\n        // Act\n        // When you use mock, it's equal to when(mockedList.get(0)).thenReturn(\"0\")\n        doReturn(\"one\").when(mockedList).get(0);\n        // when(mockedList.get(0)).thenReturn(\"0\");\n        \n        // Assert\n        assertTrue(\"one\".equals(mockedList.get(0)));\n        verify(mockedList).get(0);\n    }\n\n- - -\n### doReturn using spy ###\n\n    // doReturn using spy\n    public void test13(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> spyList = (List<String>) spy(new LinkedList<String>());\n\n        // Act\n        // When you use spy, it's not equal to when(spyList.get(0)).thenReturn(\"0\")\n        doReturn(\"one\").when(spyList).get(0);\n        // when(spyList.get(0)).thenReturn(\"0\");\n        \n        // Assert\n        assertTrue(\"one\".equals(spyList.get(0)));\n        verify(spyList).get(0);\n    }\n\n- - -\n### doThrow ###\n\n    // doThrow\n    @SuppressWarnings(\"unchecked\")\n    public void test14(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n        \n        // it's equal to\n        // doThrow(new RuntimeException()).when(mockedList).toString();\n        doThrow(RuntimeException.class).when(mockedList).toString();\n        \n        try{\n            System.out.println(mockedList);\n        }catch(RuntimeException e){\n            /// pass\n        }\n    }\n\n- - -\n### doAnswer ###\n\n    // rewrite case 10 using doAnswer\n    @SuppressWarnings(\"rawtypes\")\n    public void test15(){\n        // Arrange\n        Util mock = mock(Util.class);\n\n        // Act\n        doAnswer(new Answer(){\n            @Override\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                // do the response call\n                System.out.println(\"test15: answer callback\");\n                return Boolean.valueOf(true);\n            }\n        }).when(mock).asyncCall();\n\n        // Assert\n        assertTrue(mock.asyncCall());\n        verify(mock).asyncCall();\n    }\n\n**Output:**\n\n    test15: answer callback\n    test15: answer callback\n\n- - -\n### doNothing ###\n\n    // doNothing\n    // it's rarely to use doNothing, the following is an example\n    @SuppressWarnings(\"unchecked\")\n    public void test16(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n        doNothing().doThrow(new RuntimeException()).when(mockedList).clear();\n\n        // Act\n        // does nothing the first time:\n        mockedList.clear();\n        \n        try{\n            // throws RuntimeException the next time:\n            mockedList.clear();\n        }catch(RuntimeException e){\n            \n        }\n    }\n\n- - -\n### doRealCall ###\n\n    private class Util2{\n        public String A(){\n            return \"A\";\n        }\n\n        private String B(){\n            return \"B\";\n        }\n        \n        public String AB(){\n            return A() + B();\n        }\n    }\n    \n    // doRealCall\n    // mock object can also be used to do partial mock\n    public void test17(){\n        Util2 mockUtil2 = mock(Util2.class);\n        assertTrue(null == mockUtil2.A());\n\n        when(mockUtil2.A()).thenCallRealMethod();\n        assertTrue(\"A\".equals(mockUtil2.A()));\n        \n        // mark any one to fail\n        when(mockUtil2.B()).thenCallRealMethod();\n        when(mockUtil2.AB()).thenCallRealMethod();\n        assertTrue(\"AB\".equals(mockUtil2.AB()));\n    }\n\n- - -\n<a name=11></a>\n### reset mock ###\n\n    // reset mock\n    @SuppressWarnings(\"unchecked\")\n    public void test18(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n        \n        // Act\n        mockedList.get(0);\n        reset(mockedList);\n\n        // Assert\n        verify(mockedList, never()).get(0);\n    }\n\n\n- - -\n<a name=12></a>\n### capturing arguments##\n\n    // capturing arguments for further assertions\n    @SuppressWarnings(\"unchecked\")\n    public void test19(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List<String> mockedList = (List<String>) mock(List.class);\n        ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class);\n        \n        // Act\n        mockedList.add(\"Hello World\");\n        mockedList.add(\"two\");\n        mockedList.add(\"three\");\n        \n        // Assert\n        verify(mockedList, times(3)).add(argument.capture());\n        \n        System.out.println(\"test19:\" + argument.getAllValues());\n        // print the argument of last call\n        System.out.println(\"test19:\" + argument.getValue());\n    }\n\n**Output:**\n\n    test19:[Hello World, two, three]\n    test19:three\n\n- - -\n<a name=13></a>\n### change the default value of unstubbed invocations (using RETURNS\\_SMART\\_NULLS)###\n\n    // change the default value of unstubbed invocations\n    //   use RETURNS_SMART_NULLS to know which null pointer exception\n    //   is caused by unstubing\n    @SuppressWarnings(\"rawtypes\")\n    public void test20(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        List mockedList =  mock(List.class, RETURNS_SMART_NULLS);\n        ListIterator iterator = mockedList.listIterator();\n        \n        try{\n            System.out.println(\"test20:\" + iterator.nextIndex());\n        }catch(SmartNullPointerException e){\n            \n        }\n    }\n\n- - -\n### change the default value of unstubbed invocations (using CALLS\\_REAL\\_METHODS)###\n\n\tpublic class PartialMockObject {\n\t    public String m1(){\n\t        return \"PartialMockObject:\" + \"m1\";\n\t    }\n\t    \n\t    public String m2(){\n\t        return p() + \"m3\";\n\t    }\n\t    \n\t    public String m3(){\n\t        return pp() + \"m3\";\n\t    }\n\t    \n\t    public String p(){\n\t        return \"PartialMockObject:\";\n\t    }\n\t    \n\t    private String pp(){\n\t        return p();\n\t    }\n\t}\n\n    // change the default value of unstubbed invocations\n    //   use CALLS_REAL_METHODS to simulate partial mock\n    public void test24(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        PartialMockObject mock =  mock(PartialMockObject.class, CALLS_REAL_METHODS);\n        PartialMockObject spy = spy(new PartialMockObject());\n        \n        when(mock.m3()).thenReturn(\"m3 is stubbed\");\n        System.out.println(\"test24: mock.m1()=\" + mock.m1());\n        System.out.println(\"test24: mock.m2()=\" + mock.m2());\n        System.out.println(\"test24: mock.m3()=\" + mock.m3());\n\n        when(spy.m3()).thenReturn(\"m3 is stubbed\");\n        System.out.println(\"test24: spy.m1()=\" + spy.m1());\n        System.out.println(\"test24: spy.m2()=\" + spy.m2());\n        System.out.println(\"test24: spy.m3()=\" + spy.m3());\n    }\n\n**Output:**\n\n    test24: mock.m1()=PartialMockObject:m1\n    test24: mock.m2()=PartialMockObject:m3\n    test24: mock.m3()=m3 is stubbed\n    test24: spy.m1()=PartialMockObject:m1\n    test24: spy.m2()=PartialMockObject:m3\n    test24: spy.m3()=m3 is stubbed\n\n- - -\n<a name=14></a>\n### inject mock/spy into tested target (using constructor) ###\n\n    public class SUT {\n\t    List<String> mList;\n\t    \n\t    public SUT(List<String> list){\n\t\t    System.out.println(\"SUT's constructor\");\n\t\t    System.out.println(\"SUT's mList:\" + mList);\n\t\t    mList = list;\n    \t}\n    \n\t    public String get(int index){\n\t\t    return mList.get(index);\n\t    }\n    \n\t    public boolean put(String obj){\n\t\t    return mList.add(obj);\n\t    }\n\t    \n\t    @Override\n\t\tpublic boolean equals(Object obj) {\n\t\t    System.out.println(\"SUT'equals: (SUT)obj).mList =\" + ((SUT)obj).mList);\n\t\t    System.out.println(\"SUT'equals: mList =\" + mList);\n\t\t    return ((SUT)obj).mList == mList;\n\t    }\n    }\n\n**Output:**\n\n    test21: start\n    SUT's constructor\n    SUT's mList:null\n    SUT2's constructor\n    SUT3's constructor\n    SUT's constructor\n    SUT's mList:null\n    SUT'equals: (SUT)obj).mList =mList\n    SUT'equals: mList =mList\n    test21: end\n\n- - -\n### inject mock/spy into tested target (using setter) ###\n\n\tpublic class SUT2 {\n\t    List<String> mList2;\n\t    \n\t    public SUT2(){\n\t        System.out.println(\"SUT2's constructor\");\n\t    }\n\t    \n\t    public String get(int index){\n\t        return mList2.get(index);\n\t    }\n\t    \n\t    public boolean put(String obj){\n\t        return mList2.add(obj);\n\t    }\n\t    \n\t    public void setList(List<String> list){\n\t        System.out.println(\"SUT2's setList\");\n\t        mList2 = list;\n\t    }\n\t\n\t    @Override\n\t    public boolean equals(Object obj) {\n\t        System.out.println(\"SUT2's equals: (SUT2)obj).mList2 =\" + ((SUT2)obj).mList2);\n\t        System.out.println(\"SUT2's equals: mList2 =\" + mList2);\n\t        return ((SUT2)obj).mList2 == mList2;\n\t    }\n\t}\n\n    // dependency injection using the setter\n    @Mock private List<String> mList2;\n    @InjectMocks private SUT2 mSUT2;\n    public void test22(){\n        // Arrange\n        System.out.println(\"test22: start\");\n        MockitoAnnotations.initMocks(this);\n        // Act\n        // Assert\n        assertNotNull(mList2);\n        assertNotNull(mSUT2);\n        \n        SUT2 sut2 = new SUT2();\n        sut2.setList(mList2);\n        assertTrue(mSUT2.equals(sut2));\n        System.out.println(\"test22: end\");\n    }\n\n**Output:**\n\n    test22: start\n    SUT's constructor\n    SUT's mList:null\n    SUT2's constructor\n    SUT3's constructor\n    SUT2's constructor\n    SUT2's setList\n    SUT2's equals: (SUT2)obj).mList2 =mList2\n    SUT2's equals: mList2 =mList2\n    test22: end\n\n- - -\n### inject mock/spy into tested target (using field) ###\n\n\tpublic class SUT3 {\n\t    List<String> mList3;\n\t    \n\t    public SUT3(){\n\t        System.out.println(\"SUT3's constructor\");\n\t    }\n\t    \n\t    public String get(int index){\n\t        return mList3.get(index);\n\t    }\n\t    \n\t    public boolean put(String obj){\n\t        return mList3.add(obj);\n\t    }\n\t\n\t    @Override\n\t    public boolean equals(Object obj) {\n\t        System.out.println(\"SUT3's equals: (SUT3)obj).mList3 =\" + ((SUT3)obj).mList3);\n\t        System.out.println(\"SUT3's equals: mList3 =\" + mList3);\n\t        return ((SUT3)obj).mList3 == mList3;\n\t    }\n\t}\n\n    // dependency injection using field\n    @Mock(name=\"mList3\") private List<String> mLIST3;\n    @InjectMocks private SUT3 mSUT3;\n    public void test23(){\n        // Arrange\n        System.out.println(\"test23: start\");\n        MockitoAnnotations.initMocks(this);\n        // Act\n        // Assert\n        assertNotNull(mLIST3);\n        assertNotNull(mSUT3);\n        \n        SUT3 sut3 = new SUT3();\n        sut3.mList3 = mLIST3;\n        assertTrue(mSUT3.equals(sut3));\n        System.out.println(\"test23: end\");\n    }\n\n**Output:**\n    \n    test23: start\n    SUT's constructor\n    SUT's mList:null\n    SUT2's constructor\n    SUT3's constructor\n    SUT3's constructor\n    SUT3's equals: (SUT3)obj).mList3 =mList3\n    SUT3's equals: mList3 =mList3\n    test23: end\n\n- - -\n<a name=15></a>\n### verify with timeout ###\n\n    @SuppressWarnings(\"unchecked\")\n    public void test25(){\n        // Arrange\n        // Create the mock object, even it's an interface\n        final List<String> mockedList = (List<String>) mock(List.class);\n\n        // Act\n        // When you use mock, it's equal to when(mockedList.get(0)).thenReturn(\"0\")\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try{\n                    Thread.sleep(2500);\n                    // when(mockedList.get(0)).thenReturn(\"0\");\n                    doReturn(\"one\").when(mockedList).get(0);\n                    assertTrue(\"one\".equals(mockedList.get(0)));\n                } catch(InterruptedException e){\n                    \n                }\n            }\n        });\n        t1.start();\n\n        // Assert\n        long start, end, elapsed;\n        start = System.currentTimeMillis();\n        // if the condition is satisfied, it won't be blocked\n        verify(mockedList, timeout(3000)).get(0);\n        end = System.currentTimeMillis();\n        elapsed = end - start;\n        assertTrue(elapsed > 2000);\n    }\n\n\n- - -\n    \n* [Reference]\n    * [1] [Mockito Official Website](http://code.google.com/p/mockito/)\n    * [2] [30天快速上手TDD](http://msdn.microsoft.com/zh-tw/library/dn167673.aspx)\n","mtime":1401657037000,"source":"source/_posts/learning-mockito.md"},"8oxe5k5nc2b0plml":{"_id":"8oxe5k5nc2b0plml","content":"title: Python Basic\ndate: 2013-09-29 20:45:42\ncategories: Software\ntags: [Python, Study Group]\n---\n* [Python's Folder Structure](#python_folder_structure \"Python's Folder Structure\")\n* [關於 *yield*](#yield_about \"關於 yield\")\n    *  [yield 是為何而生 ?](#yield_history \"yield 是為何而生 ?\")\n    *  [yield 的各種用法](#yield_usage \"yield 的各種用法\")\n        *  [yield 的基本運作原理](#yield_fundamental \"的基本運作原理\")\n        *  [send(expression) - pass a value to generator](#yield_send \"send(expression)\")\n        *  [throw(type[,value[,traceback]]) - raise exception inside generator](#yield_throw \"throw\")\n        *  [close() - terminate the generator](#yield_close \"close()\")\n        *  [generator expression - 快速產生一個 generator object](#yield_generator_exp \"generator expression\")\n    *  [Reference](#yield_reference)\n* Python Scope 概念\n* [其他](#others \"其他\")\n    * [List Comprehesion](http://www.python.org/dev/peps/pep-0202/ \"PEP202\") \n    * [Lambda expression](#lambda_exp \"Lambda expression\")\n    * [Built-in Funtion map](#built_in_map \"Built-in Funtion map\")\n    * [Built-in Funtion reduce](#built_in_reduce \"Built-in Funtion reduce\")\n    * [Built-in Funtion filter](#built_in_filter \"Built-in Funtion filter\")\n    * [Built-in Funtion zip](#built_in_zip \"Built-in Funtion zip\")\n<!--more-->\n- - -\n\n<a name=python_folder_structure></a>\n# *Python's Folder Structure* #\n在開始使用 Python 之前, 必須先在系統裝[安裝 Python 的執行環境](http://www.python.org/getit/), 安裝完後會發現, 預設的資料夾結構如下:\n\n![](http://MutsuGhost1.github.io/image/python_install1.PNG)\n\n\n* 在 PythonXX --> Lib 目錄中, 可以看到 Python Built-in Module 的 Source Code  \n* 在 PythonXX --> Lib --> site-packages 目錄中, 可以看到安裝的 3rd Party Package\n\n![](http://MutsuGhost1.github.io/image/python_install2.PNG)\n  \n- - -\n\n<a name=yield_about></a>\n# 關於 *yield* 用法 #\n<a name=yield_history></a>\n## yield 是為何而生 ? ##\n\n在 [PEP255](http://www.python.org/dev/peps/pep-0255 \"PEP255\") 中,有一段話是這麼描述的  \n\n> *When a producer function has a hard enough job that it requires\n> maintaining state between values produced, most programming languages\n> offer no pleasant and efficient solution beyond adding a callback\n> function to the producer's argument list, to be called with each value produced*  \n\n當一個複雜的 producer function, 為了在每次被呼叫時, 正確的 produce 出資料, 必須在 producer function  \n內實作一些複雜的 states 使得資料可以被正確產生.  \n\n[以 Fibonacci Series 為例](http://en.wikipedia.org/wiki/Fibonacci_number \"Fibonacci Series in Wiki\")\n\n    # fib0.py produce 出 n 個 number 的 fibonacci series\n    def fib0(end):\n        a, b = 0, 1\n        for i in range(end):\n            a, b = b, a + b\n            print \"i=\", i, \" a=\", a\n    \n    def main():\n        fib0(10)\n\n    if __name__ == '__main__':\n        main()\n\nOutput:  \n\n    i= 0 a= 1\n    i= 1 a= 1\n    i= 2 a= 2\n    i= 3 a= 3\n    i= 4 a= 5\n    i= 5 a= 8\n    i= 6 a= 13\n    i= 7 a= 21\n    i= 8 a= 34\n    i= 9 a= 55\n  \n上述 **fib0.py** 的做法, 只能一次 produce 出所有的 numbers, 若要做成每次呼叫才 produce 出 number,  \n必須由 programmer 定義額外的 states 來做處理, 類似的做法如下:\n    \n    # fib1.py produce 出 n 個 number 的 fibonacci series\n    # global variable to keep state\n    fib_state_cur = 0\n    fib_state_end = 0\n    fib_state_a = 0\n    fib_state_b = 1\n    def fib1(end=-1):\n        # use global variable to keep state\n        global fib_state_cur, fib_state_end, fib_state_a, fib_state_b\n    \n        # reset state for each new call\n        if 0 < end:\n            fib_state_cur = 0\n            fib_state_end = end\n            fib_state_a = 0\n            fib_state_b = 1\n    \n        # restore the state for each call\n        start = fib_state_cur\n        end = fib_state_end\n        a, b = fib_state_a, fib_state_b\n    \n        for i in range(start, end):\n            a, b = b, a + b\n            # keep the state\n            fib_state_cur = i+1\n            fib_state_a, fib_state_b = a, b\n            return a\n    \n    def main():\n        for i in range(10):\n            if 0 == i:\n                # first time to initialize the number of items\n                print \"i=\", i, \"a=\", fib1(10)\n            else:\n                # get the next number\n                print \"i=\", i, \"a=\", fib1()\n    \n    if __name__ == '__main__':\n        main()\n    \nOutput:  \n\n    i= 0 a= 1\n    i= 1 a= 1\n    i= 2 a= 2\n    i= 3 a= 3\n    i= 4 a= 5\n    i= 5 a= 8\n    i= 6 a= 13\n    i= 7 a= 21\n    i= 8 a= 34\n    i= 9 a= 55\n\n\n大多數的程式語言, 針對這樣的問題在語法上並沒有直接的支援, 因此除了上述的做法外, 大多數折衷的做法都是提供  \ncallback function 給producer function 當作參數, 當每次資料被 produce 出來時, 透過 callback function 來通知 consumer.  \n\n為了對類似的需求, 有更好的支援, [PEP255](http://www.python.org/dev/peps/pep-0255 \"PEP255\") 被提出且實現於 Python 2.3 中, 在初版 [PEP255](http://www.python.org/dev/peps/pep-0255 \"PEP255\") 的定義中, yield 是一個 statement.\n\n透過 yield 的支援, 可將 **fib1.py** 簡化為 **fib2.py**, 如下:\n    \n    def fib2(end):\n        a, b = 0, 1\n        for i in range(end):\n            a, b = b, a + b\n            yield a\n    \n    def main():\n        i = 0\n        for a in fib2(10):\n            print \"i=\", i, \"a=\", a\n            i+=1  \n\nOutput:  \n\n    i= 0 a= 1\n    i= 1 a= 1\n    i= 2 a= 2\n    i= 3 a= 3\n    i= 4 a= 5\n    i= 5 a= 8\n    i= 6 a= 13\n    i= 7 a= 21\n    i= 8 a= 34\n    i= 9 a= 55\n\n到了 Python 2.5, 針對 yield 有更進一步的 enhancement [PEP342](http://www.python.org/dev/peps/pep-0342/ \"PEP342\"), 使其能夠較完善的處理 [Coroutine](http://en.wikipedia.org/wiki/Coroutine#Implementations_for_Python \"Coroutine in Wiki\") 這類的問題.  \n\n- - -\n<a name=yield_usage></a>\n## yield 的各種用法 ##\n由於 [PEP342](http://www.python.org/dev/peps/pep-0342/ \"PEP342\") 是針對 [PEP255](http://www.python.org/dev/peps/pep-0255 \"PEP255\") 的 enhancement, 因此以下直接針對 [PEP342](http://www.python.org/dev/peps/pep-0342/ \"PEP342\") 的各項用法, 一一做個說明.  \n[PEP255](http://www.python.org/dev/peps/pep-0255 \"PEP255\") 中, yield 是一個 statement.  \n[PEP342](http://www.python.org/dev/peps/pep-0342/ \"PEP342\") 中, yield 是一個 expression, 因此將 yield expression 的回傳值忽略掉當成 yield statement 來討論既可.  \n\n<a name=yield_fundamental></a>\n### yield 的基本運作原理 ###\n  \n首先, 先看看 Python 如何看待一個包含有 yield 語法的 function [1]:\n\n> A function which returns an iterator. It looks like a normal function except that it contains yield statements  \n> for producing a series a values usable in a for-loop or that can be retrieved one at a time with the next() function.  \n> Each yield temporarily suspends processing, remembering the location execution state  \n> (including local variables and pending try-statements).  \n> When the generator resumes, it picks-up where it left-off  (in contrast to functions which start fresh on every invocation).  \n\n上面這句話, 我們可以拆成幾個部份來理解:  \n\n1. 當一個 function 內包含了 yield 語法, 這個 function 就稱為 generator.  \n2. 這個 function (generator) 被呼叫時, 回傳一個 iterator (generator object).  \n3. iterator 內執行的代碼, 既為 function 內定義的代碼.  \n   唯一的差異是, 每次呼叫 next() 都會在 yield expression 處 suspend (儲存整個 context 的變數狀態)   \n   並且 return 其 yield 的 value 給 next() 的 caller\n4. 每次呼叫 next(), 都會從上一次結束的地方 resume (恢復整個 context 的變數狀態), 並繼續執行到下個 yield 處\n5. 若呼叫 next() 時, 代碼中已無 yield expression 可 suspend, 則產生 StopIterator Exception  \n\n下面的代碼, 驗證了上述的說法:\n    \n    # generator_demo.py  \n\n    # 1. define a function (generator)\n    def gen():\n        x = 100              # 第一次呼叫 next() 將於此開始執行\n        yield x              # 第一次 next() 呼叫後, 將 suspend 於此, 並回傳 x\n        x += 20              # 第二次呼叫 next() 將於此開始執行, 保有上次執行個變數內容的 context\n        yield x              # 第二次 next() 呼叫後, 將 suspend 於此, 並回傳 x\n                             # 第三次呼叫 next() 將觸發 StopIterator Exception\n    \n    def main():\n        print type(gen)      # 1. gen   型別為 <type 'function'>, 提供產生 generator(iterator) object\n        print type(gen())    # 2. gen() 型別為 <type 'generator'>\n        gen_var = gen()      \n        print gen_var        # gen_var 為一個 <generator object gen at 0x00DE8288>\n        print type(gen_var)  # gen_var 型別為 <type 'generator'>\n        print gen_var.next() # 3. 100\n        print gen_var.next() # 4. 120\n        print gen_var.next() # 5. raise StopIteratorException\n    \n    if __name__ == '__main__':\n        main() \n\nOutput:  \n    \n    <type 'function'>\n    <type 'generator'>\n    <type 'generator'>\n    <generator object gen at 0x00DE82B0>\n    100\n    120\n    Traceback (most recent call last):\n      File \"<module1>\", line 29, in <module>\n      File \"<module1>\", line 26, in main\n    StopIteration\n    \n歸納上述幾項重點:  \n\n*  **yield 基本上是搭配在 function 內部使用的**\n*  使用 yield 語法的 function, 又稱之為 generator\n*  generator 所產生的 generator object 是一個 iterator.\n*  generator 每次執行的 next() 代碼, 即為 function 內部的代碼, 差別在於\n    * next() 執行到 yield 處即 suspend, 並回傳 yield 的 value 給 next() caller  \n    * 每次執行 next() 將會從上次 suspend 處, 繼續 resume, 且保有上次 context 內的變數狀態\n* 若呼叫 next() 時, 代碼中已無 yield expression 可 suspend, 則產生 StopIterator Exception\n\n<a name=yield_send></a>\n## send(expression) - pass a value to generator ##\n理解完 [yield 的基本運作原理](#yield_fundamental \"的基本運作原理\"), 就很好理解 send 這個 method 的行為.  \nsend(expression) 和 next() 一樣, 是 trigger iterator 的執行, 直到遇到下一個 yield expression.  \n差異在於:  \n\n* send(expression) 是 [PEP342](http://www.python.org/dev/peps/pep-0342/ \"Coroutines via Enhanced Generators\") 提出, 在 Python 2.5 實現, 用來指定 yield expression 所 evaluate 的結果  \n* 這也是為何在 Python 2.5 中, yield 從 statement 變更為 expression 的原因之一\n* 在 Python 2.3, yield 還是一個 statement  \n\n下列代碼說明了, send(expression) 如何指令 yield expression 的結果.\n\n    # generator_send_demo.py\n\n    def gen2():\n        x = 100                     # 呼叫 next() 將於此開始執行\n        y = yield x                 # next() 呼叫後, 將 suspend 於此, 並回傳 x\n                                    # 呼叫 send(10) 將於此開始執行, 保有上次執行個變數內容的 context,  \n                                    # 將 send 指定的值 assign 給 y\n        x += y                      # send(10) 呼叫後, 執行此 statement, \n        y = yield x                 # send(10) 呼叫後, 將 suspend 於此, 並回傳 x\n                                    # 呼叫 send(20) 將於此開始執行, 保有上次執行個變數內容的 context,   \n                                    # 將 send 指定的值 assign 給 y\n        x += y                      # send(20) 呼叫後, 執行 statement,\n        yield x                     # send(20) 呼叫後, 將 suspend 於此, 並回傳 x\n    \n    def main():\n        gen_var2 = gen2()           # 產生一個 generator object 儲存於 gen_var2\n        print gen_var2.next()       # the same result with calling gen_var2.send(None)\n        print gen_var2.send(10)     # 執行 gen_var2.send()\n        print gen_var2.send(20)     # 執行 gen_var2.send()\n        print gen_var2.send(30)     # the same reslut with calling gen_var2.next(), \n                                    # raise StopIterator Exception\n\n    if __name__ == '__main__':\n        main() \n\nOutput:  \n\n    100\n    110\n    130\n    Traceback (most recent call last):\n      File \"<module1>\", line 49, in <module>\n      File \"<module1>\", line 35, in main\n    StopIteration\n\n這邊補充幾個重點:  \n\n* 可將 y = yield x 看成右半部跟左半部兩個動作, suspend 的時候執行右半部, resume 的時候才執行左半部的 assign.  \n* 透過 generator object, 第一次呼 iterate iterator 時, 只能使用 next() or send(None), 兩者等價 \n\n<a name=yield_throw></a>\n## throw(type[,value[,traceback]]) - raise exception inside generator ##\n[PEP342](http://www.python.org/dev/peps/pep-0342/ \"Coroutines via Enhanced Generators\") 提到, 想在 generator 中, suspend 在 iterator 的點, 產生 exception, 可以透過 throw 來達成.  \n\n參考下列代碼:  \n\n    # generator_throw_demo.py\n\n    def gen3():\n        x = 100                              # 呼叫 gen_var3.send(None) 將由此開始執行\n        try:\n            y = yield x                      # gen_var3.send(None) 呼叫後, 將 suspend 於此, 並回傳 x\n                                             # throw GeneratorExit 發生於此\n            x += y\n            y = yield x\n            x += y\n            yield x\n    except:                                  # 處理所有型態的 exception, 包含 GeneratorExit Exception\n        pass                                 # pass GeneratorExit Exception 的處理\n                                             # 由於沒有 yield expression 了, \n                                             # 因此 raise StopIterator Exception\n    \n    def main():\n        gen_var3 = gen3()                    # 產生一個 generator object 儲存於 gen_var3\n        print gen_var3.send(None)            # the same result with calling gen_var2.next()\n        print gen_var3.throw(GeneratorExit)  # 在 generator 內部產生一個 GeneratorExit Exception\n    \n    if __name__ == '__main__':\n        main()\n\nOutput:  \n\n    100\n    Traceback (most recent call last):\n      File \"<module1>\", line 47, in <module>\n      File \"<module1>\", line 33, in main\n    StopIteration\n\n此外, 由外部 trigger generator 內的 exception 後, 仍然可在內部的 exception handler 搭配 yield 繼續做處理.  \n\n參考下列代碼:  \n\n    # generator_throw_demo2.py\n\n    def gen3():\n        x = 100                               # 第一次 gen_var3.send(None) 將由此開始執行\n        try:\n            y = yield x                       # 第一次 gen_var3.send(None) 呼叫後, 將 suspend 於此,  \n                                              # 並回傳 x\n                                              # throw GeneratorExit 發生於此\n            x += y\n            y = yield x\n            x += y\n            yield x\n    except:                                   # 處理所有型態的 exception, 包含 GeneratorExit Exception\n        x +=10                                # throw GeneratorExit 發生後, 執行此 statement \n        yield x                               # throw GeneratorExit 發生後, 將 suspend 於此, 並回傳 x\n                                              # 第二次 gen_var3.send(None) 由此開始執行\n        x +=20                                # 第二次 gen_var3.send(None) 發生後, 執行此 statement\n        yield x                               # 第二次 gen_var3.send(None) 發生後, 將 suspend 於此, \n                                              # 並回傳 x\n    \n    def main():\n        gen_var3 = gen3()                     # 產生一個 generator object 儲存於 gen_var3\n        print gen_var3.send(None)             # the same result with calling gen_var2.next()\n        print gen_var3.throw(GeneratorExit)   # 在 generator 內部產生一個 GeneratorExit Exception\n        print gen_var3.send(None)             # the same result with calling gen_var2.next()\n        print gen_var3.send(None)             # the same result with calling gen_var2.next()\n\nOutput:  \n\n    100\n    110\n    130\n    Traceback (most recent call last):\n      File \"<module1>\", line 51, in <module>\n      File \"<module1>\", line 37, in main\n    StopIteration\n\n<a name=yield_close></a>\n## close() - terminate the generator ##\n[PEP342](http://www.python.org/dev/peps/pep-0342/ \"Coroutines via Enhanced Generators\") 提到, 當 generator object 不再使用時, 可以呼叫 close() method, 之後如果再呼叫 next() method 則會 raise StopIterator Exception.  \n\n參考下面代碼:  \n\n    # generator_close_demo.py\n\n    def gen2():\n        x = 100\n        y = yield x\n        x += y\n        y = yield x\n        x += y\n        yield x\n    \n    def main():\n        gen_var2 = gen2()\n        print gen_var2.send(None)\n        gen_var2.close()\n        print gen_var2.send(10)     # raise StopIterator Exception, if next() is called after close()\n        print gen_var2.send(20)\n    \n    if __name__ == '__main__':\n        main()\n\nOutput:\n\n    100\n    Traceback (most recent call last):\n      File \"<module1>\", line 46, in <module>\n      File \"<module1>\", line 31, in main\n    StopIteration\n\n<a name=yield_generator_exp></a>\n## generator expression - 快速產生一個 generator object ##\n除了透過定義包含 yield expression 的 function 外, 可以透過 Python 語法快速的產生 generator object.\n引述 [Python Glossary](http://docs.python.org/2.7/glossary.html#term-generator \"generator expression\") 的定義:\n\n> An expression that returns an iterator. It looks like a normal expression followed by a for expression defining a loop variable, range, and an optional if expression\n\n範例如下:\n\n    # generator_expression_demo.py\n\n    def main():\n        gen_exp = ((i+1)*(i+1) for i in range(10))  # 產生一個 generator object\n    \n        print type(gen_exp)\n        print gen_exp                               # 和 generator 產生出來的 object 印出來的資訊不太一樣\n    \n        for x in gen_exp:\n            print x\n    \n    if __name__ == '__main__':\n        main()\n\nOutput:\n    \n    <type 'generator'>\n    <generator object <genexpr> at 0x00DE82B0>\n    1\n    4\n    9\n    16\n    25\n    36\n    49\n    64\n    81\n    100\n\n這裡有一點要注意, generator expression 產生出來的 object 與 generator 產生出來的 object print 出來的結果有些不同.  \n\n  * print generator expression 產生的 object 會印出 &lt;generator object **&lt;genexpr&gt;** at 0x00DE82B0>\n  * print generator 產生的 object 會印出 &lt;generator object **gen** at 0x00DE82B0&gt;\n\n<a name=yield_reference></a>\n## Reference: ##\n\n * [1] [Definition for generator in python](http://docs.python.org/2.7/glossary.html#term-generator)\n * [2] [limodou的学习记录](http://blog.donews.com/limodou/archive/2006/09/04/1028747.aspx)\n * [3] [python yield 研究](http://dhcmrlchtdj.github.io/sia/post/2012-11-20/python_yield.html)\n * [4] [PEP255](http://www.python.org/dev/peps/pep-0255/ \"Simple Generators\")\n * [5] [PEP289](http://www.python.org/dev/peps/pep-0289/ \"Generator Expressions\")\n * [6] [PEP342](http://www.python.org/dev/peps/pep-0342/ \"Coroutines via Enhanced Generators\")\n * [7] [Python 深入理解yield](http://www.jb51.net/article/15717.htm)\n\n- - -\n<a name=others></a>\n# *其它* #\n\n<a name=lambda_exp></a>\n## Lambda Expression ##\nPython 中使用 Lambda Expression 的語法可以一個建立 Annonymous Function \n\nEx:\n\n    f = lambda x: x ** x\n    print(f(1))\n    print(f(2))\n    print(f(3))\n    print(f(4))\n    print(f(5))\n     \n    g = lambda x, y: x * y\n    print(g(1, 6))\n    print(g(2, 7))\n    print(g(3, 8))\n    print(g(4, 9))\n    print(g(5, 10))\n\nOutput:\n    \n    1\n    4\n    27\n    256\n    3125\n    6\n    14\n    24\n    36\n    50\n\n<a name=built_in_map></a>\n## Built-in Function map ##\n在探討 map function 之前, 讓我們先回憶一下國中時候學過的數學函數,  \n假設函數 f(x,y,..,z) 輸入一組 x1, y1, ..., z1 參數後, 可得到一個結果 r1,  \n現在我們準備 n 組資料 [(x1, y1, ..., z1), (x2, y2, ..., z2), ..., (xn, yn, ..., zn)] \n依序輸入給函數 f(x,y,...,z) 後,  \n可得到 n 個結果 [r1,r2, ..., rn], 如下圖所示:\n\n![](http://MutsuGhost1.github.io/image/python_map_function.PNG)\n\n事實上 map function 就是執行類似這樣的概念. map function 有兩組 input 參數:  \n1. function (對應到上述的函數 f)  \n2. 輸入 function 的參數, 參數個數必須與 function 參數匹配\n\n下列代碼展示 map function 的使用方法:\n    \n    def f(a,b,c):\n        return a*b*c\n    \n    def main():\n        lista = [1,2,3,4,5,6]\n        listb = [1,2,3,4,5,6]\n        listc = [1,2,3,4,5,6]\n        print map(f, lista, listb, listc)\n\nOutput:  \n\n    [1, 8, 27, 64, 125, 216]\n\n有一點要注意的事情, 當參數是一個 sequence 時, **各個 sequence 的參數不一致, 將取最長的為主, 不足補 None**.  \n最後, 附上 [Python 文件](http://docs.python.org/2/library/functions.html#map)上的說明:  \n\n*map(function, iterable, ...)*  \n\n>Apply function to every item of iterable and return a list of the results.\nIf additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. **If one iterable is shorter than another it is assumed to be extended with None items**. **If function is None, the identity function is assumed**; if there are multiple arguments, map() returns a list consisting of tuples containing the corresponding items from all iterables (a kind of transpose operation). The iterable arguments may be a sequence or any iterable object; **the result is always a list**.\n\n<a name=built_in_reduce></a>\n## Built-in Function reduce ##\n\n> Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value\n\nReduce 的 Pseudo Code, 類似下面這個範例:\n\n    def reduce(function, iterable, initializer=None):\n        it = iter(iterable)\n        \n        if initializer is None:\n        try:\n            initializer = next(it)\n        except StopIteration:\n            raise TypeError('reduce() of empty sequence with no initial value')\n        \n        accum_value = initializer\n        for x in it:\n            accum_value = function(accum_value, x)\n        return accum_value\n\nEx:  \n\n* reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5)\n\n<a name=built_in_filter></a>\n## Built-in Function filter ##\n\n> Construct a list from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list. I**f function is None, the identity function is assumed**, that is, all elements of iterable that are false are removed.\n\nEx:  \n\n* **filter(function, iterable)** is equivalent to **[item for item in iterable if function(item)]**\n\n<a name=built_in_zip></a>\n## Built-in Function zip ##\n\nzip function 做的事情, 如下圖:\n\n![](http://MutsuGhost1.github.io/image/python_zip_function.PNG)\n\nEx:\n    \n    >>> a = [1,2,3]\n    >>> b = [4,5,6]\n    >>> c = [4,5,6,7,8]      # 以短的為主\n    >>> zipped = zip(a,b)\n    [(1, 4), (2, 5), (3, 6)]\n    >>> zip(a,c)\n    [(1, 4), (2, 5), (3, 6)]\n    >>> zip(*zipped)         # unzip 回原來模樣\n    [(1, 2, 3), (4, 5, 6)]\n","mtime":1401657047000,"source":"source/_posts/python-basic.md"},"o4itd67bl8c3qyg4":{"_id":"o4itd67bl8c3qyg4","content":"title: Python Module Package\ndate: 2013-09-27 14:54:50\ncategories: Software\ntags: [Python, Study Group]\n---\n\n* [What's a python module ?](#what_module \"What's a python module ?\")\n* [Why use modules ?](#why_module \"Why use modules ?\")\n* [How to use/write modules ?](#how_module \"How to use/write modules ?\")\n* [Module search Path ?](#module_search_path \"Module search Path\")\n* [Reload your module after applying any change ?](#reload_module \"Reload your module after applying any change\") \n* [What's package ?](#what_package \"What's package ?\")\n* [Why use packaes ?](#why_package \"Why use packaes ?\")\n* [How to use packages ?](#how_package \"How to use packages ?\")\n* [An example to refactor a module as a package](#package_example \"An example to refactor a module as a package\")\n\n<!--more-->\n- - -\n<a name=what_module></a>\n# What's a python module ? #\n\n在 Python 中, 每一個檔案都是一個 Python Module, 通常以 py 做為其副檔名\n  \n> 定義上, python module 個包含了 python definitions 以及 python executable statements.  \n> python definitions 通常是指 variable definitions, function definitions and class definitions.  \n\nPython module 只會在第一次被 import 的時候被執行. 被 import module 會在目前執行的 global namespace 中,  \n建立一個屬於此 module 的 namespace. 在預設下, 這個 module 的 namespace 會是 module name.  \n任何人可以透過這個 module name 來存取 module 內的各項 attributes.  \n\n下面的例子即為一個 Module:\n\n    # A python module fibo.py\n    \n    __VERSION = \"Version 1\"  # variable definition\n    \n    def fibo(n):             # function definition\n        pass\n\n    # you can define your class here\n\n    if \"__main__\" == __name__:\n        pass                 # write executable statements\n  \n- - -\n<a name=why_module></a>\n# Why use python modules ?#\n \n將常用的 code 整理成 module 的好處如下:\n\n* 將相關的 code 組織在同一個 module 中, 讓 code 更容易維護, 更容易讀, 更容易 re-use\n* 避免 naming conflict, 所有定義在 module 內的變數, 都屬於此 module namespace 下\n \n- - -\n<a name=how_module></a>\n# How to use/write python modules ?#\n\n**Syntax for using a module**\n\n> **import** module1 [,module2[,...moduleN]]  \n> **import** module [as alias]  \n> **from** module **import** item1[,item2[,...itemN]]  \n> **from** module **import** item [as alias]  \n\n**一個計算 fibonacci sequence 的 python module 如下:**\n\n    # module fibo.py\n    def fib(n):\n        \"\"\" show fibonacci sequence up to n \"\"\"\n        a, b = 0, 1\n        while b < n:\n            print b,\n            a,b = b, a+b\n    \n    def fib2(n):\n        \"\"\" return fibonacci sequence up to n \"\"\"\n        listFibo = []\n        while b < n:\n            listFibo.append(b)\n            a,b = b, a+b\n        return listFibo\n\n**啟動 Python Interactive Console, 並切換到 module fibo.py 所在目錄下, 並執行下列指令使用 fibo module:**  \n\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__']\n    >>> import fibo\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__', 'fibo']\n    >>> fibo.fib(1000)\n    1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n    >>> fibo.fib2(100)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    \n**執行 import statement 時, 實際上執行了 3 件事情:**\n\n1. Find the file of imported module (從 sys.path 去找)  \n\n2. Compile it as byte code (if needed)  \n\n3. Run the module's code to build the objects it defines.  \n\n * A variable will be created in global namespace to reference the object of the module  \n\n**利用 from ... import ... 來簡化使用 module 內的 atrribute name**\n\n透過 from module import item 來簡化使用 module 內的 attribute name\n\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__']\n    >>> from fibo import fib, fib2\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__', 'fib', 'fib2']\n    >>> fib(1000)\n    1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n    >>> fib2(100)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\n\n**事實上, from module import item 是基於 import statement 來實現的**\n\n**from fibo import fib, fib2** 可以看拆解成下列幾個動作:  \n\n1. import fibo  \n2. fib = fibo.fib  \n3. fib2 = fibo.fib2  \n4. del fibo\n\n**每個 module 都會有一個 \\_\\_name\\_\\_ attribute, 代表這個 module 的名稱**\n\n    >>> import fibo\n    >>> dir(fibo)\n    ['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'fib', 'fib2', 'main']\n    >>> fibo.__name__\n    'fibo'\n\n當這個 python module 被當作 script 執行時, \\_\\_name\\_\\_ 的內容將被改為 \"\\_\\_main\\_\\_\"  \n這樣的做法可以讓每個 module 將特定的代碼只有在 module 被當作 script 執行時, 才會執行\n\n    def fib(n):\n        a,b = 0,1\n        while b < n:\n            print b,\n            a,b = b, a+b\n    \n    def fib2(n):\n        result = []\n        a,b = 0,1\n        while b < n:\n            result.append(b)\n            a, b = b, a+b\n        return result\n    \n    \n    def main():\n        fib(1000)\n        print \"\\n\", fib2(100)\n    \n    if __name__ == '__main__':\n        main()\n\n在 Python Interactive Console 下執行:\n\n    E:\\Temp\\Python\\hw3\\example>python.exe fibo.py\n    1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\n此時 __ name __ 將等於 \"__ main __\", 會跑到 main() function 去執行\n\n**from module import \\*** statement\n\n如果 module 中無定義 \\_\\_all\\_\\_ 變數, 則將會 copy 此 module 中所有 attributes (不含\\_\\_開頭之 attributes)  \n否則, 只會 copy \\_\\_all\\_\\_ 變數中所指定之 attributes\n\nExampe: (imported module 中無定義 \\_\\_all\\_\\_ 變數)\n\n    # module fibo.py\n\n    def fib(n):\n        a,b = 0,1\n        while b < n:\n            print b,\n            a,b = b, a+b\n    \n    def fib2(n):\n        result = []\n        a,b = 0,1\n        while b < n:\n            result.append(b)\n            a, b = b, a+b\n        return result\n\nOutput:\n\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__']\n    >>> import fibo\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__', 'fibo']\n    >>> dir(fibo)\n    ['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'fib', 'fib2']\n    >>> del fibo\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__']    \n    >>> from fibo import *\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__', 'fib', 'fib2']\n\nExampe: (imported module 中有定義 \\_\\_all\\_\\_ 變數)\n\n    # module fibo.py\n\n    __all__ = [\"fib2\"]\n\n    def fib(n):\n        a,b = 0,1\n        while b < n:\n            print b,\n            a,b = b, a+b\n    \n    def fib2(n):\n        result = []\n        a,b = 0,1\n        while b < n:\n            result.append(b)\n            a, b = b, a+b\n        return result\n\nOutput:\n\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__']\n    >>> from fibo import *\n    >>> dir()\n    ['__builtins__', '__doc__', '__name__', '__package__', 'fib2']\n    \n- - -\n<a name=module_search_path></a>\n# Module Search Path #\n\n當你寫好自己的 Module 後, 想當成 Library 可以提供其他 Python Module 來使用時,  \n必須將 Module 放到其 Search Path 中, 才能讓 Module 被正常 import 且使用.  \n一般來說, Module Search Path 是以 sys.path 來表示, 由下列成員所組成:\n\n1. Directory containing the script (目前執行之 Script 所在的目錄)\n2. PYTHONPATH (系統中的環境變數, User 可將自訂的 Module Location 填入此環境變數中)\n3. Installation Default Dependent (與平台系統相關的路徑, 安裝 Python 時, 將會自動決定)\n\n當被 import 的 module 無法在 sys.path 中被搜尋到, 將會產生 ImportError Exception.  \n當前執行的 script 目錄中, 若有與 Standard Library 中的 module 有相同名稱, 則會遮蔽 Standard Library 的 Module.\n\n- - -\n<a name=reload_module></a>\n# Reload Your Module To Apply Any Modification #\n\n請記得, 每個 python interpreter session 中, 只會 import 一次 module, 因此當 module 變動時, 請執行  \n\n* reload(module)\n\n![](http://MutsuGhost1.github.io/image/python_reload_function.PNG)\n\n所有 reference 到此 module 的變數, 都將受影響\n\n- - -\n<a name=what_package></a>\n# What's package ? #\n\nPackage 由一個 Directory 所構成, 裡面包含了 Python Module 檔案, 以及一個名稱為 **\\_\\_ini\\_\\_.py** 的檔案.  \n透過 **\\_\\_ini\\_\\_.py** 檔案, Python Interpreter 才會將此 Directory 視為一個 Package.  \n\n![](http://MutsuGhost1.github.io/image/python_package.PNG)\n\n上圖既為一個簡單的 Package, 透過 import A.B 則可 import package A 中的 module B.\n\n- - -\n<a name=why_package></a>\n# Why use package ? #\n\n使用 Package 來組織 Python Module 的好處在於: \n\n* 可以降低 Module 間的 Coupling, 增加 Module 內的 Cohesion  \n* 使得 Module 更易於 Maintain\n* 讓 Module 更 readable  \n\n- - -\n<a name=how_package></a>\n# How to use packages #\n\n透過下列幾種方法, 可以 import package 或 package 內的 module:\n\n* import package.module [as alias]\n    * 將執行 package 內的 \\_\\_init\\_\\_.py 檔案, 做為 package 的初始化  \n    * 建立一個新的 namespace for this module of package\n    * 透過 package.module.item (or alias.item) 來存取此 module 中的各項 attributes \n* import package\n    * 僅執行 package 內的 \\_\\_init\\_\\_.py 檔案, 做為 package 的初始化\n* from package import module [as alias] \n    * 將執行 package 內的 \\_\\_init\\_\\_.py 檔案, 做為 package 的初始化\n    * 從 package 中, copy 出此 module\n    * 透過 module.item (or alias.item) 來存取此 module 中的各項 attributes  \n\n假設目前有一個 sound package 其結構如下:\n\n    + sound/                    # top level package\n        __init__.py             # initialize the sound package\n      + formats/                # sub-package for file format converstions\n          __init__.py\n          wavread.py\n          wavwrite.py\n          aifread.py\n          aifwrite.py\n          auread.py\n          auwrite.py\n          ...\n      + effects/                # sub-package for sound effects\n          __init__.py\n          echo.py\n          surround.py\n          reverse.py\n          ...\n      + filters/                # sub-package for filters\n          __init__.py\n          equalizer.py\n          vocoder.py\n          karaoke.py\n          ...\n\n使用者透過 import package.module, 可以 import package 中的某個 module,  \nEx:\n\n    import sound.effects.echo \n    sound.effects.echo.echofilter(input, output, delay = 0.7, atten = 4)\n    \n\n透過 from package import module, 使用者可以從特定 package 中, copy 出某個 module,  \nEx:\n\n    from sound.effects\n    import echo echo.echofilter(input, output, delay = 0.7, atten = 4)\n    \n透過 from package.module import item, 使用者可以從特定 package 中的 module, copy 某個 attribute,  \nEx:\n    \n    from sound.effects.echo \n    import echofilter echofilter(input, output, delay = 0.7, atten = 4)\n\n\n**from package import \\*** statement\n\n在實際的應用中, 使用者可能會想要一次將 package 中的 module 都 import 進 namespace 中.  \n但事實上, 這樣的做法會因為 import 某些使用者不預期的 module 而產生一些使用不預期的行為.  \n正因為如此, 針對 package 的 import \\* 就必須遵守下列的規則:\n\n  * 若是 package 中的 \\_\\_init\\_\\_.py 檔案內有定義 \\_\\_all\\_\\_ 變數, 則會依據 \\_\\_all\\_\\_變數中的內容,  \n  來決定要 import 哪些 sub-modules\n  * 否則當\\_\\_init\\_\\_.py 檔案內沒有定義 \\_\\_all\\_\\_ 變數, 則只會執行 \\_\\_init\\_\\_.py 內的敘述\n\n**intra package reference**  \n\n* import module in the same package  \n  The surround module, it can simply use:\n\nEx:  \n\n    # surround.py\n    import echo\n    from echo import echofilter\n    \n* import module in the different package  \n  Use absolute import to refer sub-modules of sibling package:\n\nEx:\n\n    #vocoder.py\n    from sound.effects import echo\n\n- - -\n<a name=package_example></a>\n# An example to refactor a module as a package #\n\n假設目前有一個 module phone.py, 裡面包含了 utility for Pots phone, Isdn phone and G3 phone.  \n如下:\n\n    # Phone.py\n    def  Pots():\n        print “I’m Pots Phone”\n    \n    def Isdn():\n        print “I’m Isdn Phone”\n    \n    Def G3():\n        print “I’m G3 Phone”\n     \n事實上, 我們可以將它規劃成 package 的形式,  \n如下：  \n\n    + Phone\n        \\_\\_init\\_\\_.py\n        Pots.py\n        Isdn.py\n        G3.py\n\n透過在 \\_\\_init\\_\\_.py　中, 將 sub-module 中的 utility 都 copy 出來,  \n如下:\n\n    # file: __init__.py\n    from Pots import Pots    # 從 Pots 這個 sub-module 中, copy Pots 這個 attribute\n    from Isdn import Isdn    # 從 Isdn 這個 sub-module 中, copy Isdn 這個 attribute\n    from G3 import G3        # 從 G3 這個 sub-module 中, copy G3 這個 attribute\n\n用戶端的代碼,  \n如下:\n\n    # test.py\n    import Phone\n    \n    Phone.Pots()\n    Phone.Isdn()\n    Phone.G3()\n\nOutput:\n\n    I’m Pots Phone\n    I’m Isdn Phone\n    I’m G3 Phone\n\n\n這樣的設計, 不僅能夠讓使用者更容易理解這些 module, 也能降低 module maintain 上的 efforts\n","mtime":1401657058000,"source":"source/_posts/python-module-package.md"},"1u21iuciutelhcoi":{"_id":"1u21iuciutelhcoi","content":"title: Python OOP Exception\ndate: 2013-09-27 14:55:04\ncategories: Software\ntags: [Python, Study Group]\n---\n* Python OOP\n* Constructor/Destructor\n* Class/Instance Members\n* Access Control in Python OOP\n* Inheritance\n* Polymorphism\n* Operator Overloading\n* Function Overloading\n* Object Types in Python\n* Check relationship between class and instance\n\n<!--more-->\n- - -\n\n# Python OOP #\n\nPython 語言, 本身也支援 **O**bject **O**riented **P**rogramming 這樣的 Programming Pradigm.  \n語法上, 是採取類似 C++ 與 Modula-3 的語法.  \n\n一個最簡單的 class definition 如下：\n    \n    class oldStyle:\n        pass\n\n語法上, class definition 可以寫成:\n\n    class DerivedClassName(BaseClass1[,BaseClass2[,…]]):\n        statement1\n        …\n        statementN\n\n其中的 statement1 ... statementN 可以是:\n\n* Data memeber definition\n* Member function definition\n* Memeber class definition\n\n當 import module 時, python interpret 到一個 class definition 時,  \n它會將 class 內相關的 definition 都定義在此 class 所建立的 namespace 內.  \n\n**New Style Class v.s. Old Style Class**  \n\n  * Python 2.2 之前, type 和 class 是不同的\n      * type (list, tuple, dict ... etc)\n      * class\n  * Python 2.2 Unifying type and class\n      * The obvious change is built-in types can be used to as base class\n      * 沒有明確繼承其他 class 的 class definition, 稱為 Old Style Class\n      * Python 3 後, 沒有明確繼承 class 將會視為 default 繼承 object\n  * Reference: [http://www.python.org/download/releases/2.2.3/descrintro/](http://www.python.org/download/releases/2.2.3/descrintro/ \"說明 Python 2.2 後, 整合 type and class 的文章\")  \n\nEx:  \n\n    # define a old style class in python 2.x\n    class oldStyleClass:\n    pass\n    # define a new style class in python 2.x\n    class newStyleClass (object):\n    pass\n    \n- - -\n\n# Constructor/Destructor #\n\n先前提到, 定一個最簡單的 new style class, 如下:\n\n    #define a simplest class named \"Employee\"\n    class Employee (object):\n        pass\n\n假設我們要新增一個功能, 來替 Employee 來紀錄, 目前 instance of Employee 的有效個數.    \n可以透過新增 Constructor & Destructor 加上一個 class variable 來實現, 具體如下:\n\n    class Employee (object):\n        empCount = 0\n\n        def __init__(self):\n            Employee.empCount += 1\n\n        def __del__(self):\n            Employee.empCount -= 1\n\n也許有人會問, 在有 GC 機制的語言中, Destructor 存在的目的是?  \n通常 Destructor 的存在, 就是讓 Object 能提早釋放占用的資源.   \n\n- - -\n\n# Class/Instance Memebers #\n\n接下來, 我們想替 Class 加上額外的 Memebers, 包含了:\n\n* Instance Variable\n    * 用來表示 instance of Employee 的姓名, 命名為 name, 預設為 \"anonymous\" \n    * 用來記錄各個 instance of Employee 的基本薪資, 命名為 base_salary, 預設為 1000\n* Static Method\n    * 定義一個 static method 能夠印出目前 # of instance of Employee, 命名為 EmployeeCount \n* Instance Method\n    * 定義一個 instance method, 能夠取得目前 instance of Employee 的總薪資, 命名為 getSalary \n\n具體代碼如下:\n\n    class Employee (object):\n        empCount = 0\n\n        def __init__(self, name=\"anonymous\", base_salary=1000):\n            Employee.empCount = 0\n            self.name = name\n            self.base_salary = base_salary\n\n        def __del__(self):\n            Employee.empCount = 0\n\n        @staticmethod\n        def EmployeeCount():\n            print \"Employee Count:\" + str(Employee.empCount)\n\n        def getSalary(self):\n            return self.base_salary\n\n從上列代碼, 可以歸納出以下幾件事:\n\n* 定義在 class 內部, 非 method 內部的變數, 視為 class variable\n* 定義在 class 內部的 method, 預設都是 instance method, 第一個參數都是 reference to the instance, 習慣上命名為 self\n* 通常 instance variable 都直接定義在 class 定義裡, instance method body 中, 習慣上都是以 self. 當作 prefix  \n* 在 class 內部定義 static method, 請在 method 的宣告前面使用 @staticmethod, 來告訴 python interpreter 這個 method 是一個 static method, 不帶 self 參數\n\n\n接下來將展示此 class 將如何被使用:  \n\n    class Employee (object):\n        empCount = 0\n\n        def __init__(self, name=\"anonymous\", base_salary=1000):\n            Employee.empCount = 0\n            self.name = name\n            self.base_salary = base_salary\n\n        def __del__(self):\n            Employee.empCount = 0\n\n        @staticmethod\n        def EmployeeCount():\n            print \"Employee Count:\" + str(Employee.empCount)\n\n        def getSalary(self):\n            return self.base_salary\n\n        # the method will be called when call str(new Employee())\n        def __str__(self):\n            return \"Employee name:\" + self.name + \" base_salary:\" + self.base_salary\n\n    def main():\n       employee1 = Employee(\"Peter\")\n       print employee1\n       print “Salary=” + str(employee1.getSalary())\n       Employee.EmployeeCount()\n       del employee1\n       Employee.EmployeeCount()\n\n    if \"__main__\" == __name__:\n        main()\n\nOutput:\n\n    Employee: name=Peter base_salary=1000\n    Salary=1000\n    EmployeeCount: Employee.empCount = 1\n    EmployeeCount: Employee.empCount = 0\n\n- - -\n\n# Access Control in Python OOP #\n\n在 Pyhon 中, 並沒有提供 Modifier 來明確的來控制 Attribute 的存取權限.  \n相反的, Python 是透過一種 Naming Convention 來告訴 User, 這個 Attribute 是 Private 的.  \n雖然如此, User 想要強制存取此 Private Attribute, 還是可以達成的.\n\nEx:\n\n    class Employee (object):\n       __empCount = 0\n    \n    def main():\n        # the name of attribute is changed as \"_Employee\" + \"__empCount\"\n        print Employee._Employee__empCount\n\n    if \"__main__\" == __name__:\n        main()\n\nOutput:\n\n    0\n\n* Python 中, 每個 Attribute 都是 Public 的\n* 以 \"__\" 開頭的 Attribute, 會被做 Name Mangling, 改名為 \"_\" + ClassName + AttributeName\n* 以 \"__\" 開頭的 Attribute, 只是在習慣上被視為 Private 的, 但是仍然可強制存取 \n    \n- - -\n\n# Inheritance #\n\n如果我們想要加入一個特別的 Employee, 稱為 Manager, 可以考慮用繼承的方式達成. \nManager 除了本身是一個 (is a) Emplyoee 外, 還必須滿足:\n\n* Manager 繼承了 Employee 的所有 attributes\n* Manager 多了 bonus 的 attribute\n* Manager 的 getSalary 結果, 必須是 base_salary + bonus 的結果\n\n\nEx: **invoke the method in the super class**\n\n    # demo how to invoke the method in the super class\n\n    class Manager (Employee):\n         \n        def __init__(self, name=\"anonymous\", base_salary=1200, bonus = 200):\n            super(Manager, self).__init__(name, base_salary)\n            self.bonus = bonus\n\n        def __del__(self):\n            super(Manager, self).__del__()\n\n\nEx: **Override the method in the super class**\n\n    class Manager (Employee):\n         \n        def __init__(self, name=\"anonymous\", base_salary=1200, bonus = 200):\n            super(Manager, self).__init__(name, base_salary)\n            self.bonus = bonus\n\n        def __del__(self):\n            super(Manager, self).__del__()\n\n        def getSalary(self):\n            return super(Manager, self).getSalary() + self.bonus\n\n        def __str__(self):\n            return \"Manager name:\" + self.name + \" base_salary:\" + str(self.base_salary) + \\\n                   \" bonus:\" + str(self.bonus)\n\n    def main():\n       manager1 = Manager(\"Peter\")\n       print manager1\n       print “Salary=” + str(manager1.getSalary())\n       del manager1\n\n    if \"__main__\" == __name__:\n        main()\n\nOutput:\n\n    Manager: name=John base_salary=1200 bonus=200\n    Salary=1400\n\n- - -\n\n# Polymorphism #\n\n由於 Python 是一個 Weakly Type 的語言, 因此在變數的宣告時, 並不會明確指出特定的型別.  \n因此, 只要此變數所指向的 Object, 符合操作所需要的各項 Attribute, 則 Program 即可正常運作.  \n\nEx:\n\n    def main():\n        list_employees = [Manager(“John”), Employee(\"Peter\")]\n        for employee in list_employees:\n            print employee.__str__()\n\n    if __name__ == '__main__':\n        main()\n    \nOutput:\n    \n    Manager: name=John base_salary=1200 bonus=200\n    Employee: name=Peter base_salary=1000\n\n\n**事實上, Python 這樣的做法提供了更彈性的使用方式. 在撰寫特定演算法的時候,  \n只需要考慮 Object 本身能提供哪些 Attributes, 不需要考慮 Object 的繼承體系.**\n\n- - -\n\n# Operator Overloading #\n\nPython 本身定義了一組 Built-in Operators, 讓使用者可以 Overloading 其行為.\n\nEx:\n\n    class Vector (object):\n       def __init__(self, x=0, y=0):\n           self.x = x\n           self.y = y\n       def __add__(self, rhs):\n           return Vector(self.x + rhs.x, self.y + rhs.y)\n       def __str__(self):\n           return \"Vector: (\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n       class Point (object):\n       def __init__(self, x=0, y=0):\n           self.x = x\n           self.y = y\n       def __add__(self, rhs):\n           return Point(self.x + rhs.x, self.y + rhs.y)\n       def __str__(self):\n           return \"Point: (\" + str(self.x) + \", \" + str(self.y) + \")\"\n    \n    def main():\n       vec1 = Vector(10, 20)\n       vec2 = Vector(90, 80)\n       print vec1 + vec2\n\n       p1 = Point(3,   10)\n       p2 = Point(-3, -10)\n       print p1 + p2\n    \n       # the evaluation order is ((vec1 + p1) + p2)\n       print vec1 + p1 + p2\n       # the evaluation order is ((p2 + vec1) + vec2)\n       print p2 + vec1 + vec2\n    \nOutput:\n\n    Vector: (100, 100)\n    Point: (0, 0)\n    Vector: (10, 20)\n    Point: (97, 90)\n\n如同之前提到的, Python 中, 只要 Object 有能力 (有 Attributes) 就可以正常執行.  \n上面這個例子顯示, 既使是 vec1 + p1 或 p2 + vec1, 這樣的操作都是合法的.  \n因為 Python 只知道, 把 vec1 + p1 換成 vec1.__add__(p1), 只要 p1 提供足夠的能力, 能完成 __add__ 既可.  \n此外, Python 中 Operator 的 Evaluation Order 都是從左到右, 不能被改變.\n\nReference:\n\n* [http://docs.python.org/2/library/operator.html](http://docs.python.org/2/library/operator.html \"Operator Overloading\")\n* [http://docs.python.org/2/reference/expressions.html#evaluation-order](http://docs.python.org/2/reference/expressions.html#evaluation-order \"Operator Evaluation Order\")\n\n- - -\n\n# Function Overloading #\n\nPython 中, 並沒有提供 Function Overloading 的機制. 一般而言, 會透過下列方式來達成:  \n\n* Default Arguments\n* Variable Length Arguments With List\n* Variable Length Arguments With Dict \n\nEx: **Default Arguments**\n\n    class Employee (object):\n       empCount = 0\n\n       def __init__(self, name=\"\", base_salary=1000):\n           self.base_salary = base_salary\n           self.name = name\n           Employee.empCount += 1\n\n       def __del__(self):\n           Employee.empCount -= 1\n\n       @staticmethod\n       def EmployeeCount():\n           print \"Employee.empCount = \" + str(Employee.empCount)\n\n       def getSalary(self):\n           return self.base_salary\n\n       def __str__(self):\n           return \"Employee: name=\" + self.name + \\\n                  \" base_salary=\" + str(self.base_salary)\n    \n    def main():\n       employee1 = Employee(\"Peter\")\n       print employee1\n       print “Salary=” + str(employee1.getSalary())\n       Employee.EmployeeCount()\n       del employee1\n       Employee.EmployeeCount()\n\n    if __name__ == '__main__':\n        main()\n\nOutput:\n\n    Employee: name=Peter base_salary=1000\n    Salary=1000\n    EmployeeCount: Employee.empCount = 1\n    EmployeeCount: Employee.empCount = 0\n\n\nEx: **Variable Length Arguments With Tuple**\n    \n    class Employee (object):\n       empCount = 0\n    \n       def __init__(self, *args):\n           self.name  = “”\n           self.salary = 1000\n           if 1 <= len(args): self.name  = args[0]\n           if 2 <= len(args): self.salary = args[1]\n           Employee.__empCount += 1\n    \n       def __del__(self):\n           Employee.empCount -= 1\n    \n       @staticmethod\n       def EmployeeCount():\n           print \"Employee.empCount = \" + str(Employee.empCount)\n    \n       def getSalary(self):\n           return self.base_salary\n    \n       def __str__(self):\n           return \"Employee: name=\" + self.name + \\\n                  \" base_salary=\" + str(self.base_salary)\n    \n    def main():\n       employee1 = Employee(\"Peter\")\n       print employee1\n       print “Salary=” + str(employee1.getSalary())\n       Employee.EmployeeCount()\n       del employee1\n       Employee.EmployeeCount()\n\n    if __name__ == '__main__':\n       main()\n    \nOutput:\n\n    Employee: name=Peter base_salary=1000\n    Salary=1000\n    EmployeeCount: Employee.empCount = 1\n    EmployeeCount: Employee.empCount = 0\n\n\nEx: **Variable Length Arguments With Dict**\n\n    class Employee (object):\n       empCount = 0\n    \n       def __init__(self, **args):\n           self.name  = args.get(“name”, “”)\n           self.salary = args.get(“salary”, 1000)\n           Employee.__empCount += 1\n    \n       def __del__(self):\n           Employee.empCount -= 1\n    \n       @staticmethod\n       def EmployeeCount():\n           print \"Employee.empCount = \" + str(Employee.empCount)\n    \n       def getSalary(self):\n           return self.base_salary\n    \n       def __str__(self):\n           return \"Employee: name=\" + self.name + \\\n                  \" base_salary=\" + str(self.base_salary)\n\n    def main():\n       employee1 = Employee(\"Peter\")\n       print employee1\n       print “Salary=” + str(employee1.getSalary())\n       Employee.EmployeeCount()\n       del employee1\n       Employee.EmployeeCount()\n    \n    if __name__ == '__main__':\n       main()\n\nOutput:\n\n    Employee: name=Peter base_salary=1000\n    Salary=1000\n    EmployeeCount: Employee.empCount = 1\n    EmployeeCount: Employee.empCount = 0\n\n\n此外, 要注意的一點是, 如果你強制寫了兩個相同 Signature 的 Method, 後者會覆蓋前者.  \n\nEx:\n\n\nOutput:\n\n- - -\n\n# Object Types in Python #\n\n\n\n在 Python 中, 所有物件的型別可以分為下列 3 種:\n\n1. Class Object  \n * Instantiation\n * Attribute Reference\n2. Instance Object\n * Attribute Reference\n3. Method Object\n * \n\n- - -\n\n# Check relationship between class and instance #\n","mtime":1401657067000,"source":"source/_posts/python-oop-exception.md"},"psn4vrb305gm1bf7":{"_id":"psn4vrb305gm1bf7","content":"title: todolist\ndate: 2013-09-27 14:05:30\n---\n## 2013 Q4 預計完成的事項 ##\n1. Python Expert Course\n   * 作業全部完成\n   * 將課程心得整理到 Blog 上\n2. Clound Computing Course For Hadoop\n   * [Hadoop 雲端課程](http://trac.nchc.org.tw/cloud/wiki/NCHCCloudCourse090914 \"Hadoop 雲端課程\")\n   * 完成所有作業\n3. Unit Test 心得整理\n   * 把前一年所學習到的 UT 心得整理成文章\n   * Publish 出去\n4. 持續學習英文\n   * 將心得 Update 到 Blog","mtime":1401655984000,"source":"source/todolist/index.md"},"3025uepuv38yweex":{"_id":"3025uepuv38yweex","content":"<%- partial('_partial/archive', {pagination: config.archive}) %>","mtime":1401655984000,"source":"themes/light/layout/archive.ejs"},"3yv8javebnstiz1t":{"_id":"3yv8javebnstiz1t","content":"<%- partial('_partial/archive', {pagination: config.category}) %>","mtime":1401655984000,"source":"themes/light/layout/category.ejs"},"lypxaacgrwozvwny":{"_id":"lypxaacgrwozvwny","content":"<% page.posts.each(function(item){ %>\n  <%- partial('_partial/article', {item: item, index: true}) %>\n<% }); %>\n\n<%- partial('_partial/pagination') %>","mtime":1401655984000,"source":"themes/light/layout/index.ejs"},"lcenb7va1xq0skr7":{"_id":"lcenb7va1xq0skr7","content":"<%- partial('_partial/head') %>\n\n<body>\n  <header id=\"header\" class=\"inner\"><%- partial('_partial/header') %></header>\n  <div id=\"content\" class=\"inner\">\n    <div id=\"main-col\" class=\"alignleft\"><div id=\"wrapper\"><%- body %></div></div>\n    <aside id=\"sidebar\" class=\"alignright\"><%- partial('_partial/sidebar') %></aside>\n    <div class=\"clearfix\"></div>\n  </div>\n  <footer id=\"footer\" class=\"inner\"><%- partial('_partial/footer') %></footer>\n  <%- partial('_partial/after_footer') %>\n</body>\n</html>","mtime":1401655984000,"source":"themes/light/layout/layout.ejs"},"6nttsfk4wxw0solj":{"_id":"6nttsfk4wxw0solj","content":"<%- partial('_partial/article', {item: page, index: false}) %>","mtime":1401655984000,"source":"themes/light/layout/page.ejs"},"jljfgu1s06tdkck8":{"_id":"jljfgu1s06tdkck8","content":"<%- partial('_partial/article', {item: page, index: false}) %>","mtime":1401655984000,"source":"themes/light/layout/post.ejs"},"lv9w7xdgsv92f1vq":{"_id":"lv9w7xdgsv92f1vq","content":"<%- partial('_partial/archive', {pagination: config.tag}) %>","mtime":1401655984000,"source":"themes/light/layout/tag.ejs"},"p95m5tz1w1ncljxk":{"_id":"p95m5tz1w1ncljxk","content":"<% if (site.categories.length){ %>\n<div class=\"widget tag\">\n  <h3 class=\"title\"><%= __('categories') %></h3>\n  <ul class=\"entry\">\n  <% site.categories.sort('name').each(function(item){ %>\n    <li><a href=\"<%- config.root %><%- item.path %>\"><%= item.name %></a><small><%= item.posts.length %></small></li>\n  <% }); %>\n  </ul>\n</div>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_widget/category.ejs"},"xwdcr8wgehmrjfrk":{"_id":"xwdcr8wgehmrjfrk","content":"<div class=\"widget tag\">\n  <h3 class=\"title\"><%= __('recent_comments') %></h3>\n  <ul class=\"entry\">\n  <script type=\"text/javascript\" src=\"http://mutsughost1.disqus.com/recent_comments_widget.js?num_items=5&hide_avatars=0&avatar_size=32&excerpt_length=200&hide_mods=0\"></script>\n  </ul>\n</div>\n","mtime":1401655984000,"source":"themes/light/layout/_widget/recent_comments.ejs"},"f08z3qaffp94j5o5":{"_id":"f08z3qaffp94j5o5","content":"<% if (site.posts.length){ %>\n<div class=\"widget tag\">\n  <h3 class=\"title\"><%= __('recent_posts') %></h3>\n  <ul class=\"entry\">\n    <% site.posts.sort('date', -1).limit(5).each(function(post){ %>\n      <li>\n        <a href=\"<%= config.root %><%= post.path %>\"><%= post.title %></a>\n      </li>\n    <% }); %>\n  </ul>\n</div>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_widget/recent_posts.ejs"},"2e5s2atgt69tr9g5":{"_id":"2e5s2atgt69tr9g5","content":"<div class=\"search\">\n  <form action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n    <input type=\"search\" name=\"q\" results=\"0\" placeholder=\"<%= __('search') %>\">\n    <input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n  </form>\n</div>","mtime":1401655984000,"source":"themes/light/layout/_widget/search.ejs"},"ic3ef5tvvaa7m7hj":{"_id":"ic3ef5tvvaa7m7hj","content":"<% if (site.tags.length){ %>\n<div class=\"widget tag\">\n  <h3 class=\"title\"><%= __('tags') %></h3>\n  <ul class=\"entry\">\n  <% site.tags.sort('name').each(function(item){ %>\n    <li><a href=\"<%- config.root %><%- item.path %>\"><%= item.name %></a><small><%= item.posts.length %></small></li>\n  <% }); %>\n  </ul>\n</div>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_widget/tag.ejs"},"pcfz0za385z85pmq":{"_id":"pcfz0za385z85pmq","content":"<% if (site.tags.length){ %>\n<div class=\"widget tagcloud\">\n  <h3 class=\"title\"><%= __('tagcloud') %></h3>\n  <div class=\"entry\">\n    <%- tagcloud(site.tags, {}) %>\n  </div>\n</div>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_widget/tagcloud.ejs"},"nqhfanrp82l5ggwx":{"_id":"nqhfanrp82l5ggwx","content":"<div class=\"widget tag\">\n  <h3 class=\"title\"><%= __('twitter_posts') %></h3>\n  <ul class=\"entry\">\n  <a class=\"twitter-timeline\" height=\"250\" href=\"https://twitter.com/MutsuGhost1\" data-widget-id=\"384199658408402944\">@MutsuGhost1������</a>\n  <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\"://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script>\n  </ul>\n</div>\n\n","mtime":1401655984000,"source":"themes/light/layout/_widget/twitter_posts.ejs"},"ebdm87agfy44zuii":{"_id":"ebdm87agfy44zuii","content":"<script src=\"//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n<script src=\"<%- config.root %>js/jquery.imagesloaded.min.js\"></script>\n<script src=\"<%- config.root %>js/gallery.js\"></script>\n\n<% if (config.disqus_shortname){ %>\n<script type=\"text/javascript\">\nvar disqus_shortname = '<%= config.disqus_shortname %>';\n\n(function(){\n  var dsq = document.createElement('script');\n  dsq.type = 'text/javascript';\n  dsq.async = true;\n  dsq.src = '//' + disqus_shortname + '.disqus.com/<% if (page.comments){ %>embed.js<% } else { %>count.js<% } %>';\n  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n}());\n</script>\n<% } %>\n\n<% if (theme.fancybox){ %>\n<link rel=\"stylesheet\" href=\"<%- config.root %>fancybox/jquery.fancybox.css\" media=\"screen\" type=\"text/css\">\n<script src=\"<%- config.root %>fancybox/jquery.fancybox.pack.js\"></script>\n<script type=\"text/javascript\">\n(function($){\n  $('.fancybox').fancybox();\n})(jQuery);\n</script>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_partial/after_footer.ejs"},"k4du0ykzq9kt727x":{"_id":"k4du0ykzq9kt727x","content":"<%\nvar title = '';\nif (page.category) title = page.category;\nif (page.tag) title = page.tag;\nif (page.archive){\n  if (page.year) title = page.year + (page.month ? '/' + page.month : '');\n  else title = __('archive_a');\n}\n%>\n<h2 class=\"archive-title<% if (page.tag){ %> tag<% } else if (page.category){ %> category<% } %>\"><%= title %></h2>\n\n<% if (pagination == 2){ %>\n  <% page.posts.each(function(item){ %>\n    <%- partial('article', {item: item, index: true}) %>\n  <% }); %>\n\n  <%- partial('pagination') %>\n<% } else { %>\n  <div class=\"archive\">\n    <% page.posts.each(function(item){ %>\n      <article class=\"<%= item.layout %>\">\n        <div class=\"post-content\">\n          <header>\n            <div class=\"icon\"></div>\n            <time datetime=\"<%= item.date.toDate().toISOString() %>\"><a href=\"<%- config.root %><%- item.path %>\"><%= item.date.format(config.date_format) %></a></time>\n            <% if (item.link){ %>\n              <% if (item.title){ %>\n                <h1 class=\"title link\"><a href=\"<%- item.link %>\" target=\"_blank\"><%= item.title %></a></h1>\n              <% } else { %>\n                <h1 class=\"title link\"><a href=\"<%- item.link %>\" target=\"_blank\"><%= item.link %></a></h1>\n              <% } %>\n            <% } else { %>\n              <h1 class=\"title\"><a href=\"<%- config.root %><%- item.path %>\"><%= item.title %></a></h1>\n            <% } %>\n          </header>\n        </div>\n      </article>\n    <% }); %>\n  </div>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_partial/archive.ejs"},"5koopviwaiobyzbu":{"_id":"5koopviwaiobyzbu","content":"<article class=\"<%= item.layout %>\">\n  <% if (item.photos){ %>\n    <%- partial('post/gallery') %>\n  <% } %>\n  <div class=\"post-content\">\n    <header>\n      <% if (item.layout != 'page'){ %>\n        <div class=\"icon\"></div>\n        <time datetime=\"<%= item.date.toDate().toISOString() %>\"><a href=\"<%- config.root %><%- item.path %>\"><%= item.date.format(config.date_format) %></a></time>\n      <% } %>\n      <%- partial('post/title') %>\n    </header>\n    <div class=\"entry\">\n      <% if (item.excerpt && index){ %>\n        <%- item.excerpt %>\n      <% } else { %>\n        <%- item.content %>\n      <% } %>\n    </div>\n    <footer>\n      <% if (index){ %>\n        <% if (item.excerpt){ %>\n          <div class=\"alignleft\">\n            <a href=\"<%- config.root %><%- item.path %>#more\" class=\"more-link\"><%= theme.excerpt_link %></a>\n          </div>\n        <% } %>\n        <% if (item.comment && config.disqus_shortname){ %>\n        <div class=\"alignright\">\n          <a href=\"<%- item.permalink %>#disqus_thread\" class=\"comment-link\">Comments</a>\n        </div>\n        <% } %>\n      <% } else { %>\n        <%- partial('post/category') %>\n        <%- partial('post/tag') %>\n        <%- partial('post/share') %>\n      <% } %>\n      <div class=\"clearfix\"></div>\n    </footer>\n  </div>\n</article>\n\n<%- partial('comment') %>","mtime":1401655984000,"source":"themes/light/layout/_partial/article.ejs"},"kik60utlxxjc9jz1":{"_id":"kik60utlxxjc9jz1","content":"<% if (config.disqus_shortname && page.comments){ %>\n<section id=\"comment\">\n  <h1 class=\"title\"><%= __('comment') %></h1>\n  <div id=\"disqus_thread\">\n    <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n  </div>\n</section>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_partial/comment.ejs"},"90gvvwjqj0vfirk9":{"_id":"90gvvwjqj0vfirk9","content":"<div class=\"alignleft\">\n  <% if (config.author){ %>\n  &copy; <%= new Date().getFullYear() %> <%= config.author %>\n  <% } else { %>\n  &copy; <%= new Date().getFullYear() %> <%= config.title %>\n  <% } %>\n</div>\n<div class=\"clearfix\"></div>","mtime":1401655984000,"source":"themes/light/layout/_partial/footer.ejs"},"wfcpg4msg91zhull":{"_id":"wfcpg4msg91zhull","content":"<% if (theme.google_analytics){ %>\n<script type=\"text/javascript\">\n  var _gaq = _gaq || [];\n  _gaq.push(['_setAccount', '<%= theme.google_analytics %>']);\n  _gaq.push(['_trackPageview']);\n\n  (function() {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n  })();\n</script>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_partial/google_analytics.ejs"},"3is7p13ogsevfvte":{"_id":"3is7p13ogsevfvte","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <%\n  var title = [];\n  if (page.current > 1) title.push(__('page', page.current));\n  if (page.title) title.push(page.title);\n  if (page.category) title.push(page.category);\n  if (page.tag) title.push(page.tag);\n  if (page.archive){\n    if (page.year) title.push(__('archive_b', page.year + (page.month ? '/' + page.month : '')));\n    else title.push(__('archive_a'));\n  }\n  title.push(config.title);\n  %>\n  <title><%= title.join(' | ') %></title>\n  <% if (config.author){ %><meta name=\"author\" content=\"<%= config.author %>\"><% } %>\n  <% if (page.description){ %>\n  <meta name=\"description\" content=\"<%= page.description %>\">\n  <% } else if (config.description){ %>\n  <meta name=\"description\" content=\"<%= config.description %>\">\n  <% } else if (page.excerpt){ %>\n  <meta name=\"description\" content=\"<%= strip_html(page.excerpt).replace(/^\\s*/, '').replace(/\\s*$/, '') %>\">\n  <% } else if (page.content){ %>\n  <meta name=\"description\" content=\"<%= strip_html(page.content).replace(/^\\s*/, '').replace(/\\s*$/, '').substring(0, 150) %>\">\n  <% } %>\n  <% if (page.keywords){ %><meta name=\"keywords\" content=\"<%= page.keywords %>\"><% } %>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\n  <% if (page.title){ %><meta property=\"og:title\" content=\"<%= page.title %>\"/><% } %>\n  <meta property=\"og:site_name\" content=\"<%= config.title %>\"/>\n\n  <% if(page.cover) { %>\n    <meta property=\"og:image\" content=\"<%= page.cover %>\" />\n  <% } else { %>\n    <meta property=\"og:image\" content=\"<%= config.cover %>\"/>\n  <% } %>\n\n  <link href=\"<%- config.root %>favicon.png\" rel=\"icon\">\n  <link rel=\"alternate\" href=\"<% if (theme.rss){ %><%- theme.rss %><% } else { %><%- config.root %>atom.xml<% } %>\" title=\"<%= config.title %>\" type=\"application/atom+xml\">\n  <link rel=\"stylesheet\" href=\"<%- config.root %>css/style.css\" media=\"screen\" type=\"text/css\">\n  <!--[if lt IE 9]><script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script><![endif]-->\n  <%- partial('google_analytics') %>\n</head>\n","mtime":1401655984000,"source":"themes/light/layout/_partial/head.ejs"},"ix4p3lhy6bvs1vq8":{"_id":"ix4p3lhy6bvs1vq8","content":"<div class=\"alignleft\">\n  <h1><a href=\"<%- config.root %>\"><%= config.title %></a></h1>\n  <h2><a href=\"<%- config.root %>\"><% if (config.subtitle){ %><%= config.subtitle %><% } %></a></h2>\n</div>\n<nav id=\"main-nav\" class=\"alignright\">\n  <ul>\n    <% for (var i in theme.menu){ %>\n      <li><a href=\"<%- theme.menu[i] %>\"><%= i %></a></li>\n    <% } %>\n  </ul>\n  <div class=\"clearfix\"></div>\n</nav>\n<div class=\"clearfix\"></div>","mtime":1401655984000,"source":"themes/light/layout/_partial/header.ejs"},"0l3b0qlk4bba5zt2":{"_id":"0l3b0qlk4bba5zt2","content":"<nav id=\"pagination\">\n  <% if (page.prev){ %>\n    <a href=\"<%- config.root %><%- page.prev_link %>\" class=\"alignleft prev\"><%= __('prev') %></a>\n  <% } %>\n  <% if (page.next){ %>\n    <a href=\"<%- config.root %><%- page.next_link %>\" class=\"alignright next\"><%= __('next') %></a>\n  <% } %>\n  <div class=\"clearfix\"></div>\n</nav>","mtime":1401655984000,"source":"themes/light/layout/_partial/pagination.ejs"},"hit8gbs9g1yare58":{"_id":"hit8gbs9g1yare58","content":"<% theme.widgets.forEach(function(widget){ %>\n  <%- partial('../_widget/' + widget) %>\n<% }); %>","mtime":1401655984000,"source":"themes/light/layout/_partial/sidebar.ejs"},"qpfnz364o208lx8v":{"_id":"qpfnz364o208lx8v","content":"<% if (item.categories && item.categories.length){ %>\n  <%\n  var cats = [];\n  item.categories.forEach(function(cat){\n    cats.push('<a href=\"' + config.root + cat.path + '\">' + cat.name + '</a>');\n  });\n  %>\n  <div class=\"categories\">\n    <%- cats.join(', ') %>\n  </div>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_partial/post/category.ejs"},"ogtdndp91s4m56mh":{"_id":"ogtdndp91s4m56mh","content":"<div class=\"gallery\">\n  <div class=\"photoset\">\n    <% if (item.photos.length){ %>\n      <% item.photos.forEach(function(photo){ %>\n        <img src=\"<%- photo %>\">\n      <% }); %>\n    <% } else { %>\n      <img src=\"<%- item.photos %>\">\n    <% } %>\n  </div>\n  <div class=\"control\">\n    <div class=\"prev\"></div>\n    <div class=\"next\"></div>\n  </div>\n</div>","mtime":1401655984000,"source":"themes/light/layout/_partial/post/gallery.ejs"},"vi7b90vatrrhm4p0":{"_id":"vi7b90vatrrhm4p0","content":"<% if (theme.addthis.enable){ %>\n  <div class=\"addthis addthis_toolbox addthis_default_style\">\n    <% if (theme.addthis.facebook){ %>\n      <a class=\"addthis_button_facebook_like\" fb:like:layout=\"button_count\"></a>\n    <% } %>\n    <% if (theme.addthis.twitter){ %>\n      <a class=\"addthis_button_tweet\"></a>\n    <% } %>\n    <% if (theme.addthis.google){ %>\n      <a class=\"addthis_button_google_plusone\" g:plusone:size=\"medium\"></a>\n    <% } %>\n    <% if (theme.addthis.pinterest){ %>\n      <a class=\"addthis_button_pinterest_pinit\" pi:pinit:layout=\"horizontal\"></a>\n    <% } %>\n    <a class=\"addthis_counter addthis_pill_style\"></a>\n  </div>\n  <script type=\"text/javascript\" src=\"//s7.addthis.com/js/300/addthis_widget.js<% if (theme.addthis.pubid){ %>#pubid=<%= theme.addthis.pubid %><% } %>\"></script>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_partial/post/share.ejs"},"lms22hnpe2ge06no":{"_id":"lms22hnpe2ge06no","content":"<% if (item.tags && item.tags.length){ %>\n  <%\n  var tags = [];\n  item.tags.forEach(function(tag){\n    tags.push('<a href=\"' + config.root + tag.path + '\">' + tag.name + '</a>');\n  });\n  %>\n  <div class=\"tags\">\n    <%- tags.join(', ') %>\n  </div>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_partial/post/tag.ejs"},"teluy0r40l1g9mxm":{"_id":"teluy0r40l1g9mxm","content":"<% if (item.link){ %>\n  <% if (item.title){ %>\n    <h1 class=\"title\"><a href=\"<%- item.link %>\" target=\"_blank\"><%= item.title %></a></h1>\n  <% } else { %>\n    <h1 class=\"title\"><a href=\"<%- item.link %>\" target=\"_blank\"><%= item.link %></a></h1>\n  <% } %>\n<% } else { %>\n  <% if (index){ %>\n    <h1 class=\"title\"><a href=\"<%- config.root %><%- item.path %>\"><%= item.title %></a></h1>\n  <% } else { %>\n    <h1 class=\"title\"><%= item.title %></h1>\n  <% } %>\n<% } %>","mtime":1401655984000,"source":"themes/light/layout/_partial/post/title.ejs"}}}